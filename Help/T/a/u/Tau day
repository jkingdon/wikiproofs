Happy tau day, everyone.<ref>[http://tauday.com/ tauday.com]</ref>

Wikiproofs.org is a site where we write math proofs in a formal language which can be checked by the site. Although we have no objection to celebrating tau day in the customary fashion of serving two pies, our tau day project will involve some actual mathematics, namely, proving some simple statements involving τ. We explain everything you need to know about the mathematics and the proof system, and you should be able to get your first proof written and verified within 6 minutes and 28 seconds (getting to the end may take somewhat longer than that, but not the whole tau day).

To play along, start by editing a ''proof module''. You can [http://wikiproofs.org/w/index.php?title=Special:UserLogin&type=signup&returnto=Help:Tau_day create your own account] and create a page at [[User module:YourUsername/Tau day]], or you can use the [[Sandbox]].

== First proof ==
Start by putting the following text into your module:

  <jh>
  import (PROPOSITIONS Interface:Classical_propositional_calculus () ())
  import (FIRSTORDER Interface:First-order_logic_with_quantifiability (PROPOSITIONS) ())
  import (TAU Interface:Tau_day_axioms (PROPOSITIONS FIRSTORDER) ())
  </jh>

Those statements tell the proof verifier to make use of some previously proved, or assumed, results. They provide logic (and, or, implies, etc) and real numbers which are familiar numbers such as 1, -5, 44/7, √2, τ, or e, as well as operations on real numbers such as addition, division, square root, and a few others.

Once you have copy-pasted those imports into your proof module, hit the preview button. You should see "Proof module parsed successfully" at the bottom of the page in green.

Our first exercise is to show how proofs work by writing a very simple proof. It is just a restatement of something in the tau day axioms file, but with a new name.

Start by adding "&lt;jh&gt;" to your proof module. We already saw this at the start of the import statements, and it means the start of a formal proof (as opposed to text intended only for human readers). The jh stands for [[Help:JHilbert|JHilbert]], which is the proof verifier used on wikiproofs.

Then we need to declare a variable. So first add "var (real θ)" to your proof module, which declares a variable named θ. All the variables we will be adding are real numbers, which is what the "real" means.

Next add "thm (TauIsPeriodOfSine () ()". This indicates we are proving a result called "TauIsPeriodOfSine". The empty parentheses are for distinct variable constraints and hypotheses, neither of which we need to worry about for now.

[[File:Unit_circle.svg|thumb|right|geometric explanation for why we might define sine and cosine the way we do]]
Now we need to state what we are going to be proving. In normal mathemetical notation we'd state it as <code>sin (θ + τ) = sin θ</code>. Tau (τ) is the ratio of a circle's circumference to its radius. Theta is an angle and sin is the sine function. If you don't remember sine from high school trigonometry, don't worry. One of the nice things about wikiproofs is that even if you don't have a deep understanding of the concept behind what you are proving, you can still see how each step follows from the previous one. So if you like you can just think of the statements in [[Interface:Tau day axioms]] as strings of meaningless symbols, where the rules of the game of assembling them into proofs are given in that file and the others we imported (together with a very simple set of rules built into JHilbert).

Anyway, what we are proving is <code>sin (θ + τ) = sin θ</code> and we express it almost that way in JHilbert. The main difference is that we need parentheses for everything. So add <code>((sin (θ + (τ))) = (sin θ))</code> to your proof.

The only thing remaining is the actual proof.  A proof is a set of invocations of existing statements. For this first proof, we just need one invocation, which corresponds to what we are trying to prove. So we will be invoking <code>SinePeriod</code> (which you can find at [[Interface:Tau day axioms]]). To invoke it, we need to notice that <code>SinePeriod</code> contains one variable: <code>θ</code>. If you are unclear on what is a variable and what is not, notice that <code>θ</code> was defined on the Tau day axioms page with <code>var</code>, but <code>sin</code> and <code>τ</code> were defined with <code>term</code> (the statement also contains <code>=</code>, which was also defined using <code>term</code>, but that was in another interface, [[Interface:First-order logic with quantifiability]]).

To invoke a statement, we give expansions for each of the variables which need filling in, in the order in which they occur in the statement, and then the name of the statement. In this example, that is <code>θ SinePeriod</code>. The entire proof is enclosed in parentheses, so add <code>(θ SinePeriod)</code> to your proof module. Then add <code>)</code> (to close out the <code>thm</code>) and &lt;/jh&gt; on a line by itself, to match the &lt;jh&gt; we put in a while ago.

That's a completed proof. Hit preview (or save, to save your work back to the wiki), and you should see "Proof module parsed successfully" again. If you get an error, there's a list of error messages near the bottom of [[Help:JHilbert]].

== An easy variation on that proof ==
When we invoke a statement in a proof, we can plug anything in for the expansion of a variable. Your next exercise is to use this fact to prove <code>sin ((α + τ / 4) + τ) = sin (α + τ / 4)</code> (which is the same as the previous result but with <code>α + τ / 4</code> in place of <code>θ</code>). Call your theorem <code>TauIsPeriodOfSineQuarterTurn</code>. You will need to declare the variable <code>α</code> (just as we declared <code>θ</code> earlier). Come back to this page once you've gotten this new proof to verify.

== Statements with hypotheses ==
The next proof is <code>sin ((θ + τ / 4) + τ) = sin ((θ + τ) + τ / 4)</code>. Set up this proof and call it <code>CosinePeriodLemma1</code> (we pick that name because it will eventually help us prove something called <code>CosinePeriod</code>). The first step in the proof is invoking <code>Addition23</code> from [[Interface:Tau day axioms]]. Go ahead and write that part of the proof (which gives us <code>(θ + τ / 4) + τ = (θ + τ) + τ / 4</code>) but leave the parentheses open because the proof isn't finished. After <code>Addition23</code> you then write <code>buildSine</code>. If you look up <code>buildSine</code> in [[Interface:Tau day axioms]] you will see that it takes something of the form <code>x = y</code> as a hypothesis and gives you <code>sin x = sin y</code>, which in our case is <code>sin ((θ + τ / 4) + τ) = sin ((θ + τ) + τ / 4)</code>. Fortunately, that is what we need, so close all the parentheses and verify and save this proof.

== The proof stack ==
Our next proof is <code>sin ((θ + τ / 4) + τ) = cos (θ + τ)</code>, which we'll call <code>CosinePeriodLemma2</code>. The first two steps are to invoke <code>CosinePeriodLemma1</code> and then <code>SineShift</code>. Look at those two theorems and see if you can see what you need to plug in for the variables in each case. When we write two statement invocations after each other, they are put on a  proof [[w:stack (data structure)|stack]]. So then we can invoke something which takes two statements off the proof stack, in this case <code>applyEqualityTransitivity</code> (which is located in [[Interface:First-order logic with quantifiability]]). That's the final step in this proof, so verify and save this proof.

== More proofs ==
{{under construction}}

given sin 0 = 0, then prove sin τ = 0

somewhere in here talk about using a statement you proved, as opposed to one from the interface.

will need to talk about the proof stack and propositional logic.
  CosinePeriod (from SinePeriod and SineShift)
  cos τ = 1 (from CosinePeriod and Cosine0)

The remainder of the exercise consists of applying the half angle....
  sin (τ / 2) = 0 (from SineHalfAngle and cos τ)
  what next?
half angle
third angle
whatever calculations they need in terms of √ and what-not

export to [[Interface:Tau day theorems]]

== What next? ==
You can find another example explaining how to write proofs at [[Help:Tutorial]]. To find things to contribute to, browse [[:Category:Pages needing cleanup]]. Feel free to ask questions at [[WP:TEA]].

== Footnotes ==
<references/>

[[Category:Tutorial]]
