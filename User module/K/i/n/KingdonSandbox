[[Interface:Classical propositional calculus]], [[Interface:First-order logic with quantifiability]], [[Interface:Peano axioms]], [[User interface:Kingdon/Sandbox]], [[Interface:Basic arithmetic]]. [[Interface:Tarski's geometry axioms]], [[User interface:Kingdon/Logic]], [[Interface:Set theory]].

<jh>
import (CLASSICAL Interface:Classical_propositional_calculus () ())
import (QUANTIFY_OVER_SETS Interface:First-order_logic_with_quantifiability (CLASSICAL) set.)
#import (QUANTIFY_OVER_NUMBERS Interface:First-order_logic_with_quantifiability (CLASSICAL) number.)
import (SETS Interface:Set_theory (CLASSICAL QUANTIFY_OVER_SETS) ())

import (QUANTIFY_OVER_NUMBERS User_interface:Kingdon/Logic (CLASSICAL QUANTIFY_OVER_SETS SETS) ())
#import (TARSKI Interface:Tarski's_geometry_axioms (CLASSICAL FIRSTORDER) ())
#import (PEANO Interface:Peano_axioms (CLASSICAL FIRSTORDER) ())
#import (ARITHMETIC Interface:Basic_arithmetic (CLASSICAL FIRSTORDER) ())
#import (BASIC Interface:Basic_operations_of_general_set_theory (CLASSICAL FIRSTORDER) ())
#import (ZF Interface:Zermelo–Fraenkel_set_theory (CLASSICAL FIRSTORDER) ())

var (formula p q φ ψ)
#var (variable x y x0 y0 x1 y1 z k n)
#var (object s t u)
#var (variable result x′)
#var (object A B C D)

var (variable x a)
var (object X Y Z A)

def ((0) (∅))
def ((1) (singleton (∅)))
def ((< X Y) (X ∈ Y))

def ((subst X a φ) (set.subst X a φ))

thm (SetEmptyMembership () () ((∅) ∈ (singleton (∅))) (
        (∅) SingletonMembership
))

thm (SetEmptyMembershipWithSubst () ()
  (subst (singleton (∅)) a ((∅) ∈ (value a))) (
        SetEmptyMembership

</jh>
The substitution is <code>a = { ∅ } → (∅ ∈ a ↔ ∅ ∈ { ∅ })</code>.
<jh>
        (value a) (singleton (∅)) (∅) MembershipBuilderLL
        set.makeSubstExplicit

        eliminateBiconditionalForward
        applyModusPonens
))

thm (SetNotOne () () (set.∃ a ((∅) ∈ (value a))) (
        a SetEmptyMembershipWithSubst
        set.introduceThereExistsFromObject
))

</jh>
Here we prove <code>∃ x φ ↔ set.∃ x (x ∈ universe ∧ φ)</code>.
<jh>
thm (ThereExistsUniverse () () ((∃ x φ) ↔ (set.∃ x (((value x) ∈ (universe)) ∧ φ))) (
</jh>
<code>∃ x φ</code> is, by definition, equivalent to <code>¬ ∀ x ¬ φ</code> and in turn to <code>¬ set.∀ x (x ∈ universe → ¬ φ)</code>. We move the opening negation inside the quantifier to get <code>set.∃ x ¬ (x ∈ universe → ¬ φ)</code>.
<jh>
        x (((value x) ∈ (universe)) → (¬ φ)) set.NotForAll

        ((value x) ∈ (universe)) φ ConjunctionImplication
        x set.buildThereExists
        swapBiconditional
        applyBiconditionalTransitivity
))

#thm (NotOne () () (∃ x ((0) < (value x))) (
#))

export (RESULT User_interface:Kingdon/Sandbox (CLASSICAL QUANTIFY_OVER_NUMBERS) ())
</jh>