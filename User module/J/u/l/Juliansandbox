<jh>
import (NAT User_interface:Julian/sandbox () ())

thm (2+2=4 () () (((2) + (2)) = (4)) (

</jh>

((2) = ((2) + (0)))
<jh>
  (2) addzero
</jh>

[1]: ((succ (2)) = (succ ((2) + (0))))
<jh>
  succfunc
</jh>

[2]: ((succ ((2) + (0))) = ((2) + (succ (0))))
<jh>
  (2) (0) addsucc
</jh>

[1] + [2]: ((succ (2)) = ((2) + (succ (0))))
<jh>
  eqtransitive
</jh>

[3]: ((succ (succ (2))) = (succ ((2) + (succ (0)))))

[3]': ((succ (succ (2))) = (succ ((2) + (1))))
<jh>
  succfunc
</jh>

[4]: ((succ ((2) + (1))) = ((2) + (succ (1))))
<jh>
  (2) (1) addsucc
</jh>

[3]' + [4]: ((succ (succ (2))) = ((2) + (succ (1))))
<jh>
  eqtransitive
</jh>

[5]: (((2) + (succ (1))) = (succ (succ (2))))
<jh>
  eqsymmetric
</jh>
[5]': (((2) + (2)) = (4))

âˆŽ

<jh>

))

</jh>