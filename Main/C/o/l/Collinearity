{{interfaces
| imports = [[Interface:Triangle congruence]]
| exports = [[Interface:Collinearity]]
}}

This is part of a series of modules which prove a variety of geometrical theorems starting with Tarski's axioms for geometry. We follow the formalization of Julien Narboux<ref>The formal proofs are at [http://www.lix.polytechnique.fr/Labo/Julien.Narboux/tarski.html Formalization of Tarski's geometry in the Coq proof assistant] and are described in Julien Narboux (2007), "[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.158.8614 Mechanical Theorem Proving in Tarski’s Geometry]", F. Botana and T. Recio (Eds.): ADG 2006, LNAI 4869, pp. 139–156</ref> which itself closely follows a treatise by Schwabhäuser, Szmielew, and Tarski.<ref>W. Schwabhäuser, W Szmielew, and A. Tarski (1983), ''Metamathematische Methoden in der Geometrie'', ISBN 0387129588</ref>

We import the theorems of [[Interface:Classical propositional calculus|propositional logic]] and [[Interface:First-order logic with quantifiability|predicate logic]], and the [[Interface:Triangle congruence|geometry results so far]] and define some variables:
<jh>
import (CLASSICAL Interface:Classical_propositional_calculus () ())
import (FIRSTORDER Interface:First-order_logic_with_quantifiability (CLASSICAL) ())
import (START Interface:Triangle_congruence (CLASSICAL FIRSTORDER) ())

var (formula φ)
var (point x y z w u v A B C D E P Q A′ B′ C′ D′ B″ C″)
var (point x′ y′ z′ w′ u′)
var (point x0 x1 x2 x3 y0 y1 y2 y3)
var (variable a b b′ c c′ d′ b″ c″)
</jh>

== Collinearity ==
To say that three points are collinear is just to say that one of them is between the other two (in any order).<ref>Definition Col in Narboux</ref>
<jh>
def ((collinear x y z) (((between x y z) ∨ (between y z x)) ∨ (between z x y)))

thm (BetweennessCollinearity () () ((between x y z) → (collinear x y z)) (
        (between x y z) (between y z x) DisjunctionRightIntroduction
        ((between x y z) ∨ (between y z x))
          (between z x y)
          DisjunctionRightIntroduction
        applySyllogism
))
</jh>

=== Permutations ===
One way to express the "in any order" concept is to provide permutation theorems. The first is rotation: <code>collinear x y z ↔ collinear y z x</code>.<ref>col_permutation_1 and col_permutation_2 in Narboux</ref>
<jh>
thm (CollinearityRotation () () ((collinear x y z) ↔ (collinear y z x)) (
        (between x y z) (between y z x) (between z x y) DisjunctionAssociativity

        (between x y z) ((between y z x) ∨ (between z x y)) DisjunctionCommutativity

        applyBiconditionalTransitivity
))
</jh>

The next permutation swaps the second and third points.<ref>col_permutation_5 in Narboux, biconditionalized</ref>
<jh>
thm (Collinearity23 () () ((collinear x y z) ↔ (collinear x z y)) (
</jh>
The proof starts with <code>between x y z ↔ between z y x</code> and <code>between y z x ↔ between x z y</code>.
<jh>
        x y z BetweennessSymmetry
        y z x BetweennessSymmetry
</jh>
We combine those and switch the order to get <code>between x y z ∨ between y z x ↔ between x z y ∨ between z y x</code>.
<jh>
        buildDisjunction

        (between z y x) (between x z y) DisjunctionCommutativity
        applyBiconditionalTransitivity
</jh>
Combining that with <code>between z x y ↔ between y x z</code> finishes the task.
<jh>
        z x y BetweennessSymmetry
        buildDisjunction
))
</jh>

To swap the first and second points, we rotate and then swap the second and third points.<ref>col_permutation_4 in Narboux, biconditionalized</ref>
<jh>
thm (Collinearity12 () () ((collinear x y z) ↔ (collinear y x z)) (
        x y z CollinearityRotation
        y z x Collinearity23
        applyBiconditionalTransitivity
))
</jh>

To swap the first and third points, we rotate and then swap the first and second points.<ref>col_permutation_3 in Narboux, biconditionalized</ref>
<jh>
thm (Collinearity13 () () ((collinear x y z) ↔ (collinear z y x)) (
        x y z CollinearityRotation
        y z x Collinearity12
        applyBiconditionalTransitivity
))
</jh>

=== Collinearity of a point, itself, and another point ===
A point is collinear with itself and any second point. That is, <code>collinear A A B</code>, and likewise for any other order of the three points.<ref>col_trivial_1, col_trivial_2, and col_trivial_3 in Narboux</ref>
<jh>
thm (CollinearityAAB () () (collinear A A B) (
        B A BetweenABB
        ((between A A B) ∨ (between A B A)) introduceLeftDisjunction
))

thm (CollinearityABB () () (collinear A B B) (
        B A CollinearityAAB

        B B A Collinearity13
        eliminateBiconditionalReverse
        applyModusPonens
))

thm (CollinearityABA () () (collinear A B A) (
        A B CollinearityAAB

        A A B Collinearity23
        eliminateBiconditionalReverse
        applyModusPonens
))
</jh>

=== Collinearity and degenerate congruent triangles ===
The analogue to <code>BetweennessDegenerateTriangle</code> also holds for collinearity.<ref>l4_13 in Narboux</ref>
<jh>
thm (CollinearityDegenerateTriangle () ()
  (((collinear A B C) ∧ (A B C ≅ A′ B′ C′)) → (collinear A′ B′ C′)) (
</jh>
The proof just consists of expanding <code>collinear A B C</code> into a disjunction of three betweenness formulas, and applying <code>BetweennessDegenerateTriangle</code> three times.

We start with <code>between A B C → (A B C ≅ A′ B′ C′ → collinear A′ B′ C′)<code>.
<jh>
        A B C A′ B′ C′ BetweennessDegenerateTriangle

        A′ B′ C′ BetweennessCollinearity
        applySyllogism

        export
</jh>
Next is <code>between B C A → (A B C ≅ A′ B′ C′ → collinear A′ B′ C′)<code>. The proof is similar, but involves some additional rotation of both the congruence and the collinearity.
<jh>
        A B C A′ B′ C′ CongruenceRotation
        eliminateBiconditionalReverse
        (between B C A) conjoinLL

        B C A B′ C′ A′ BetweennessDegenerateTriangle
        applySyllogism

        B′ C′ A′ BetweennessCollinearity
        applySyllogism

        A′ B′ C′ CollinearityRotation
        eliminateBiconditionalForward
        applySyllogism

        export
</jh>
We combine the <code>between A B C</code> and <code>between B C A</code> cases.
<jh>
        composeDisjunction
</jh>
The proof of the <code>between C A B</code> case, <code>between C A B → (A B C ≅ A′ B′ C′ → collinear A′ B′ C′)<code>, is similar.
<jh>
        C A B C′ A′ B′ CongruenceRotation
        eliminateBiconditionalForward
        (between C A B) conjoinLL

        C A B C′ A′ B′ BetweennessDegenerateTriangle
        applySyllogism

        C′ A′ B′ BetweennessCollinearity
        applySyllogism

        C′ A′ B′ CollinearityRotation
        eliminateBiconditionalReverse
        applySyllogism

        export

        composeDisjunction
        import
))
</jh>

=== Builder ===
Equals can be substituted for equals in a collinearity.
<jh>
thm (CollinearityBuilder () () (
  (((x0 = y0) ∧ (x1 = y1)) ∧ (x2 = y2))
  → ((collinear x0 x1 x2) ↔ (collinear y0 y1 y2))) (
        # between x0 x1 x2 ↔ between y0 y1 y2
        x0 y0 x1 y1 x2 y2 BetweennessBuilder

        # between x1 x2 x0 ↔ between y1 y2 y0 
        ((x0 = y0) ∧ (x1 = y1)) (x2 = y2) ConjunctionRightElimination
        eliminateLeftConjunctInConsequent

        ((x0 = y0) ∧ (x1 = y1)) (x2 = y2) ConjunctionLeftElimination
        composeConjunction

        ((x0 = y0) ∧ (x1 = y1)) (x2 = y2) ConjunctionRightElimination
        eliminateRightConjunctInConsequent
        composeConjunction

        x1 y1 x2 y2 x0 y0 BetweennessBuilder
        applySyllogism

        buildDisjunctionInConsequent

        # between x2 x0 x1 ↔ between y2 y0 y1 
        ((x0 = y0) ∧ (x1 = y1)) (x2 = y2) ConjunctionLeftElimination

        ((x0 = y0) ∧ (x1 = y1)) (x2 = y2) ConjunctionRightElimination
        eliminateRightConjunctInConsequent
        composeConjunction

        ((x0 = y0) ∧ (x1 = y1)) (x2 = y2) ConjunctionRightElimination
        eliminateLeftConjunctInConsequent
        composeConjunction

        x2 y2 x0 y0 x1 y1 BetweennessBuilder
        applySyllogism

        buildDisjunctionInConsequent
))
</jh>

== Constructing congruent degenerate triangles from collinear points ==
Given a (degenerate) triangle and a line segment congruent to one of the sides of the triangle, we can construct a second triangle on the line segment which is congruent to the given triangle. Here we prove a degenerate case, in which the points of the given triangle are collinear. In symbols, <code>collinear A B C ∧ A B ≡ A′ B′ → ∃ c′ A B C ≅ A′ B′ c′</code>.<ref>l4_14 in Narboux</ref> This is an analogue to <code>InnerDegenerateTriangle</code> but for collinearity rather than betweenness.

There are three cases, corresponding to the three betweenness predicates which make up the definition of <code>collinear</code>.

The first lemma is basically predicate logic. It enables us to move the two antecedents inside the quantifier.
<jh>
thm (CollinearityConstructDegenerateTriangle-1
  ((c′ x) (c′ y) (c′ z) (c′ A) (c′ B) (c′ A′) (c′ B′))
  ((H (∃ c′ φ)))
  (((between x y z) ∧ (A B ≡ A′ B′)) → (∃ c′ ((between x y z) ∧ ((A B ≡ A′ B′) ∧ φ)))) (
        (A B ≡ A′ B′) ImplicationReflexivity
        H
        (A B ≡ A′ B′) introduceAntecedent
        composeConjunction

        c′ (A B ≡ A′ B′) φ ThereExistsConjunctionMovement
        eliminateBiconditionalForward
        applySyllogism
</jh>
That gives us <code>A B ≡ A′ B′ → ∃ c′ (A B ≡ A′ B′ ∧ φ)</code>. We now need to apply a similar process to <code>between x y z</code>
<jh>
        (between x y z) conjoinLL

        c′ (between x y z) ((A B ≡ A′ B′) ∧ φ)ThereExistsConjunctionMovement
        eliminateBiconditionalForward
        applySyllogism
))
</jh>
The next few lemmas form the bulk of the <code>between A B C</code> case. Extend <code>A′ B′</code> to a point <code>C′</code> such that <code>B′ C′ ≡ B C</code>. Between that congruence and <code>A B ≡ A′ B′</code>, we can conclude <code>A C ≡ A′ C′</code>. Those three congruences are what we need for <code>A B C ≅ A′ B′ C′</code>.
<jh>
thm (CollinearityConstructDegenerateTriangle-abc-bc () ()
  (((between A B C) ∧ ((A B ≡ A′ B′) ∧ ((between A′ B′ C′) ∧ (B′ C′ ≡ B C)))) → (B C ≡ B′ C′)) (
        (between A B C) ((A B ≡ A′ B′) ∧ ((between A′ B′ C′) ∧ (B′ C′ ≡ B C))) ConjunctionLeftElimination
        eliminateLeftConjunctInConsequent
        eliminateLeftConjunctInConsequent

        swapCongruenceInConsequent
))

thm (CollinearityConstructDegenerateTriangle-abc-ac () ()
  (((between A B C) ∧ ((A B ≡ A′ B′) ∧ ((between A′ B′ C′) ∧ (B′ C′ ≡ B C)))) → (A C ≡ A′ C′)) (
</jh>
The proof is an application of <code>OuterThreeSegment</code>. First we need <code>between A B C</code>.
<jh>
        (between A B C) ((A B ≡ A′ B′) ∧ ((between A′ B′ C′) ∧ (B′ C′ ≡ B C))) ConjunctionRightElimination
</jh>
Next, <code>between A′ B′ C′</code>.
<jh>
        (between A B C) ((A B ≡ A′ B′) ∧ ((between A′ B′ C′) ∧ (B′ C′ ≡ B C))) ConjunctionLeftElimination
        eliminateLeftConjunctInConsequent
        eliminateRightConjunctInConsequent

        composeConjunction
</jh>
We need two congruences. The first is <code>A B ≡ A′ B′</code>.
<jh>
        (between A B C) ((A B ≡ A′ B′) ∧ ((between A′ B′ C′) ∧ (B′ C′ ≡ B C))) ConjunctionLeftElimination
        eliminateRightConjunctInConsequent

        composeConjunction
</jh>
The other is <code>B C ≡ B′ C′</code>.
<jh>
        A B C A′ B′ C′ CollinearityConstructDegenerateTriangle-abc-bc

        composeConjunction
</jh>
We can now apply outer three segment.
<jh>
        A B C A′ B′ C′ OuterThreeSegment
        applySyllogism
))

thm (CollinearityConstructDegenerateTriangle-abc-core () ()
  (((between A B C) ∧ ((A B ≡ A′ B′) ∧ ((between A′ B′ C′) ∧ (B′ C′ ≡ B C)))) → (A B C ≅ A′ B′ C′)) (
        (between A B C) ((A B ≡ A′ B′) ∧ ((between A′ B′ C′) ∧ (B′ C′ ≡ B C))) ConjunctionLeftElimination
        eliminateRightConjunctInConsequent

        A B C A′ B′ C′ CollinearityConstructDegenerateTriangle-abc-ac
        composeConjunction

        A B C A′ B′ C′ CollinearityConstructDegenerateTriangle-abc-bc
        composeConjunction
))

thm (CollinearityConstructDegenerateTriangle-abc
  ((c′ A) (c′ B) (c′ C) (c′ A′) (c′ B′)) ()
  ((between A B C) → ((A B ≡ A′ B′) → (∃ c′ (A B C ≅ A′ B′ (value c′))))) (
        c′ A′ B′ B C SegmentConstruction
        A B C A B A′ B′ CollinearityConstructDegenerateTriangle-1

        A B C A′ B′ (value c′) CollinearityConstructDegenerateTriangle-abc-core
        c′ addThereExists
        applySyllogism

        export
))

</jh>
The second case, <code>between C A B</code>, is similar. Extend <code>B′ A′</code> to a point <code>C′</code> such that <code>A′ C′ ≡ A C</code>. Between that congruence and <code>A B ≡ A′ B′</code>, we can conclude <code>B C ≡ B′ C′</code>. Those three congruences are what we need for <code>A B C ≅ A′ B′ C′</code>.
<jh>
thm (CollinearityConstructDegenerateTriangle-cab-ac () ()
  (((between C A B) ∧ ((A B ≡ A′ B′) ∧ ((between B′ A′ C′) ∧ (A′ C′ ≡ A C)))) → (A C ≡ A′ C′)) (
        (between C A B) ((A B ≡ A′ B′) ∧ ((between B′ A′ C′) ∧ (A′ C′ ≡ A C))) ConjunctionLeftElimination
        eliminateLeftConjunctInConsequent
        eliminateLeftConjunctInConsequent

        swapCongruenceInConsequent
))

thm (CollinearityConstructDegenerateTriangle-cab-bc () ()
  (((between C A B) ∧ ((A B ≡ A′ B′) ∧ ((between B′ A′ C′) ∧ (A′ C′ ≡ A C)))) → (B C ≡ B′ C′)) (
</jh>
The proof is an application of <code>OuterThreeSegment</code>. First we need <code>between C A B</code>.
<jh>
        (between C A B) ((A B ≡ A′ B′) ∧ ((between B′ A′ C′) ∧ (A′ C′ ≡ A C))) ConjunctionRightElimination
</jh>
Next, <code>between C′ A′ B′</code>.
<jh>
        (between C A B) ((A B ≡ A′ B′) ∧ ((between B′ A′ C′) ∧ (A′ C′ ≡ A C))) ConjunctionLeftElimination
        eliminateLeftConjunctInConsequent
        eliminateRightConjunctInConsequent

        swapBetweennessInConsequent

        composeConjunction
</jh>
We need two congruences. The first is <code>C A ≡ C′ A′</code>.
<jh>
        C A B A′ B′ C′ CollinearityConstructDegenerateTriangle-cab-ac

        commuteCongruenceInConsequent

        composeConjunction
</jh>
The other is <code>A B ≡ A′ B′</code>.
<jh>
        (between C A B) ((A B ≡ A′ B′) ∧ ((between B′ A′ C′) ∧ (A′ C′ ≡ A C))) ConjunctionLeftElimination
        eliminateRightConjunctInConsequent

        composeConjunction
</jh>
We can now apply outer three segment.
<jh>
        C A B C′ A′ B′ OuterThreeSegment
        applySyllogism

        commuteCongruenceInConsequent
))

thm (CollinearityConstructDegenerateTriangle-cab-core () ()
  (((between C A B) ∧ ((A B ≡ A′ B′) ∧ ((between B′ A′ C′) ∧ (A′ C′ ≡ A C)))) → (A B C ≅ A′ B′ C′)) (
        (between C A B) ((A B ≡ A′ B′) ∧ ((between B′ A′ C′) ∧ (A′ C′ ≡ A C))) ConjunctionLeftElimination
        eliminateRightConjunctInConsequent

        C A B A′ B′ C′ CollinearityConstructDegenerateTriangle-cab-ac
        composeConjunction

        C A B A′ B′ C′ CollinearityConstructDegenerateTriangle-cab-bc
        composeConjunction
))

thm (CollinearityConstructDegenerateTriangle-cab
  ((c′ A) (c′ B) (c′ C) (c′ A′) (c′ B′)) ()
  ((between C A B) → ((A B ≡ A′ B′) → (∃ c′ (A B C ≅ A′ B′ (value c′))))) (
        c′ B′ A′ A C SegmentConstruction
        C A B A B A′ B′ CollinearityConstructDegenerateTriangle-1

        C A B A′ B′ (value c′) CollinearityConstructDegenerateTriangle-cab-core
        c′ addThereExists
        applySyllogism

        export
))
</jh>
The <code>between B C A</code> case is a consequence of <code>InnerDegenerateTriangle</code>.
<jh>
thm (CollinearityConstructDegenerateTriangle-bca
  ((c′ A) (c′ B) (c′ C) (c′ A′) (c′ B′)) ()
  ((between B C A) → ((A B ≡ A′ B′) → (∃ c′ (A B C ≅ A′ B′ (value c′))))) (
        A B A′ B′ CongruenceCommutativity
        eliminateBiconditionalReverse
        (between B C A) conjoinLL

        B C A B′ A′ c′ InnerDegenerateTriangle
        applySyllogism

        (between B′ (value c′) A′) (B C A ≅ B′ (value c′) A′) ConjunctionLeftElimination
        c′ addThereExists
        applySyllogism

        A B C A′ B′ (value c′) CongruenceRotation
        eliminateBiconditionalForward
        c′ addThereExists
        applySyllogism

        export
))

thm (CollinearityConstructDegenerateTriangle ((c′ A) (c′ B) (c′ C) (c′ A′) (c′ B′)) () (((collinear A B C) ∧ (A B ≡ A′ B′)) → (∃ c′ (A B C ≅ A′ B′ (value c′)))) (
        A B C A′ B′ c′ CollinearityConstructDegenerateTriangle-abc
        B C A A′ B′ c′ CollinearityConstructDegenerateTriangle-bca
        composeDisjunction

        C A B A′ B′ c′ CollinearityConstructDegenerateTriangle-cab
        composeDisjunction

        import
))
</jh>

== Five segment ==
<gallery>
File:Five segment.svg|Outer five segment
File:Inner five segment.svg|Inner five segment
</gallery>
This five segment theorem combines inner and outer five segment. It is <code>A ≠ B ∧ collinear A B C ∧ A B C ≅ A′ B′ C′ ∧ A D ≡ A′ D′ ∧ B D ≡ B′ D′ → C D ≡ C′ D′</code>.<ref>l4_16 in Narboux</ref> The illustrations show the inner and outer cases. <code>A</code>, <code>B</code>, and <code>C</code> correspond to <code>x</code>, <code>y</code>, and <code>z</code> but can be in any order (as long as <code>A</code> and <code>B</code> are the ones with known congruences). <code>D</code> corresponds to <code>u</code>.

We prove the result separately for each of the three betweenness relationships which make up the definition of <code>collinear</code>. Each of those proofs is just a matter of applying either inner or outer five segment, so it is just a matter of rearranging the many conjuncts which make up the antecedent of each theorem. The first bunch of lemmas are for those rearrangements.
<jh>
var (formula p q r s t)
thm (FiveSegment-anotb () () ((p ∧ ((((A ≠ B) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′))) → (A ≠ B)) (
        p ((((A ≠ B) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′)) ConjunctionLeftElimination
        eliminateRightConjunctInConsequent
        eliminateRightConjunctInConsequent
        eliminateRightConjunctInConsequent
))

thm (FiveSegment-ab () () ((p ∧ ((((A ≠ B) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′))) → (A B ≡ A′ B′)) (
        p ((((A ≠ B) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′)) ConjunctionLeftElimination
        eliminateRightConjunctInConsequent
        eliminateRightConjunctInConsequent
        eliminateLeftConjunctInConsequent

        A B C A′ B′ C′
        Congruence12
        applySyllogism
))

thm (FiveSegment-bc () () ((p ∧ ((((A ≠ B) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′))) → (B C ≡ B′ C′)) (
        p ((((A ≠ B) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′)) ConjunctionLeftElimination
        eliminateRightConjunctInConsequent
        eliminateRightConjunctInConsequent
        eliminateLeftConjunctInConsequent

        A B C A′ B′ C′
        Congruence23
        applySyllogism
))

thm (FiveSegment-ad () () ((p ∧ ((((A ≠ B) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′))) → (A D ≡ A′ D′)) (
        p ((((A ≠ B) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′)) ConjunctionLeftElimination
        eliminateRightConjunctInConsequent
        eliminateLeftConjunctInConsequent
))

thm (FiveSegment-bd () () ((p ∧ ((((A ≠ B) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′))) → (B D ≡ B′ D′)) (
        p ((((A ≠ B) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′)) ConjunctionLeftElimination
        eliminateLeftConjunctInConsequent
))

thm (FiveSegment-abcabc () () (((between A B C) ∧ ((((A ≠ B) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′))) → (between A′ B′ C′)) (
        (between A B C) ((((A ≠ B) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′)) ConjunctionRightElimination

        (between A B C) ((((A ≠ B) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′)) ConjunctionLeftElimination
        eliminateRightConjunctInConsequent
        eliminateRightConjunctInConsequent
        eliminateLeftConjunctInConsequent
        composeConjunction

        A B C A′ B′ C′ BetweennessDegenerateTriangle
        applySyllogism
))

thm (FiveSegment-abc () () ((between A B C) → (((((A ≠ B) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′)) → (C D ≡ C′ D′))) (
        (between A B C) A B C A′ B′ C′ D D′ FiveSegment-anotb

        (between A B C) ((((A ≠ B) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′)) ConjunctionRightElimination
        composeConjunction

        A B C A′ B′ C′ D D′ FiveSegment-abcabc
        composeConjunction

        (between A B C) A B C A′ B′ C′ D D′ FiveSegment-ab
        composeConjunction

        (between A B C) A B C A′ B′ C′ D D′ FiveSegment-bc
        composeConjunction

        (between A B C) A B C A′ B′ C′ D D′ FiveSegment-ad
        composeConjunction

        (between A B C) A B C A′ B′ C′ D D′ FiveSegment-bd
        composeConjunction

        A B C A′ B′ C′ D D′ OuterFiveSegment
        applySyllogism

        export
))

thm (FiveSegment-bcabca () () (((between B C A) ∧ ((((A ≠ B) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′))) → (between B′ C′ A′)) (
        (between B C A) ((((A ≠ B) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′)) ConjunctionRightElimination

        (between B C A) ((((A ≠ B) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′)) ConjunctionLeftElimination
        eliminateRightConjunctInConsequent
        eliminateRightConjunctInConsequent
        eliminateLeftConjunctInConsequent

        A B C A′ B′ C′ CongruenceRotation
        eliminateBiconditionalReverse
        applySyllogism

        composeConjunction

        B C A B′ C′ A′ BetweennessDegenerateTriangle
        applySyllogism
))

thm (FiveSegment-ca () () ((p ∧ ((((A ≠ B) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′))) → (C A ≡ C′ A′)) (
        p ((((A ≠ B) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′)) ConjunctionLeftElimination
        eliminateRightConjunctInConsequent
        eliminateRightConjunctInConsequent
        eliminateLeftConjunctInConsequent

        A B C A′ B′ C′
        Congruence13
        applySyllogism

        A C A′ C′ CongruenceCommutativity
        eliminateBiconditionalReverse
        applySyllogism
))

thm (FiveSegment-bca () () ((between B C A) → (((((A ≠ B) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′)) → (C D ≡ C′ D′))) (
        (between B C A) ((((A ≠ B) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′)) ConjunctionRightElimination

        B C A A′ B′ C′ D D′ FiveSegment-bcabca
        composeConjunction

        (between B C A) A B C A′ B′ C′ D D′ FiveSegment-ab
        A B A′ B′ CongruenceCommutativity
        eliminateBiconditionalReverse
        applySyllogism
        composeConjunction

        (between B C A) A B C A′ B′ C′ D D′ FiveSegment-ca
        composeConjunction

        (between B C A) A B C A′ B′ C′ D D′ FiveSegment-bd
        composeConjunction

        (between B C A) A B C A′ B′ C′ D D′ FiveSegment-ad
        composeConjunction

        B C A B′ C′ A′ D D′ InnerFiveSegment
        applySyllogism

        export
))
</jh>
The third case is <code>between C A B</code> but due to the way that <code>OuterFiveSegment</code> is written, we need to write it as <code>between B A C</code> instead.
<jh>
thm (FiveSegment-bacbac () () (((between B A C) ∧ ((((A ≠ B) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′))) → (between B′ A′ C′)) (
        (between B A C) ((((A ≠ B) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′)) ConjunctionRightElimination
        B A C BetweennessSymmetry
        eliminateBiconditionalReverse
        applySyllogism

        (between B A C) ((((A ≠ B) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′)) ConjunctionLeftElimination
        eliminateRightConjunctInConsequent
        eliminateRightConjunctInConsequent
        eliminateLeftConjunctInConsequent

        C A B C′ A′ B′ CongruenceRotation
        eliminateBiconditionalForward
        applySyllogism

        composeConjunction

        C A B C′ A′ B′ BetweennessDegenerateTriangle
        applySyllogism

        C′ A′ B′ BetweennessSymmetry
        eliminateBiconditionalReverse
        applySyllogism
))

thm (FiveSegment-bac () () ((between B A C) → (((((A ≠ B) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′)) → (C D ≡ C′ D′))) (
        (between B A C) A B C A′ B′ C′ D D′ FiveSegment-anotb
        A B EqualitySymmetry
        addNegation
        eliminateBiconditionalReverse
        applySyllogism

        (between B A C) ((((A ≠ B) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′)) ConjunctionRightElimination
        composeConjunction

        B A C A′ B′ C′ D D′ FiveSegment-bacbac
        composeConjunction

        (between B A C) A B C A′ B′ C′ D D′ FiveSegment-ab
        commuteCongruenceInConsequent
        composeConjunction

        (between B A C) A B C A′ B′ C′ D D′ FiveSegment-ca
        commuteCongruenceInConsequent
        composeConjunction

        (between B A C) A B C A′ B′ C′ D D′ FiveSegment-bd
        composeConjunction

        (between B A C) A B C A′ B′ C′ D D′ FiveSegment-ad
        composeConjunction

        B A C B′ A′ C′ D D′ OuterFiveSegment
        applySyllogism

        export
))

thm (FiveSegment-cab () () ((between C A B) → (((((A ≠ B) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′)) → (C D ≡ C′ D′))) (
        C A B BetweennessSymmetry
        eliminateBiconditionalReverse

        B A C A′ B′ C′ D D′ FiveSegment-bac

        applySyllogism
))

thm (FiveSegment-core () () ((collinear A B C) → (((((A ≠ B) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′)) → (C D ≡ C′ D′))) (
        A B C A′ B′ C′ D D′ FiveSegment-abc

        B C A A′ B′ C′ D D′ FiveSegment-bca
        composeDisjunction

        C A B A′ B′ C′ D D′ FiveSegment-cab
        composeDisjunction
))
</jh>
The only thing remaining is to rearrange the conjuncts in the antecedent. We write the rearrangement as a lemma.
<jh>
thm (FiveSegment-conjuncts () () 
  (((((p ∧ q) ∧ r) ∧ s) ∧ t) → (q ∧ (((p ∧ r) ∧ s) ∧ t))) (
        p q ConjunctionCommutativity
        r buildConjunctionRR
        s buildConjunctionRR
        t buildConjunctionRR

        q p r ConjunctionAssociativity
        s buildConjunctionRR
        t buildConjunctionRR
        applyBiconditionalTransitivity

        q (p ∧ r) s ConjunctionAssociativity
        t buildConjunctionRR
        applyBiconditionalTransitivity

        q ((p ∧ r) ∧ s) t ConjunctionAssociativity
        applyBiconditionalTransitivity

        eliminateBiconditionalReverse
))

thm (FiveSegment () () ((((((A ≠ B) ∧ (collinear A B C)) ∧ (A B C ≅ A′ B′ C′)) ∧ (A D ≡ A′ D′)) ∧ (B D ≡ B′ D′)) → (C D ≡ C′ D′)) (
        (A ≠ B) (collinear A B C) (A B C ≅ A′ B′ C′) (A D ≡ A′ D′) (B D ≡ B′ D′) FiveSegment-conjuncts

        A B C A′ B′ C′ D D′ FiveSegment-core
        import

        applySyllogism
))
</jh>

== Points equidistant from two given points ==
[[File:Lemma l4_17 from Narboux.svg|thumb|right|EquidistantLine]]
If two given points are equidistant to each of two distinct points on a line, they are equidistant to every point on that line. That is, <code>A ≠ B ∧ collinear A B C ∧ A P ≡ A Q ∧ B P ≡ B Q → C P ≡ C Q</code>.<ref>l4_17 in Narboux</ref>

The proof applies <code>FiveSegment</code> with <code>A B C</code> as the collinear points for both parts and <code>P</code> and <code>Q</code> as the fourth points, respectively.
<jh>
thm (EquidistantLine () ()
  (((((A ≠ B) ∧ (collinear A B C)) ∧ (A P ≡ A Q)) ∧ (B P ≡ B Q)) → (C P ≡ C Q)) (
</jh>
<code>A ≠ B</code>:
<jh>
        (((A ≠ B) ∧ (collinear A B C)) ∧ (A P ≡ A Q)) (B P ≡ B Q) ConjunctionRightElimination
        eliminateRightConjunctInConsequent
        eliminateRightConjunctInConsequent
</jh>
<code>collinear A B C</code>:
<jh>
        (((A ≠ B) ∧ (collinear A B C)) ∧ (A P ≡ A Q)) (B P ≡ B Q) ConjunctionRightElimination
        eliminateRightConjunctInConsequent
        eliminateLeftConjunctInConsequent

        composeConjunction
</jh>
<code>A B C ≅ A B C</code>:
<jh>
        A B C TriangleCongruenceReflexivity
        ((((A ≠ B) ∧ (collinear A B C)) ∧ (A P ≡ A Q)) ∧ (B P ≡ B Q)) introduceAntecedent
        composeConjunction
</jh>
<code>A P ≡ A Q</code>:
<jh>
        (((A ≠ B) ∧ (collinear A B C)) ∧ (A P ≡ A Q)) (B P ≡ B Q) ConjunctionRightElimination
        eliminateLeftConjunctInConsequent

        composeConjunction
</jh>
<code>B P ≡ B Q</code>:
<jh>
        (((A ≠ B) ∧ (collinear A B C)) ∧ (A P ≡ A Q)) (B P ≡ B Q) ConjunctionLeftElimination

        composeConjunction
</jh>
Applying five segment is all we need.
<jh>
        A B C A B C P Q FiveSegment
        applySyllogism
))
</jh>

== Uniqueness of a point given distances to two collinear points ==
On a given line, the distance to two distinct points uniquely determines a point. That is, <code>A ≠ B ∧ collinear A B C ∧ A C ≡ A C′ ∧ B C ≡ B C′ → C = C′</code>. We prove this by applying <code>EquidistantLine</code> to the line <code>A B C</code> and the points <code>C</code> and <code>C′</code>, which gives us <code>C C ≡ C C′</code>.<ref>l4_18 in Narboux</ref>
<jh>
thm (CollinearTwoDistanceUniqueness () ()
  (((((A ≠ B) ∧ (collinear A B C)) ∧ (A C ≡ A C′)) ∧ (B C ≡ B C′)) → (C = C′)) (
        A B C C C′ EquidistantLine

        C C C′ CongruenceIdentityLeft
        applySyllogism
))
</jh>

== A point on a line segment ==
A point on a line segment is uniquely determined by its distance to the two endpoints. That is, <code>between A C B ∧ A C ≡ A C′ ∧ B C ≡ B C′ → C = C′</code>.<ref>l4_19 in Narboux</ref>

We divide the proof into two cases, <code>A = B</code> and <code>A ≠ B</code>.

The <code>A = B</code> case is easy; <code>C</code> also equals <code>A</code> and so <code>A C ≡ A C′</code> implies <code>C = C′</code>.
<jh>
thm (BetweennessTwoDistanceUniqueness-ac () () ((A = B) → ((((between A C B) ∧ (A C ≡ A C′)) ∧ (B C ≡ B C′)) → (A = C))) (
        (A = B) (((between A C B) ∧ (A C ≡ A C′)) ∧ (B C ≡ B C′)) ConjunctionRightElimination

        (A = B) (((between A C B) ∧ (A C ≡ A C′)) ∧ (B C ≡ B C′)) ConjunctionLeftElimination
        eliminateRightConjunctInConsequent
        eliminateRightConjunctInConsequent

        composeConjunction

        A B C IndivisibilityFromEquality
        applySyllogism

        export
))

thm (BetweennessTwoDistanceUniqueness-acprime () () ((A = B) → ((((between A C B) ∧ (A C ≡ A C′)) ∧ (B C ≡ B C′)) → (A = C′))) (
        A B C C′ BetweennessTwoDistanceUniqueness-ac
        import
        
        (A = B) (((between A C B) ∧ (A C ≡ A C′)) ∧ (B C ≡ B C′)) ConjunctionLeftElimination
        eliminateRightConjunctInConsequent
        eliminateLeftConjunctInConsequent
        composeConjunction

        A C A C′ CongruenceIdentityFromEquality
        import
        applySyllogism

        export
))

thm (BetweennessTwoDistanceUniqueness-eq () () ((A = B) → ((((between A C B) ∧ (A C ≡ A C′)) ∧ (B C ≡ B C′)) → (C = C′))) (
        A B C C′ BetweennessTwoDistanceUniqueness-ac
        import

        A C EqualitySymmetry
        eliminateBiconditionalReverse
        applySyllogism

        A B C C′ BetweennessTwoDistanceUniqueness-acprime
        import

        composeConjunction

        C A C′ EqualityTransitivity
        applySyllogism
        export
))
</jh>

The <code>A ≠ B</code> case follows easily from <code>CollinearTwoDistanceUniqueness</code>.

<jh>
thm (BetweennessTwoDistanceUniqueness-ne () () ((A ≠ B) → ((((between A C B) ∧ (A C ≡ A C′)) ∧ (B C ≡ B C′)) → (C = C′))) (
</jh>
First, <code>A ≠ B</code>.
<jh>
        (A ≠ B) (((between A C B) ∧ (A C ≡ A C′)) ∧ (B C ≡ B C′)) ConjunctionRightElimination
</jh>
Next, <code>collinear A B C</code>
<jh>
        (A ≠ B) (((between A C B) ∧ (A C ≡ A C′)) ∧ (B C ≡ B C′)) ConjunctionLeftElimination
        eliminateRightConjunctInConsequent
        eliminateRightConjunctInConsequent

        A C B BetweennessCollinearity
        applySyllogism

        A C B Collinearity23
        eliminateBiconditionalReverse
        applySyllogism

        composeConjunction
</jh>
Next, <code>A C ≡ A C′</code>
<jh>
        (A ≠ B) (((between A C B) ∧ (A C ≡ A C′)) ∧ (B C ≡ B C′)) ConjunctionLeftElimination
        eliminateRightConjunctInConsequent
        eliminateLeftConjunctInConsequent

        composeConjunction
</jh>
Lastly, <code>B C ≡ B C′</code>
<jh>
        (A ≠ B) (((between A C B) ∧ (A C ≡ A C′)) ∧ (B C ≡ B C′)) ConjunctionLeftElimination
        eliminateLeftConjunctInConsequent

        composeConjunction

</jh>
We apply the collinearity two distance uniqueness theorem and export.
<jh>
        A B C C′ CollinearTwoDistanceUniqueness
        applySyllogism

        export
))
</jh>

We can now assemble the theorem.
<jh>
thm (BetweennessTwoDistanceUniqueness () () ((((between A C B) ∧ (A C ≡ A C′)) ∧ (B C ≡ B C′)) → (C = C′)) (
        A B C C′ BetweennessTwoDistanceUniqueness-eq
        A B C C′ BetweennessTwoDistanceUniqueness-ne
        eliminateCases
))
</jh>

== Export ==
We now export to [[Interface:Collinearity]].
<jh>
export (RESULTS Interface:Collinearity (CLASSICAL FIRSTORDER) ())
</jh>

== References ==
<references/>

{{DEFAULTSORT:{{PAGENAME}}}}
[[Category:Euclidean geometries (general) and generalizations]]
[[Category:Foundations of classical theories (including reverse mathematics)]]
