The easiest way to get some statements to work with is going to be to import one of our existing interfaces; here we pick [[Interface:First-order logic]].
<jh>
import (PROPOSITIONAL Interface:Classical_propositional_calculus () ())
import (FIRST Interface:First-order_logic (PROPOSITIONAL) ())
</jh>

The important thing from that file is:
 stmt (Generalization ((x φ)) () (φ → (∀ x φ)))

Here's a valid proof:

<jh>
var (variable x y)
thm (valid ((x y)) () (((value x) = (value x)) → (∀ y ((value x) = (value x)))) (
        ((value x) = (value x)) y Generalization
))
</jh>

Here's the same proof without the distinct variable constraint between <code>x</code> and <code>y</code>. It violates the distinct variable constraint which results from invoking <code>Generalization</code>, because it is not valid if <code>x</code> and <code>y</code> are expanded to the same variable.  {{error expected|Required distinct variable constraints are not a subset of actual distinct variable constraints}}

<jh>
thm (invalid () () (((value x) = (value x)) → (∀ y ((value x) = (value x)))) (
        ((value x) = (value x)) y Generalization
))
</jh>

[[Category:Help]]
[[Category:JHilbert]]
