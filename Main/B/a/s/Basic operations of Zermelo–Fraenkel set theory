{{header
 | title    = Basic operations of Zermelo–Fraenkel set theory
 | subtitle = 
 | left     = 
 | right    = 
 | shortcut = 
 | notes    = Here we start with [[Interface:First steps in set theory]] and prove additional theorems involving singletons, unordered pairs, unions, subsets, and the like. }}
{{interfaces
| imports = [[Interface:First steps in set theory]]
| exports = [[Interface:Set theory]]
}}

We first import [[Interface:Classical propositional calculus|propositional logic]] and [[Interface:First-order logic with quantifiability|first-order logic]].
<jh>
import (CLASSICAL Interface:Classical_propositional_calculus () ())
import (FIRSTORDER Interface:First-order_logic_with_quantifiability (CLASSICAL) ())
</jh>

We also import [[Interface:First steps in set theory]], which defines operations for singletons, unordered pairs, and the like, but contains few theorems expanding on those concepts.
<jh>
import (BASIC Interface:First_steps_in_set_theory (CLASSICAL FIRSTORDER) ())
</jh>

As usual, capital letters starting from <code>A</code> are set expressions (that is, objects or "classes") and lowercase letters starting with <code>x</code> are set variables.
<jh>
var (object A B C D A0 A1 B0 B1 Z)
var (variable a b x y z w a′ b′ x′ y′ z′)
var (formula φ ψ antecedent)
</jh>

== Singletons ==

=== A set is an element of its singleton ===
Here we show <code>A ∈ {A}</code>.<ref>[http://us.metamath.org/mpeuni/snid.html snid], metamath's set.mm, accessed August 5, 2010</ref>
<jh>
thm (SingletonMembership () () (A ∈ (singleton A)) (
        A EqualityReflexivity

        A A Singleton
        eliminateBiconditionalForward

        applyModusPonens
))
</jh>

== Unordered pairs ==

=== An unordered pair contains its first member ===
Here we show that <code>A ∈ {A, B}</code>.<ref>[http://us.metamath.org/mpeuni/prid1.html prid1], metamath's set.mm, accessed August 4, 2010.</ref>
<jh>
thm (UnorderedPairLeftMembership () () (A ∈ (unorderedPair A B)) (
        A EqualityReflexivity
        (A = B) introduceRightDisjunction

        A A B UnorderedPair
        eliminateBiconditionalForward

        applyModusPonens
))
</jh>

A similar result holds, of course, for the second member.<ref>[http://us.metamath.org/mpeuni/prid2.html prid2], metamath's set.mm, accessed February 2, 2011.</ref>

<jh>
thm (UnorderedPairRightMembership () () (B ∈ (unorderedPair A B)) (
        B EqualityReflexivity
        (B = A) introduceLeftDisjunction

        B A B UnorderedPair
        eliminateBiconditionalForward

        applyModusPonens
))
</jh>

=== Unordered pair commutativity ===
Unordered pairs are unordered: <code>{A, B} = {B, A}</code>.
<jh>
thm (UnorderedPairCommutativity ((x A) (x B)) () ((unorderedPair A B) = (unorderedPair B A)) (
        (value x) A B UnorderedPair

        ((value x) = A) ((value x) = B) DisjunctionCommutativity
        applyBiconditionalTransitivity

        (value x) B A UnorderedPair
        swapBiconditional
        applyBiconditionalTransitivity

        applyExtensionality
))
</jh>

=== Unordered pair equality can imply equality of members ===
Here we prove <code>{A, C} = {B, C} → A = B</code>.<ref>[http://us.metamath.org/mpeuni/preqr1.html preqr1], metamath's set.mm, accessed August 4, 2010</ref>

First we prove a lemma, <code>{A, C} = {B, C} → A = B ∨ A = C</code>
<jh>
thm (UnorderedPairFirstMembersEqual-1 () () (((unorderedPair A C) = (unorderedPair B C)) → ((A = B) ∨ (A = C))) (
        A C UnorderedPairLeftMembership

        (unorderedPair A C) (unorderedPair B C) A MembershipBuilderLL

        detachImplicationBiconditional
</jh>
That gives us <code>{A, C} = {B, C} → A ∈ {B, C}</code>.
<jh>
        A B C UnorderedPair
        eliminateBiconditionalReverse
        applySyllogism
))

thm (UnorderedPairFirstMembersEqual () () (((unorderedPair A C) = (unorderedPair B C)) → (A = B)) (
</jh>
We apply our lemma once to get <code>{A, C} = {B, C} → A = B ∨ A = C</code>
<jh>
        A C B UnorderedPairFirstMembersEqual-1

</jh>
Applying the lemma a second time, with some commutations, gives us <code>{A, C} = {B, C} → A = B ∨ B = C</code>
<jh>
        (unorderedPair A C) (unorderedPair B C) EqualitySymmetry
        eliminateBiconditionalReverse
        B C A UnorderedPairFirstMembersEqual-1
        applySyllogism

        B A EqualitySymmetry
        transformImplicationDisjunctionLeft
</jh>
We now combine the two results to get <code>{A, C} = {B, C} → (A = B ∨ A = C) ∧ (A = B ∨ B = C)</code>, and apply distributivity to the right hand side to turn it into <code>A = B ∨ (A = C ∧ B = C)</code>.
<jh>
        composeConjunction
        (A = B) (A = C) (B = C) DisjunctionLeftDistribution
        eliminateBiconditionalForward
        applySyllogism
</jh>
We turn <code>A = C ∧ B = C</code> into <code>A = B</code>, and after a bit more rearrangement, we are done.
<jh>
        B C EqualitySymmetry
        eliminateBiconditionalReverse
        (A = C) conjoinLL
        A C B EqualityTransitivity
        applySyllogism

        (A = B) disjoinLL
        applySyllogism

        (A = B) DisjunctionIdempotence
        eliminateBiconditionalForward
        applySyllogism
))
</jh>

Here is a commuted version: <code>{C, A} = {C, B} → A = B</code>.<ref>[http://us.metamath.org/mpeuni/preqr2.html preqr2], metamath's set.mm, accessed August 4, 2010</ref>
<jh>
thm (UnorderedPairSecondMembersEqual () () (((unorderedPair C A) = (unorderedPair C B)) → (A = B)) (
        C A UnorderedPairCommutativity
        C B UnorderedPairCommutativity
        buildEquality
        eliminateBiconditionalReverse

        A C B UnorderedPairFirstMembersEqual
        applySyllogism
))
</jh>

=== A singleton as an unordered pair ===
A singleton is equal to an unordered pair where the two elements are the same. That is, <code>{ A } = { A, A }</code>.<ref>[http://us.metamath.org/mpeuni/dfsn2.html dfsn2] in metamath's set.mm, accessed February 14, 2011</ref>
<jh>
thm (SingletonUnorderedPair ( (x A)) ()
  ((singleton A) = (unorderedPair A, A)) (
        (value x) A Singleton

        ((value x) = A) DisjunctionIdempotence
        applyBiconditionalTransitivity

        (value x) A A UnorderedPair
        swapBiconditional
        applyBiconditionalTransitivity

        applyExtensionality
))
</jh>

== Separation ==

=== Separation builder ===
Here's a builder based on equivalent formulas: <code>(φ ↔ ψ) → { x ∈ A | φ } = { x ∈ A | ψ }</code>.

The first lemma is <code>C ∈ { x ∈ A | φ } ↔ C ∈ { x ∈ A | ψ }</code>.
<jh>
thm (buildSeparation-1 ((x A)) ((H (φ ↔ ψ)))
  ((C ∈ (separate x A φ)) ↔ (C ∈ (separate x A ψ))) (
        C x A φ Separation

        H
        C x buildSubst
        (C ∈ A) buildConjunctionLL
        applyBiconditionalTransitivity

        C x A ψ Separation
        swapBiconditional
        applyBiconditionalTransitivity
))

thm (buildSeparation ((x A)  (z x) (z A) (z φ) (z ψ)) ((H (φ ↔ ψ)))
  ((separate x A φ) = (separate x A ψ)) (
        H
        (value z) x A buildSeparation-1
        applyExtensionality
))
</jh>

=== A formula which defines a set ===
Although, in general, we cannot specify a set by a formula ("the set of all x for which φ holds") and expect it to exist, such a definition does specify a set in the case in which the formula φ implies that x is part of some set which is known to exist. There might be a few ways to formalize this notion; the one here is particularly aimed at helping us make a definition of the form <code>{z ∈ A | φ}</code> and then prove a statement about membership in that defined set. In symbols, given <code>φ → z ∈ A</code> we conclude <code>B ∈ {z ∈ A | φ} ↔ [B / z]φ</code>.
<jh>
thm (FormulaBoundLemma ((z A) (z B)) ((H (φ → ((value z) ∈ A))))
  (((B ∈ A) ∧ (subst B z φ)) ↔ (subst B z φ)) (
</jh>
The forward direction is trivial.
<jh>
        (B ∈ A) (subst B z φ) ConjunctionLeftElimination
</jh>
To prove the reverse direction we start by adding a substitution to our hypothesis to get <code>[ B / z ] φ → [ B / z ] z ∈ A</code>.
<jh>
        H
        B z addSubst
</jh>
Now we perform the latter subsitution, starting with <code>z = B → (z ∈ A ↔ B ∈ A)</code>, and then combining with the previous step to get <code>[ B / z ] φ → B ∈ A</code>.
<jh>
        (value z) B A MembershipBuilderRR
        makeSubstExplicit
        eliminateBiconditionalReverse
        applySyllogism
</jh>
We now just need to add <code>[ B / z ] φ</code> and combine the two directions.
<jh>
        (subst B z φ) ImplicationReflexivity
        composeConjunction

        introduceBiconditionalFromImplications
))

thm (FormulaBound ((z A) (z B)) ((H (φ → ((value z) ∈ A))))
  ((B ∈ (separate z A φ)) ↔ (subst B z φ)) (
        B z A φ Separation
        H
        B FormulaBoundLemma
        applyBiconditionalTransitivity
))
</jh>

== Unions ==
The union of two sets is just a special case of the union of a set: <code>A ∪ B</code> is defined to be <code>⋃ {A, B}</code>.
<jh>
def ((∪ A B) (⋃ (unorderedPair A B)))
</jh>

=== A lemma involving substitution ===
Here we prove <code>A ∈ B ↔ ∃ x (A ∈ x ∧ x = B)</code>. This only holds because of the [[Interface:Axiom of quantifiability]]; a treatment of set theory which does not have that axiom (for example, because it allows proper classes) will handle things differently.
<jh>
thm (IsElementThereExists ((x A) (x B)) ()
  ((A ∈ B) ↔ (∃ x ((A ∈ (value x)) ∧ ((value x) = B)))) (
</jh>
We start with the forward direction. First we prove <code>A ∈ B → ∃ x (x = B ∧ A ∈ B)</code>.
<jh>
        (A ∈ B) ImplicationReflexivity
        x B Quantifiability
        introduceLeftConjunctToConsequent

        x ((value x) = B) (A ∈ B) ThereExistsConjunctionRightMovement
        eliminateBiconditionalForward
        applySyllogism
</jh>
Next is the substitution <code>x = B → (A ∈ x ↔ A ∈ B)</code>, which we then rearrange to <code>x = B ∧ A ∈ B → A ∈ x)</code>.
<jh>
        (value x) B A MembershipBuilderLL
        eliminateBiconditionalForwardInConsequent
        import
</jh>
Combining this with <code>x = B</code> we get <code>x = B ∧ A ∈ B → A ∈ x ∧ x = B</code>, and adding in the quantifier we finish the forward direction.
<jh>
        ((value x) = B) (A ∈ B) ConjunctionRightElimination
        composeConjunction

        x addThereExists
        applySyllogism
</jh>
The reverse direction is just a substitution. We start with <code>x = B → (A ∈ x ↔ A ∈ B)</code> and rearrange it to <code>A ∈ x ∧ x = B → A ∈ B</code>.
<jh>
        (value x) B A MembershipBuilderLL
        eliminateBiconditionalReverseInConsequent
        applyComm
        import
</jh>
Adding in the quantifier finishes the reverse direction, and we combine the two directions.
<jh>
        x addThereExists
        removeThereExistsInConsequent

        introduceBiconditionalFromImplications
))
</jh>

=== Membership in a union related to membership in one of the two sets ===
The next theorem, <code>A ∈ B ∪ C ↔ A ∈ B ∨ A ∈ C</code>, is another way of stating what the union of two sets means.<ref>[http://us.metamath.org/mpeuni/elun.html elun] in metamath's set.mm, accessed January 22, 2011</ref>
<jh>
thm (BinaryUnion ( (x A) (x B) (x C)) () ((A ∈ (B ∪ C)) ↔ ((A ∈ B) ∨ (A ∈ C))) (
</jh>
We apply the definition of the union of two sets, and the <code>Union</code> theorem to get <code>A ∈ ⋃ {B, C} ↔ ∃ x (A ∈ x ∧ x ∈ {B, C})</code>
<jh>
        A (unorderedPair B C) x Union
</jh>
Expanding the unordered pair turns that into <code>∃ x (A ∈ x ∧ (x = B ∨ x = C))</code>.
<jh>
        (value x) B C UnorderedPair
        (A ∈ (value x)) buildConjunctionLL
        x buildThereExists
        applyBiconditionalTransitivity
</jh>
Distributivity gives us <code>∃ x ((A ∈ x ∧ x = B) ∨ (A ∈ x ∧ x = C))</code> and splitting the quantifier turns that into <code>∃ x (A ∈ x ∧ x = B) ∨ ∃ x (A ∈ x ∧ x = C)</code>.
<jh>
        (A ∈ (value x)) ((value x) = B) ((value x) = C) ConjunctionLeftDistribution
        x buildThereExists
        applyBiconditionalTransitivity

        x
          ((A ∈ (value x)) ∧ ((value x) = B))
          ((A ∈ (value x)) ∧ ((value x) = C))
          ThereExistsDisjunction
        applyBiconditionalTransitivity
</jh>
Now we can apply the lemma from the previous section to get <code>A ∈ B ∨ A ∈ C</code>.
<jh>
        A B x IsElementThereExists

        A C x IsElementThereExists

        buildDisjunction
        swapBiconditional
        applyBiconditionalTransitivity
))
</jh>

An easy corollary is that membership in one of the two sets of a union implies membership in the union.<ref>MembershipUnionRightIntroduction is [http://us.metamath.org/mpeuni/elun1.html elun1] and MembershipUnionLeftIntroduction is [http://us.metamath.org/mpeuni/elun2.html elun2], metamath's set.mm, accessed 2009</ref>
<jh>
thm (MembershipUnionRightIntroduction () ()
  ((A ∈ B) → (A ∈ (B ∪ C))) (
        (A ∈ B) (A ∈ C) DisjunctionRightIntroduction

        A B C BinaryUnion
        eliminateBiconditionalForward
        applySyllogism
))

thm (MembershipUnionLeftIntroduction () () ((A ∈ C) → (A ∈ (B ∪ C))) (
        (A ∈ C) (A ∈ B) DisjunctionLeftIntroduction

        A B C BinaryUnion
        eliminateBiconditionalForward
        applySyllogism
))
</jh>

== Subset ==

=== Singleton and subset ===
Here we prove <code>A ∈ B ↔ { A } ⊆ B</code>.<ref>[http://us.metamath.org/mpeuni/snss.html snss], metamath's set.mm, accessed January 29, 2011</ref>

<jh>
thm (SingletonSubset ( (x A) (x B)) ()
  ((A ∈ B) ↔ ((singleton A) ⊆ B)) (
</jh>
We start from the <code>{ A } ⊆ B</code> side, first expanding it to <code>∀ x (x ∈ { A } → x ∈ B)</code>.
<jh>
        (singleton A) B x Subset
</jh>
Then we transform the <code>x ∈ { A }</code> into <code>x = A</code>
<jh>
        (value x) A Singleton
        ((value x) ∈ B) buildImplicationConsequent
        x buildForAll
        applyBiconditionalTransitivity
</jh>
That gives us <code>∀ x (x = A → x ∈ B)</code>, which is equivalent to <code>A ∈ B</code> via the substitution <code>x = A → (x ∈ B ↔ A ∈ B)</code>.
<jh>
        (value x) A B MembershipBuilderRR
        ImplicitForAll
        applyBiconditionalTransitivity

        swapBiconditional
))
</jh>

=== Subset and membership ===
If one set is a subset of another, then being an element of the subset implies being an element of the containing set. That is, <code>A ⊆ B → (C ∈ A → C ∈ B)</code>. This resembles <code>Subset</code>, but it is not biconditional because it does not make a statement about all potential elements, but just about one particular one.<ref>[http://us.metamath.org/mpeuni/ssel.html ssel], metamath's set.mm, accessed February 1, 2011</ref>
<jh>
thm (SubsetMembership ( (x A) (x B) (x C)) ()
  ((A ⊆ B) → ((C ∈ A) → (C ∈ B))) (
</jh>
First we expand <code>A ⊆ B</code> to <code>∀ x (x ∈ A → x ∈ B)</code>.
<jh>
        A B x Subset
        eliminateBiconditionalReverse
</jh>
Then we conjoin <code>x = C</code> to both sides of the implication to get <code>∀ x (x = C ∧ x ∈ A → x = C ∧ x ∈ B)</code>
<jh>
        ((value x) ∈ A) ((value x) ∈ B) ((value x) = C) ConjunctionMultiplicationLL
        x addForAll
        applySyllogism
</jh>
Next we distribute the quantifier across the implication to get <code>∃ x (x = C ∧ x ∈ A) → ∃ x (x = C ∧ x ∈ B)</code>.
<jh>
        x
          (((value x) = C) ∧ ((value x) ∈ A))
          (((value x) = C) ∧ ((value x) ∈ B))
          ForAllImplicationThereExists
        applySyllogism
</jh>
But the two halves of that are equivalent to <code>C ∈ A</code> and <code>C ∈ B</code>, respectively, thanks to <code>MembershipThereExists</code>.
<jh>
        C A x MembershipThereExists
        C B x MembershipThereExists
        buildImplication
        eliminateBiconditionalForward
        applySyllogism
))
</jh>

=== Union and subset ===
The left side of a union is a subset of the union.<ref>[http://us.metamath.org/mpeuni/snun1.html snun1], metamath's set.mm, accessed January 30, 2011</ref>
<jh>
thm (SubsetUnionLeft ( (x A) (x B)) ()
  (A ⊆ (A ∪ B)) (
        ((value x) ∈ A) ((value x) ∈ B) DisjunctionRightIntroduction

        (value x) A B BinaryUnion
        eliminateBiconditionalForward
        applySyllogism

        x generalize

        A (A ∪ B) x Subset
        eliminateBiconditionalForward
        applyModusPonens
))
</jh>

Being a subset of a set implies being a subset of the union of set and any other.<ref>[http://us.metamath.org/mpeuni/ssun3.html ssun3], metamath's set.mm, accessed February 3, 2011</ref>
<jh>
thm (SubsetUnionRightIntroduction () ()
  ((A ⊆ B) → (A ⊆ (B ∪ C))) (
        B C SubsetUnionLeft
        A B (B ∪ C) SubsetTransitivity
        detach2of2
))
</jh>

=== Unordered pair and subset ===
Analogous to the result we already proved which relates a singleton being a subset to the singleton's element being an element, here is a similar result for unordered pairs: <code>A ∈ C ∧ B ∈ C ↔ { A, B } ⊆ C</code>.<ref>[http://us.metamath.org/mpeuni/prss.html prss], metamath's set.mm, accessed February 1, 2011</ref>
<jh>
thm (UnorderedPairSubsetForward ( (x A) (x B) (x C)) ()
  (((A ∈ C) ∧ (B ∈ C)) → ((unorderedPair A B) ⊆ C)) (
</jh>
We begin with <code>A ∈ C → (x = A → x ∈ C)</code> and likewise for <code>B</code>
<jh>
        (value x) A C MembershipBuilderRR
        eliminateBiconditionalForwardInConsequent
        applyComm

        (value x) B C MembershipBuilderRR
        eliminateBiconditionalForwardInConsequent
        applyComm
</jh>
We combine the two implications with conjunctions to get <code>A ∈ C ∧ B ∈ C → ((x = A → x ∈ C) ∧ (x = B → x ∈ C))</code>, but the consequent of that simplifies to <code>x = A ∨ x = B → x ∈ C</code>.
<jh>
        conjoin

        ((value x) = A)
          ((value x) ∈ C)
          ((value x) = B)
          DisjunctionComposition
        eliminateBiconditionalReverse
        applySyllogism
</jh>
Now we transform <code>x = A ∨ x = B</code> into <code>x ∈ { A, B }</code>.
<jh>
        (value x) A B UnorderedPair
        swapBiconditional
        transformImplicationImplicationAntecedent
</jh>
That gives <code>A ∈ C ∧ B ∈ C → (x ∈ { A, B } → x ∈ C)</code>. But the consequent simplifies to just <code>{ A, B } ⊆ C</code>.
<jh>
        x addForAllToConsequent

        (unorderedPair A B) C x Subset
        eliminateBiconditionalForward
        applySyllogism
))

thm (UnorderedPairSubsetReverse ( (x A) (x B) (x C)) ()
  (((unorderedPair A B) ⊆ C) → ((A ∈ C) ∧ (B ∈ C))) (
        A B UnorderedPairLeftMembership
        (unorderedPair A B) C A SubsetMembership
        applyComm
        applyModusPonens

        B A UnorderedPairRightMembership
        (unorderedPair A B) C B SubsetMembership
        applyComm
        applyModusPonens

        composeConjunction
))

thm (UnorderedPairSubset () ()
  (((A ∈ C) ∧ (B ∈ C)) ↔ ((unorderedPair A B) ⊆ C)) (
        A C B UnorderedPairSubsetForward
        A B C UnorderedPairSubsetReverse
        introduceBiconditionalFromImplications
))
</jh>

== Export ==
We export to [[Interface:Basic operations of Zermelo–Fraenkel set theory]].
<jh>
export (SETS Interface:Basic_operations_of_Zermelo–Fraenkel_set_theory (CLASSICAL FIRSTORDER) ())
</jh>

== References ==
<references/>

[[Category:Other classical set theory]]
