{{interfaces
| imports = [[Interface:Zermelo–Fraenkel set theory]]
| exports = [[Interface:Basic operations of general set theory]]
}}
Here we start with the axioms of Zermelo–Fraenkel set theory and prove theorems for a few of the basic concepts: empty set, singletons, and unordered pairs.  Other topics of set theory are treated elsewhere, such as ordered pairs, relations, functions, some kinds of unions, intersection, set difference, and so on.

We start by importing the theorems of [[Interface:Classical propositional calculus|propositional logic]] and [[Interface:First-order logic with quantifiability|predicate logic]], and the axioms of [[Interface:Zermelo–Fraenkel set theory]].  We also define some variables.
<jh>
import (CLASSICAL Interface:Classical_propositional_calculus () ())
import (FIRSTORDER Interface:First-order_logic_with_quantifiability (CLASSICAL) ())
import (AXIOMS Interface:Zermelo–Fraenkel_set_theory (CLASSICAL FIRSTORDER) ())

var (variable x y z w result)
var (object A B C D A0 A1 B0 B1)
</jh>

== Empty set ==
The [[w:empty set|empty set]], or null set, is the set with no elements. We start with the conventional form of the [[w:Axiom of empty set|axiom of empty set]], which is a theorem rather than an axiom for us (and for many other axiomizations of set theory).<ref>[http://us.metamath.org/mpeuni/axnul.html axnul], metamath's set.mm, accessed July 19, 2010</ref>
<jh>
thm (axnul ((x y z)) () (∃ x (∀ y (¬ ((value y) ∈ (value x))))) (
</jh>
The only set theory axiom we use in the proof is the axiom of separation, which says that given the existence of any set (which is implicit in some the predicate logic steps), we can construct a subset of it which has no elements. Here is our application of separation, which we will use at the end of the proof (after a bunch of logical steps).
<jh>
        x y z (((value y) ∈ (value y)) ∧ (¬ ((value y) ∈ (value y)))) Separation
</jh>
The proof starts with <code>¬ (y ∈ y ∧ ¬ y ∈ y)</code>
<jh>
        (¬ ((value y) ∈ (value y))) TertiumNonDatur
        collectNegationNDN
</jh>
We now add <code>y ∈ z</code> to get <code>¬ (y ∈ z ∧ (y ∈ y ∧ ¬ y ∈ y))</code>
<jh>
        ((value y) ∈ (value z)) (((value y) ∈ (value y)) ∧ (¬ ((value y) ∈ (value y)))) ConjunctionLeftElimination
        introduceTransposition
        applyModusPonens
</jh>
We note that <code>y ∈ x ↔ (y ∈ z ∧ (y ∈ y ∧ ¬ y ∈ y))</code> implies itself.
<jh>
        (((value y) ∈ (value x)) ↔ (((value y) ∈ (value z)) ∧ (((value y) ∈ (value y)) ∧ (¬ ((value y) ∈ (value y)))))) ImplicationReflexivity
</jh>
We detach half the biconditional to get <code>(y ∈ x ↔ (y ∈ z ∧ (y ∈ y ∧ ¬ y ∈ y))) → ¬ y ∈ x</code>
<jh>
        negatedDetachImplicationBiconditionalRight
</jh>
We're almost there. We just need to add the quantifiers and apply the instance of the axiom of separation that we started with.
<jh>
        y addForAll
        x addThereExists
        applyModusPonens
))
</jh>

Now we introduce the symbol <code>∅</code> for the empty set.

<jh>
var (variable emptyElement)
def ((∅) (abstract emptyElement (⊥)))

thm (EmptySetVariable ((result x y)) () ((value x) ∉ (abstract y (⊥))) (
</jh>
To apply <code>Abstraction</code>, we need <code>∃ result ∀ x (x ∈ result ↔ [x / y]⊥)</code>. This follows from <code>axnul</code>, the <code>NegationBiconditional</code> relationship between negation and <code>⊥</code>, and the fact that substituting a variable in <code>⊥</code> has no effect.
<jh>
        result x axnul

        ((value x) ∈ (value result)) NegationBiconditional
        ((value x) ∈ (value result)) BiconditionalReflexivity
        (value x) y (⊥) NullSubstitution swapBiconditional
        buildBiconditional
        applyBiconditionalTransitivity

        x buildForAll
        result buildThereExists

        eliminateBiconditionalReverse
        applyModusPonens
</jh>
Now that we have <code>∃ result ∀ x (x ∈ result ↔ [x / y]⊥)</code>, we can apply <code>Abstraction</code> to get <code>x ∈ {y | ⊥} ↔ [x / y]⊥</code>.
<jh>
        Abstraction
</jh>
Moving the substitution which has no effect
<jh>
        (value x) y (⊥) NullSubstitution
        applyBiconditionalTransitivity
</jh>
gives us <code>x ∈ {y | ⊥} ↔ ⊥</code>
and then <code>NegationBiconditional</code> gives us our desired result.
<jh>
        ((value x) ∈ (abstract y (⊥))) NegationBiconditional
        eliminateBiconditionalForward
        applyModusPonens
))
</jh>

We provide a version with object instead of variable.
<jh>
thm (EmptySetObject ((x A y)) () (A ∉ (abstract y (⊥))) (
</jh>
The substitution to apply <code>VariableToObject</code> is <code>x = A → x ∉ ∅ ↔ A ∉ ∅</code>
<jh>
        (value x) A (abstract y (⊥)) IsElementBuilderRR
        addNegationInConsequent

        x y EmptySetVariable

        VariableToObject
))

thm (EmptySet ((A emptyElement)) () (A ∉ (∅)) (
        A emptyElement EmptySetObject
))
</jh>

== Pairing for objects ==
The <code>Pairing</code> axiom allows us to form a set given two elements, where the given sets are represented by variables. Here we prove the same thing, but with object in place of variable. The proof is by straightforward application of <code>VariableToObject</code> with the usual substitution machinery.
<jh>
thm (PairingObject-1 ((A x z w) (y x z w)) () (∃ w (∀ z (((value z) ∈ (value w)) ↔ (((value z) = A) ∨ ((value z) = (value y)))))) (
        (value x) A (value z) EqualityBuilderLL
        ((value z) = (value y)) buildDisjunctionRRInConsequent
        ((value z) ∈ (value w)) buildBiconditionalLLInConsequent
        z buildForAllInConsequent
        w buildThereExistsInConsequent

        w z x y Pairing

        VariableToObject
))

thm (PairingObject ((A y z w) (B y z w)) () (∃ w (∀ z (((value z) ∈ (value w)) ↔ (((value z) = A) ∨ ((value z) = B))))) (
        (value y) B (value z) EqualityBuilderLL
        ((value z) = A) buildDisjunctionLLInConsequent
        ((value z) ∈ (value w)) buildBiconditionalLLInConsequent
        z buildForAllInConsequent
        w buildThereExistsInConsequent

        w z A y PairingObject-1

        VariableToObject
))
</jh>

== Object version of extensionality ==
Here is a variant of extensionality, <code>∀ z (z ∈ A ↔ z ∈ B) → A = B</code>, which changes variables to objects. We first prove a lemma.

<jh>
thm (ExtensionalityObject-1 ((z A) (x y z) (x A)) () ((∀ z (((value z) ∈ A) ↔ ((value z) ∈ (value y)))) → (A = (value y))) (
</jh>
This lemma changes <code>x</code> to <code>A</code>, using <code>VariableToObject</code> applied to <code>x = A → ((∀ z (z ∈ x ↔ z ∈ y) → x = y) ↔ (∀ z (z ∈ A ↔ z ∈ y) → A = y))</code>
<jh>
        (value x) A (value z) IsElementBuilderLL
        ((value z) ∈ (value y)) buildBiconditionalRRInConsequent
        z buildForAllInConsequent

        (value x) A (value y) EqualityBuilderRR

        buildImplicationInConsequent

        z x y Extensionality
        VariableToObject
))

thm (ExtensionalityObject ((A z) (B z) (z y) (A y) (B y)) () ((∀ z (((value z) ∈ A) ↔ ((value z) ∈ B))) → (A = B)) (
</jh>
To prove this, we change <code>y</code> to <code>B</code>, using <code>VariableToObject</code> applied to <code>y = B → ((∀ z (z ∈ A ↔ z ∈ y) → A = y) ↔ (∀ z (z ∈ A ↔ z ∈ B) → A = B))</code>
<jh>
        (value y) B (value z) IsElementBuilderLL
        ((value z) ∈ A) buildBiconditionalLLInConsequent
        z buildForAllInConsequent

        (value y) B A EqualityBuilderLL

        buildImplicationInConsequent

        z A y ExtensionalityObject-1
        VariableToObject
))
</jh>

== Singletons ==
Given a set (object) <code>A</code>, here we construct a set <code>{ A }</code> which has <code>s</code> as its only element. That is, we are trying to prove the theorem <code>y ∈ { A } ↔ y = A</code>.

Our first lemma is <code>y = A ↔ y = A ∨ y = A</code>, which is the first step towards applying the pairing axiom to singletons. To avoid having to write <code>(value y)</code> everywhere, we use <code>yy</code> for an object which corresponds to the variable <code>y</code>.
<jh>
var (object yy)
thm (Singleton-1 () () ((yy = A) ↔ ((yy = A) ∨ (yy = A))) (
        (yy = A) DisjunctionIdempotence
))
</jh>

In a few places we'll need <code>[y / z]z = A ↔ y = A</code>.
<jh>
thm (Singleton-eq ((yy z) (z A)) () ((subst yy z ((value z) = A)) ↔ (yy = A)) (
</jh>
Our substitution is <code>z = y → (z = A ↔ y = A)</code>.
<jh>
        ((value z) = yy) ImplicationReflexivity
        A buildEqualityRRInConsequent
</jh>
Making this explicit gives us our result.
<jh>
        makeSubstExplicit
))
</jh>

Applying <code>Singleton-eq</code> to the left hand side of <code>Singleton-1</code> gets us <code>[y / z]z = A ↔ y = A ∨ y = A</code>.
<jh>
thm (Singleton-2 ((yy z) (z A)) () ((subst yy z ((value z) = A)) ↔ ((yy = A) ∨ (yy = A))) (
        yy z A Singleton-eq
        yy A Singleton-1
        applyBiconditionalTransitivity
))
</jh>

The next step is to take <code>Singleton-2</code> and apply builders until we get <code>∃ result ∀ y (y ∈ result ↔ [y / z]z = A) ↔ ∃ result ∀ y (y ∈ result ↔ (y = A ∨ y = A))</code>
<jh>
thm (Singleton-3 ((y z) (z A)) () ((∃ result (∀ y (((value y) ∈ (value result)) ↔ (subst (value y) z ((value z) = A))))) ↔ (∃ result (∀ y (((value y) ∈ (value result)) ↔ (((value y) = A) ∨ ((value y) = A)))))) (
        (value y) z A Singleton-2
        ((value y) ∈ (value result)) buildBiconditionalLL
        y buildForAll
        result buildThereExists
))
</jh>

The right hand side of <code>Singleton-3</code> holds by pairing, so we can conclude the left hand side as a theorem.
<jh>
thm (Singleton-4 ((y z) (z A) (result y A)) () (∃ result (∀ y (((value y) ∈ (value result)) ↔ (subst (value y) z ((value z) = A))))) (
        result y A A PairingObject

        result y z A Singleton-3
        eliminateBiconditionalForward

        applyModusPonens
))
</jh>

Because the notation <code>{ A }</code> is not available, we call it <code>(singleton A)</code>.
<jh>
def ((singleton A) (abstract y ((value y) = A)))
</jh>

We can now prove that <code>y ∈ { A } ↔ y = A</code>
<jh>
var (variable singletonElement)
thm (SingletonVariable ((result z y A)) () (((value y) ∈ (abstract z ((value z) = A))) ↔ ((value y) = A)) (
        result y z A Singleton-4
        Abstraction

        (value y) z A Singleton-eq
        applyBiconditionalTransitivity
))
</jh>

Getting rid of the distinct variable constraint and changing <code>y</code> from a variable to an object are accomplished by invoking <code>VariableToObject</code>.

One detail is that if we specified the singleton of A as <code>{ A }</code>, the definition would expand to a dummy variable which we are unable to express a distinct variable constraint for.  By writing <code>{ singletonElement | singletonElement = A }</code> instead we get to include the distinct variable constraints on <code>singletonElement</code>.  In our informal descriptions we will continue to say <code>{ A }</code> in such situations.
<jh>
thm (SingletonObject ((y B) (y A singletonElement)) () ((B ∈ (abstract singletonElement ((value singletonElement) = A))) ↔ (B = A)) (
</jh>
Our substitution is <code>y = B → ((y ∈ { A } ↔ y = A) ↔ (B ∈ { A } ↔ B = A))</code>.
<jh>
        (value y) B (abstract singletonElement ((value singletonElement) = A)) IsElementBuilderRR
        (value y) B A EqualityBuilderRR
        buildBiconditionalInConsequent

        y singletonElement A SingletonVariable

        VariableToObject
))

thm (Singleton ((singletonElement A)) () ((B ∈ (singleton A)) ↔ (B = A)) (
        B singletonElement A SingletonObject
))
</jh>

=== Builder ===
The builder for singletons is <code>A = B → { A } = { B }</code>.<ref>[http://us.metamath.org/mpeuni/sneq.html sneq], metamath's set.mm, accessed July, 2010</ref>
<jh>
var (variable a b)
thm (SingletonBuilder-1 ((z A) (z B) (z a) (z b) (A a) (B b)) () ((A = B) → ((abstract a ((value a) = A)) = (abstract b ((value b) = B)))) (
</jh>
The equality builder gives us <code>A = B → (z = A ↔ z = B)</code>.
<jh>
        A B (value z) EqualityBuilderLL
</jh>
Applying <code>Singleton</code> twice gives us <code>(z ∈ {A} ↔ z ∈ {B}) ↔ (z = A ↔ z = B)</code>
<jh>
        (value z) a A SingletonObject
        (value z) b B SingletonObject
        buildBiconditional
</jh>
We now combine those two results to get <code>A = B → (z ∈ {A} ↔ z ∈ {B})</code>
<jh>
        eliminateBiconditionalForward
        applySyllogism
</jh>
Extensionality turns <code>z ∈ {A} ↔ z ∈ {B}</code> into <code>{A} = {B}</code>.
<jh>
        z addForAllToConsequent

        z (abstract a ((value a) = A)) (abstract b ((value b) = B)) ExtensionalityObject
        applySyllogism
))

thm (SingletonBuilder-2 ((A a) (B b)) () ((A = B) → ((singleton A) = (abstract b ((value b) = B)))) (
        A B a b SingletonBuilder-1
))

thm (SingletonBuilder ((B b)) () ((A = B) → ((singleton A) = (singleton B))) (
        A B b SingletonBuilder-2
))
</jh>

== Unordered pair ==

The unordered pair <code>{A, B}</code> has <code>A</code> and <code>B</code> as elements.  That is, we seek to prove <code>y ∈ {A, B} ↔ y = A ∨ y = B</code>. The idea of the proof is easy: apply pairing to <code>A</code> and <code>B</code>, but formalizing this involves much the same substitution machinery that we saw with singletons.

The next lemma, <code>[y / z](z = A ∨ z = B) ↔ y = A ∨ y = B</code>, is a substitution that we'll use two places.
<jh>
thm (UnorderedPair-sub ((z yy) (z A) (z B)) () ((subst yy z (((value z) = A) ∨ ((value z) = B))) ↔ ((yy = A) ∨ (yy = B))) (
</jh>
We construct the substitution <code>z = y → (z = A ∨ z = B ↔ y = A ∨ y = B)</code> and then make it explicit.
<jh>
        (value z) yy A EqualityBuilderRR
        (value z) yy B EqualityBuilderRR
        buildDisjunctionInConsequent

        makeSubstExplicit
))
</jh>

We now take the previous result and apply some builders to get <code>∃ result ∀ y (y ∈ result ↔ [y / z](z = A ∨ z = B)) ↔ ∃ result ∀ y (y ∈ result ↔ y = A ∨ y = B)</code>
<jh>
thm (UnorderedPair-3 ((z y) (z A) (z B)) () ((∃ result (∀ y (((value y) ∈ (value result)) ↔ (subst (value y) z (((value z) = A) ∨ ((value z) = B)))))) ↔ (∃ result (∀ y (((value y) ∈ (value result)) ↔ (((value y) = A) ∨ ((value y) = B)))))) (
        (value y) z A B UnorderedPair-sub

        ((value y) ∈ (value result)) buildBiconditionalLL
        y buildForAll
        result buildThereExists
))
</jh>

The right hand side of <code>UnorderedPair-3</code> holds by pairing, so we can conclude the left hand side as a theorem.
<jh>
thm (UnorderedPair-4 ((y z) (z A) (z B) (result y A) (result y B)) ()
  (∃ result (∀ y (((value y) ∈ (value result)) ↔ (subst (value y) z (((value z) = A) ∨ ((value z) = B)))))) (
        result y A B PairingObject

        result y z A B UnorderedPair-3
        eliminateBiconditionalForward

        applyModusPonens
))
</jh>

Because the notation <code>{ A, B }</code> is not available, we call it <code>(unorderedPair A B)</code>.
<jh>
def ((unorderedPair A B) (abstract y (((value y) = A) ∨ ((value y) = B))))
</jh>

We can now prove that <code>y ∈ { A, B } ↔ y = A ∨ y = B</code>
<jh>
var (variable pairElement)
thm (UnorderedPairVariable ((result z y A) (result z y B)) ()
  (((value y) ∈ (abstract z (((value z) = A) ∨ ((value z) = B)))) ↔ (((value y) = A) ∨ ((value y) = B))) (
        result y z A B UnorderedPair-4
        Abstraction

        (value y) z A B UnorderedPair-sub
        applyBiconditionalTransitivity
))
</jh>

Getting rid of the distinct variable constraint and changing <code>y</code> from a variable to an object are accomplished by invoking <code>VariableToObject</code>.
<jh>
thm (UnorderedPairObject ((y C) (y A pairElement) (y B pairElement)) () ((C ∈ (abstract pairElement (((value pairElement) = A) ∨ ((value pairElement) = B)))) ↔ ((C = A) ∨ (C = B))) (
</jh>
Our substitution is <code>y = C → ((y ∈ { A, B } ↔ y = A ∨ y = B) ↔ (C ∈ { A, B } ↔ C = A ∨ C = B))</code>.
<jh>
        (value y) C (abstract pairElement (((value pairElement) = A) ∨ ((value pairElement) = B))) IsElementBuilderRR

        (value y) C A EqualityBuilderRR
        (value y) C B EqualityBuilderRR
        buildDisjunctionInConsequent
        buildBiconditionalInConsequent

        y pairElement A B UnorderedPairVariable

        VariableToObject
))

thm (UnorderedPair ((pairElement A) (pairElement B)) () ((C ∈ (unorderedPair A B)) ↔ ((C = A) ∨ (C = B))) (
        C pairElement A B UnorderedPairObject
))
</jh>

=== Builder ===
The builder for unordered pairs is <code>A0 = B0 ∧ A1 = B1 → {A0, A1} = {B0, B1}</code>.
<jh>
thm (UnorderedPairBuilder-1
  ((z a) (z A0) (z A1) (z b) (z B0) (z B1) (a A0) (a A1) (b B0) (b B1))
  ()
  (((A0 = B0) ∧ (A1 = B1)) → ((abstract a (((value a) = A0) ∨ ((value a) = A1))) = (abstract b (((value b) = B0) ∨ ((value b) = B1))))) (
</jh>
Applying builders for equality and disjunction, we get <code>A0 = B0 ∧ A1 = B1 → (z = A0 ∨ z = A1 ↔ z = B0 ∨ z = B1)</code>.
<jh>
        (A0 = B0) (A1 = B1) ConjunctionRightElimination
        A0 B0 (value z) EqualityBuilderLL
        applySyllogism

        (A0 = B0) (A1 = B1) ConjunctionLeftElimination
        A1 B1 (value z) EqualityBuilderLL
        applySyllogism

        composeConjunction

        ((value z) = A0) ((value z) = B0) ((value z) = A1) ((value z) = B1) DisjunctionFunction
        applySyllogism
</jh>
Applying <code>UnorderedPair</code>, we get <code>A0 = B0 ∧ A1 = B1 → (z ∈ {A0, A1} ↔ z ∈ {B0, B1})</code>.
<jh>
        (value z) a A0 A1 UnorderedPairObject
        swapBiconditional
        transformImplicationBiconditionalLeft

        (value z) b B0 B1 UnorderedPairObject
        swapBiconditional
        transformImplicationBiconditionalRight
</jh>
By extensionality, the right hand side implies <code>{A0, A1} = {B0, B1}</code>.
<jh>
        z addForAllToConsequent
        z (abstract a (((value a) = A0) ∨ ((value a) = A1))) (abstract b (((value b) = B0) ∨ ((value b) = B1))) ExtensionalityObject
        applySyllogism
))

thm (UnorderedPairBuilder-2 ((a A0) (a A1) (b B0) (b B1)) () (((A0 = B0) ∧ (A1 = B1)) → ((abstract a (((value a) = A0) ∨ ((value a) = A1))) = (unorderedPair B0 B1))) (
        A0 B0 A1 B1 a b UnorderedPairBuilder-1
))

thm (UnorderedPairBuilder ((a A0) (a A1)) () (((A0 = B0) ∧ (A1 = B1)) → ((unorderedPair A0 A1) = (unorderedPair B0 B1))) (
        A0 B0 A1 B1 a UnorderedPairBuilder-2
))
</jh>

== Done ==
We have now proved all the theorems in [[Interface:Basic operations of general set theory]].

<jh>
export (GENERAL Interface:Basic_operations_of_general_set_theory (CLASSICAL FIRSTORDER) ())
</jh>

== References ==

<references />

[[Category:Axiomatics of classical set theory and its fragments‎]]