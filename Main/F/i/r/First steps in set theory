{{interfaces
| imports = [[Interface:Zermelo–Fraenkel set theory]]
| exports = [[Interface:Basic operations of Zermelo–Fraenkel set theory]]
}}
Here we start with the axioms of Zermelo–Fraenkel set theory and prove theorems for a few of the basic concepts: empty set, singletons, and unordered pairs.  Other topics of set theory are treated elsewhere, such as ordered pairs, relations, functions, some kinds of unions, intersection, set difference, and so on.

We start by importing the theorems of [[Interface:Classical propositional calculus|propositional logic]] and [[Interface:First-order logic with quantifiability|predicate logic]], and the axioms of [[Interface:Zermelo–Fraenkel set theory]].  We also define some variables.
<jh>
import (CLASSICAL Interface:Classical_propositional_calculus () ())
import (FIRSTORDER Interface:First-order_logic_with_quantifiability (CLASSICAL) ())
import (AXIOMS Interface:Zermelo–Fraenkel_set_theory (CLASSICAL FIRSTORDER) ())

var (variable x y z w result)
var (object A B C D A0 A1 B0 B1)
</jh>

== Empty set ==
The [[w:empty set|empty set]], or null set, is the set with no elements. We start with the conventional form of the [[w:Axiom of empty set|axiom of empty set]], which is a theorem rather than an axiom for us (and for many other axiomizations of set theory).<ref>[http://us.metamath.org/mpeuni/axnul.html axnul], metamath's set.mm, accessed July 19, 2010</ref>
<jh>
thm (axnul ((x y z)) () (∃ x (∀ y (¬ ((value y) ∈ (value x))))) (
</jh>
The only set theory axiom we use in the proof is the axiom of separation, which says that given the existence of any set (which is implicit in some the predicate logic steps), we can construct a subset of it which has no elements. Here is our application of separation, which we will use at the end of the proof (after a bunch of logical steps).
<jh>
        x y z (((value y) ∈ (value y)) ∧ (¬ ((value y) ∈ (value y)))) Separation
</jh>
The proof starts with <code>¬ (y ∈ y ∧ ¬ y ∈ y)</code>
<jh>
        (¬ ((value y) ∈ (value y))) TertiumNonDatur
        collectNegationNDN
</jh>
We now add <code>y ∈ z</code> to get <code>¬ (y ∈ z ∧ (y ∈ y ∧ ¬ y ∈ y))</code>
<jh>
        ((value y) ∈ (value z)) (((value y) ∈ (value y)) ∧ (¬ ((value y) ∈ (value y)))) ConjunctionLeftElimination
        introduceTransposition
        applyModusPonens
</jh>
We note that <code>y ∈ x ↔ (y ∈ z ∧ (y ∈ y ∧ ¬ y ∈ y))</code> implies itself.
<jh>
        (((value y) ∈ (value x)) ↔ (((value y) ∈ (value z)) ∧ (((value y) ∈ (value y)) ∧ (¬ ((value y) ∈ (value y)))))) ImplicationReflexivity
</jh>
We detach half the biconditional to get <code>(y ∈ x ↔ (y ∈ z ∧ (y ∈ y ∧ ¬ y ∈ y))) → ¬ y ∈ x</code>
<jh>
        negatedDetachImplicationBiconditionalRight
</jh>
We're almost there. We just need to add the quantifiers and apply the instance of the axiom of separation that we started with.
<jh>
        y addForAll
        x addThereExists
        applyModusPonens
))
</jh>

Now we introduce the symbol <code>∅</code> for the empty set.

<jh>
var (variable emptyElement)
def ((∅) (abstract emptyElement (⊥)))

thm (EmptySetVariable ((result x y)) () ((value x) ∉ (abstract y (⊥))) (
</jh>
To apply <code>Abstraction</code>, we need <code>∃ result ∀ x (x ∈ result ↔ [x / y]⊥)</code>. This follows from <code>axnul</code>, the <code>NegationBiconditional</code> relationship between negation and <code>⊥</code>, and the fact that substituting a variable in <code>⊥</code> has no effect.
<jh>
        result x axnul

        ((value x) ∈ (value result)) NegationBiconditional
        ((value x) ∈ (value result)) BiconditionalReflexivity
        (value x) y (⊥) NullSubstitution swapBiconditional
        buildBiconditional
        applyBiconditionalTransitivity

        x buildForAll
        result buildThereExists

        eliminateBiconditionalReverse
        applyModusPonens
</jh>
Now that we have <code>∃ result ∀ x (x ∈ result ↔ [x / y]⊥)</code>, we can apply <code>Abstraction</code> to get <code>x ∈ {y | ⊥} ↔ [x / y]⊥</code>.
<jh>
        Abstraction
</jh>
Moving the substitution which has no effect
<jh>
        (value x) y (⊥) NullSubstitution
        applyBiconditionalTransitivity
</jh>
gives us <code>x ∈ {y | ⊥} ↔ ⊥</code>
and then <code>NegationBiconditional</code> gives us our desired result.
<jh>
        ((value x) ∈ (abstract y (⊥))) NegationBiconditional
        eliminateBiconditionalForward
        applyModusPonens
))
</jh>

We provide a version with object instead of variable.
<jh>
thm (EmptySetObject ((x A y)) () (A ∉ (abstract y (⊥))) (
</jh>
The substitution to apply <code>VariableToObject</code> is <code>x = A → x ∉ ∅ ↔ A ∉ ∅</code>
<jh>
        (value x) A (abstract y (⊥)) IsElementBuilderRR
        addNegationInConsequent

        x y EmptySetVariable

        VariableToObject
))

thm (EmptySet ((A emptyElement)) () (A ∉ (∅)) (
        A emptyElement EmptySetObject
))
</jh>

== Pairing for objects ==
The <code>Pairing</code> axiom allows us to form a set given two elements, where the given sets are represented by variables. Here we prove the same thing, but with object in place of variable. The proof is by straightforward application of <code>VariableToObject</code> with the usual substitution machinery.
<jh>
thm (PairingObject-1 ((A x z w) (y x z w)) () (∃ w (∀ z (((value z) ∈ (value w)) ↔ (((value z) = A) ∨ ((value z) = (value y)))))) (
        (value x) A (value z) EqualityBuilderLL
        ((value z) = (value y)) buildDisjunctionRRInConsequent
        ((value z) ∈ (value w)) buildBiconditionalLLInConsequent
        z buildForAllInConsequent
        w buildThereExistsInConsequent

        w z x y Pairing

        VariableToObject
))

thm (PairingObject ((A y z w) (B y z w)) () (∃ w (∀ z (((value z) ∈ (value w)) ↔ (((value z) = A) ∨ ((value z) = B))))) (
        (value y) B (value z) EqualityBuilderLL
        ((value z) = A) buildDisjunctionLLInConsequent
        ((value z) ∈ (value w)) buildBiconditionalLLInConsequent
        z buildForAllInConsequent
        w buildThereExistsInConsequent

        w z A y PairingObject-1

        VariableToObject
))
</jh>

== Object version of extensionality ==
Here is a variant of extensionality, <code>∀ z (z ∈ A ↔ z ∈ B) → A = B</code>, which changes variables to objects. We first prove a lemma.

<jh>
thm (ExtensionalityObject-1 ((z A) (x y z) (x A)) () ((∀ z (((value z) ∈ A) ↔ ((value z) ∈ (value y)))) → (A = (value y))) (
</jh>
This lemma changes <code>x</code> to <code>A</code>, using <code>VariableToObject</code> applied to <code>x = A → ((∀ z (z ∈ x ↔ z ∈ y) → x = y) ↔ (∀ z (z ∈ A ↔ z ∈ y) → A = y))</code>
<jh>
        (value x) A (value z) IsElementBuilderLL
        ((value z) ∈ (value y)) buildBiconditionalRRInConsequent
        z buildForAllInConsequent

        (value x) A (value y) EqualityBuilderRR

        buildImplicationInConsequent

        z x y Extensionality
        VariableToObject
))

thm (ExtensionalityObject ((A z) (B z) (z y) (A y) (B y)) () ((∀ z (((value z) ∈ A) ↔ ((value z) ∈ B))) → (A = B)) (
</jh>
To prove this, we change <code>y</code> to <code>B</code>, using <code>VariableToObject</code> applied to <code>y = B → ((∀ z (z ∈ A ↔ z ∈ y) → A = y) ↔ (∀ z (z ∈ A ↔ z ∈ B) → A = B))</code>
<jh>
        (value y) B (value z) IsElementBuilderLL
        ((value z) ∈ A) buildBiconditionalLLInConsequent
        z buildForAllInConsequent

        (value y) B A EqualityBuilderLL

        buildImplicationInConsequent

        z A y ExtensionalityObject-1
        VariableToObject
))
</jh>

== Introducing a notation for a set ==
Many of the axioms (or theorems) of set theory assert the existence of certain sets. That is, they take the form that there is a set whose elements are those which satisfy a certain formula. In symbols, <code>∃ result ∀ y (y ∈ result ↔ φy)</code>. For each of these, we want to introduce a notation for the set <code>result</code>. Most of the work of doing this is some substitution machinery, which can be in part factored out to the following theorems.
<jh>
var (formula φy φz φC)
thm (SetVariable
  ((result y φz) (result y z) (z φy))
  ((HSUBZ (((value z) = (value y)) → (φz ↔ φy)))
   (HEXISTS (∃ result (∀ y (((value y) ∈ (value result)) ↔ φy)))))
  (((value y) ∈ (abstract z φz)) ↔ φy) (
        HEXISTS
</jh>
The first step is <code>[y / z]φz ↔ φy</code>.
<jh>
        HSUBZ
        makeSubstExplicit
</jh>
We now apply builders to get <code>∃ result ∀ y (y ∈ result ↔ [y / z]φz) ↔ ∃ result ∀ y (y ∈ result ↔ φy)</code>
<jh>
        ((value y) ∈ (value result)) buildBiconditionalLL
        y buildForAll
        result buildThereExists
</jh>
The right hand side of this is just our existence theorem, though (which we had left on the proof stack), so we detach it.
<jh>
        eliminateBiconditionalForward
        applyModusPonens
</jh>
Applying <code>Abstraction</code> to <code><code>∃ result ∀ y (y ∈ result ↔ [y / z]φz)</code> gives <code>y ∈ {z | φz} ↔ [y / z]φz</code> and simplying the last part gives us <code>y ∈ {z | φz} ↔ φy</code>.
<jh>
        Abstraction

        HSUBZ
        makeSubstExplicit

        applyBiconditionalTransitivity
))
</jh>
Getting rid of the distinct variable constraint and changing <code>y</code> from a variable to an object are accomplished by invoking <code>VariableToObject</code>.
<jh>
thm (SetObject
  ((y C) (result y φz) (result y z) (z φy) (y φz) (y φC))
  ((HSUBZ (((value z) = (value y)) → (φz ↔ φy)))
   (HSUBC (((value y) = C) → (φy ↔ φC)))
   (HEXISTS (∃ result (∀ y (((value y) ∈ (value result)) ↔ φy)))))
  ((C ∈ (abstract z φz)) ↔ φC) (
</jh>
Our substitution is <code>y = C → ((y ∈ {z | φz} ↔ φy) ↔ (C ∈ {z | φz} ↔ φC))</code>.
<jh>
        (value y) C (abstract z φz) IsElementBuilderRR
        HSUBC
        buildBiconditionalInConsequent

        HSUBZ
        HEXISTS
        SetVariable

        VariableToObject
))
</jh>

== Singletons ==
Given a set (object) <code>A</code>, here we construct a set <code>{ A }</code> which has <code>A</code> as its only element. That is, we are trying to prove the theorem <code>y ∈ { A } ↔ y = A</code>.

We first apply pairing via <code>SetObject</code>.
<jh>
thm (Singleton-sub () () ((B = C) → ((B = A) ↔ (C = A))) (
        B C A EqualityBuilderRR
))

thm (SingletonObject ((y B) (result y A z)) () ((B ∈ (abstract z ((value z) = A))) ↔ (B = A)) (
        (value z) (value y) A Singleton-sub

        (value y) B A Singleton-sub

</jh>
The existence theorem we need is <code>∃ result ∀ y (y ∈ result ↔ y = A)</code> which is a result of supplying <code>A</code> for both of the given sets in <code>PairingObject</code>.
<jh>
        result y A A PairingObject

        ((value y) = A) DisjunctionIdempotence
        ((value y) ∈ (value result)) buildBiconditionalLL
        y buildForAll
        result buildThereExists
        eliminateBiconditionalForward

        applyModusPonens
</jh>
We're ready to apply <code>SetObject</code>
<jh>
        SetObject
))
</jh>

Because the notation <code>{ A }</code> is not available, we call it <code>(singleton A)</code>.
<jh>
def ((singleton A) (abstract y ((value y) = A)))

thm (Singleton ((z A)) () ((B ∈ (singleton A)) ↔ (B = A)) (
        B z A SingletonObject
))
</jh>

=== Builder ===
The builder for singletons is <code>A = B → { A } = { B }</code>.<ref>[http://us.metamath.org/mpeuni/sneq.html sneq], metamath's set.mm, accessed July, 2010</ref>
<jh>
var (variable a b)
thm (SingletonBuilder-1 ((z A) (z B) (z a) (z b) (A a) (B b)) () ((A = B) → ((abstract a ((value a) = A)) = (abstract b ((value b) = B)))) (
</jh>
The equality builder gives us <code>A = B → (z = A ↔ z = B)</code>.
<jh>
        A B (value z) EqualityBuilderLL
</jh>
Applying <code>Singleton</code> twice gives us <code>(z ∈ {A} ↔ z ∈ {B}) ↔ (z = A ↔ z = B)</code>
<jh>
        (value z) a A SingletonObject
        (value z) b B SingletonObject
        buildBiconditional
</jh>
We now combine those two results to get <code>A = B → (z ∈ {A} ↔ z ∈ {B})</code>
<jh>
        eliminateBiconditionalForward
        applySyllogism
</jh>
Extensionality turns <code>z ∈ {A} ↔ z ∈ {B}</code> into <code>{A} = {B}</code>.
<jh>
        z addForAllToConsequent

        z (abstract a ((value a) = A)) (abstract b ((value b) = B)) ExtensionalityObject
        applySyllogism
))

thm (SingletonBuilder-2 ((A a) (B b)) () ((A = B) → ((singleton A) = (abstract b ((value b) = B)))) (
        A B a b SingletonBuilder-1
))

thm (SingletonBuilder ((B b)) () ((A = B) → ((singleton A) = (singleton B))) (
        A B b SingletonBuilder-2
))
</jh>

== Unordered pair ==

The unordered pair <code>{A, B}</code> has <code>A</code> and <code>B</code> as elements.  That is, we seek to prove <code>y ∈ {A, B} ↔ y = A ∨ y = B</code>. We apply pairing to <code>A</code> and <code>B</code> (again via <code>SetObject</code>).

<jh>
thm (UnorderedPair-sub () () ((C = D) → (((C = A) ∨ (C = B)) ↔ ((D = A) ∨ (D = B)))) (
        C D A EqualityBuilderRR
        C D B EqualityBuilderRR
        buildDisjunctionInConsequent
))

thm (UnorderedPairObject ((y C) (result y A z) (result y B z)) () ((C ∈ (abstract z (((value z) = A) ∨ ((value z) = B)))) ↔ ((C = A) ∨ (C = B))) (
        (value z) (value y) A B UnorderedPair-sub
        (value y) C A B UnorderedPair-sub
        result y A B PairingObject
        SetObject
))
</jh>

Because the notation <code>{ A, B }</code> is not available, we call it <code>(unorderedPair A B)</code>.
<jh>
def ((unorderedPair A B) (abstract y (((value y) = A) ∨ ((value y) = B))))

thm (UnorderedPair ((z A) (z B)) () ((C ∈ (unorderedPair A B)) ↔ ((C = A) ∨ (C = B))) (
        C z A B UnorderedPairObject
))
</jh>

=== Builder ===
The builder for unordered pairs is <code>A0 = B0 ∧ A1 = B1 → {A0, A1} = {B0, B1}</code>.
<jh>
thm (UnorderedPairBuilder-1
  ((z a) (z A0) (z A1) (z b) (z B0) (z B1) (a A0) (a A1) (b B0) (b B1))
  ()
  (((A0 = B0) ∧ (A1 = B1)) → ((abstract a (((value a) = A0) ∨ ((value a) = A1))) = (abstract b (((value b) = B0) ∨ ((value b) = B1))))) (
</jh>
Applying builders for equality and disjunction, we get <code>A0 = B0 ∧ A1 = B1 → (z = A0 ∨ z = A1 ↔ z = B0 ∨ z = B1)</code>.
<jh>
        (A0 = B0) (A1 = B1) ConjunctionRightElimination
        A0 B0 (value z) EqualityBuilderLL
        applySyllogism

        (A0 = B0) (A1 = B1) ConjunctionLeftElimination
        A1 B1 (value z) EqualityBuilderLL
        applySyllogism

        composeConjunction

        ((value z) = A0) ((value z) = B0) ((value z) = A1) ((value z) = B1) DisjunctionFunction
        applySyllogism
</jh>
Applying <code>UnorderedPair</code>, we get <code>A0 = B0 ∧ A1 = B1 → (z ∈ {A0, A1} ↔ z ∈ {B0, B1})</code>.
<jh>
        (value z) a A0 A1 UnorderedPairObject
        swapBiconditional
        transformImplicationBiconditionalLeft

        (value z) b B0 B1 UnorderedPairObject
        swapBiconditional
        transformImplicationBiconditionalRight
</jh>
By extensionality, the right hand side implies <code>{A0, A1} = {B0, B1}</code>.
<jh>
        z addForAllToConsequent
        z (abstract a (((value a) = A0) ∨ ((value a) = A1))) (abstract b (((value b) = B0) ∨ ((value b) = B1))) ExtensionalityObject
        applySyllogism
))

thm (UnorderedPairBuilder-2 ((a A0) (a A1) (b B0) (b B1)) () (((A0 = B0) ∧ (A1 = B1)) → ((abstract a (((value a) = A0) ∨ ((value a) = A1))) = (unorderedPair B0 B1))) (
        A0 B0 A1 B1 a b UnorderedPairBuilder-1
))

thm (UnorderedPairBuilder ((a A0) (a A1)) () (((A0 = B0) ∧ (A1 = B1)) → ((unorderedPair A0 A1) = (unorderedPair B0 B1))) (
        A0 B0 A1 B1 a UnorderedPairBuilder-2
))
</jh>

== Union ==
This section introduces the union of a set, <code>⋃ A</code>. We go through much the same process as for unordered pairs, but based on the axiom of union.

First is a version of the axiom of union for <code>object</code> rather than <code>variable</code>.

<jh>
thm (UnionAxiomObject ((A x y z w)) () (∃ y (∀ z (((value z) ∈ (value y)) ↔ (∃ w (((value z) ∈ (value w)) ∧ ((value w) ∈ A)))))) (
        (value x) A (value w) IsElementBuilderLL
        ((value z) ∈ (value w)) buildConjunctionLLInConsequent
        w buildThereExistsInConsequent
        ((value z) ∈ (value y)) buildBiconditionalLLInConsequent
        z buildForAllInConsequent
        y buildThereExistsInConsequent

        y z w x Union

        VariableToObject
))
</jh>

Then we prove <code>B ∈ ⋃ A ↔ ∃ x (B ∈ x ∧ x ∈ A)</code> using <code>SetObject</code> in the usual way.

<jh>
thm (Union-sub ((x C) (x D)) () ((C = D) → ((∃ x ((C ∈ (value x)) ∧ ((value x) ∈ A))) ↔ (∃ x ((D ∈ (value x)) ∧ ((value x) ∈ A))))) (
        C D (value x) IsElementBuilderRR
        ((value x) ∈ A) buildConjunctionRRInConsequent
        x buildThereExistsInConsequent
))

thm (UnionObject ((y B) (x B) (z result y x A)) () ((B ∈ (abstract z (∃ x (((value z) ∈ (value x)) ∧ ((value x) ∈ A))))) ↔ (∃ x ((B ∈ (value x)) ∧ ((value x) ∈ A)))) (
        (value z) (value y) x A Union-sub
        (value y) B x A Union-sub
        result y x A UnionAxiomObject
        SetObject
))

def ((⋃ A) (abstract z (∃ x (((value z) ∈ (value x)) ∧ ((value x) ∈ A)))))

# This is close, but it needs an alpha conversion (UnionObject should use the same
# variable x in two different quantifiers).
#thm (Union ((x A) (x B)  (z A)) ()
#  ((B ∈ (⋃ A)) ↔ (∃ x ((B ∈ (value x)) ∧ ((value x) ∈ A)))) (
#        B z x A UnionObject
#))
</jh>

== Subset ==
A set is a subset of another (<code>A ⊆ B</code>) if and only if being an element of the first set implies being a member of the second.
<jh>
def ((⊆ A B) (∀ x (((value x) ∈ A) → ((value x) ∈ B))))

thm (Subset ((x A) (x B)  (y A) (y B) (y x)) ()
  ((A ⊆ B) ↔ (∀ x (((value x) ∈ A) → ((value x) ∈ B)))) (
        (value y) (value x) A IsElementBuilderRR
        (value y) (value x) B IsElementBuilderRR
        buildImplicationInConsequent
        ChangeVariableForAll
))
</jh>

== Done ==
We have now proved all the theorems in [[Interface:Basic operations of general set theory]]j, and in [[Interface:Basic operations of Zermelo–Fraenkel set theory]].

<jh>
export (GENERAL Interface:Basic_operations_of_general_set_theory (CLASSICAL FIRSTORDER) ())
export (ZF_BASIC Interface:Basic_operations_of_Zermelo–Fraenkel_set_theory (CLASSICAL FIRSTORDER) ()) 
</jh>

== References ==

<references />

[[Category:Axiomatics of classical set theory and its fragments‎]]