Here we prove [[Interface:First-order linear order]], starting from [[Interface:First-order linear order defined via nonstrict inequality]].

== Import ==
<jh>
import (PROPOSITIONAL Interface:Classical_propositional_calculus () ())
import (FIRSTORDER Interface:First-order_logic_with_quantifiability (PROPOSITIONAL) ())
import (DEFINED Interface:First-order_linear_order_defined_via_nonstrict_inequality
  (PROPOSITIONAL FIRSTORDER) ())
</jh>

== Consequences ==
Here we prove various consequences of the order properties.

<jh>
var (object a b c a0 b0 a1 b1)
</jh>

Reflexivity follows from totality:
<jh>
thm (LessEqualReflexivity () () (a ≤ a) (
        a a LessEqualTotality
        conflateDisjunction
))
</jh>

Here are a few builders which are consequences of the one we have.
<jh>
thm (LessEqualBuilderLL () () ((b0 = b1) → ((a ≤ b0) ↔ (a ≤ b1))) (
        a EqualityReflexivity
        a a b0 b1 LessEqualBuilder
        detach1of2
))

thm (LessEqualBuilderRR () () ((a0 = a1) → ((a0 ≤ b) ↔ (a1 ≤ b))) (
        b EqualityReflexivity
        a0 a1 b b LessEqualBuilder
        detach2of2
))
</jh>

Here are rule forms of those builders.
<jh>
thm (buildLessEqual () ((HA (a0 = a1)) (HB (b0 = b1))) ((a0 ≤ b0) ↔ (a1 ≤ b1)) (
        HA
        HB
        introduceConjunction
        a0 a1 b0 b1 LessEqualBuilder
        applyModusPonens
))

thm (buildLessEqualRR () ((H (a0 = a1))) ((a0 ≤ b) ↔ (a1 ≤ b)) (
        H
        a0 a1 b LessEqualBuilderRR
        applyModusPonens
))

thm (buildLessEqualLL () ((H (b0 = b1))) ((a ≤ b0) ↔ (a ≤ b1)) (
        H
        b0 b1 a LessEqualBuilderLL
        applyModusPonens
))
</jh>

Equality implies <code>≤</code>.
<jh>
thm (EqualityLessEqual () () ((a = b) → (a ≤ b)) (
        a LessEqualReflexivity

        a b a LessEqualBuilderLL
</jh>
The builder gives us <code>a = b → (a ≤ a ↔ a ≤ b)</code>.  But <code>a ≤ a</code> is a theorem, so we are done.
<jh>
        detachImplicationBiconditional
))
</jh>

== Strict order ==
Here we define <code><</code>, as well as <code>></code> and <code>≥</code>.
<jh>
def ((< a b) ((a ≤ b) ∧ (a ≠ b)))
def ((> b a) (a < b))
def ((≥ b a) (a ≤ b))
</jh>

We next prove <code>a ≤ b ↔ a < b ∨ a = b</code> (finally justifying the informal name "less than or equal to" for <code>≤</code>). The proof is fairly straightforward expansion of the definition and rearrangement, but it will be easier to break out part of the proof into a lemma.
<jh>
thm (LessEqualLessThanLemma () () ((a ≤ b) ↔ (((a ≤ b) ∨ (a = b)) ∧ ((a ≠ b) ∨ (a = b)))) (
</jh>
We start with the forward implication. The first half is <code>a ≤ b → a ≤ b ∨ a = b</code>
<jh>
        (a ≤ b) (a = b) DisjunctionRightIntroduction
</jh>
The second half is <code>a ≤ b → a ≠ b ∨ a = b</code>
<jh>
        (a = b) TertiumNonDatur swapDisjunction
        (a ≤ b) introduceAntecedent
</jh>
Combining these gives us the forward implication.
<jh>
        composeConjunction
</jh>
Moving on to the reverse implication, we start with <code>(a ≤ b ∨ a = b) ∧ (a ≠ b ∨ a = b) → a ≤ b ∨ a = b</code>
<jh>
        ((a ≤ b) ∨ (a = b)) ((a ≠ b) ∨ (a = b)) ConjunctionRightElimination
</jh>
Then we show <code>a ≤ b ∨ a = b → a ≤ b</code>.
<jh>
        (a ≤ b) ImplicationReflexivity
        a b EqualityLessEqual
        composeDisjunction
</jh>
Combining these gives the reverse implication,
<jh>
        applySyllogism
</jh>
and combining forward and reverse implications completes the proof.
<jh>
        introduceBiconditionalFromImplications
))

thm (LessEqualLessThan () () ((a ≤ b) ↔ ((a < b) ∨ (a = b))) (
        a b LessEqualLessThanLemma

        (a ≤ b) (a ≠ b) (a = b) DisjunctionRightDistribution
        swapBiconditional
        applyBiconditionalTransitivity
</jh>
That gives us <code>a ≤ b ↔ (a ≤ b ∧ a ≠ b) ∨ a = b</code>.  But <code>a ≤ b ∧ a ≠ b</code> is just the definition of <code><</code>, so this is enough.
<jh>
))
</jh>

For parallelism, we also provide the definition of <code><</code> as a theorem.
<jh>
thm (LessThanLessEqual () () ((a < b) ↔ ((a ≤ b) ∧ (a ≠ b))) (
        (a < b) BiconditionalReflexivity
))
</jh>

The builder for <code><</code> is a consequence of the one for <code>≤</code>.

<jh>
thm (LessThanBuilder () () (((a0 = a1) ∧ (b0 = b1)) → ((a0 < b0) ↔ (a1 < b1))) (
        a0 a1 b0 b1 LessEqualBuilder

        a0 a1 b0 b1 EqualityBuilder
        addNegationInConsequent

        buildConjunctionInConsequent
))

thm (LessThanBuilderLL () () ((b0 = b1) → ((a < b0) ↔ (a < b1))) (
        a EqualityReflexivity
        a a b0 b1 LessThanBuilder
        detach1of2
))

thm (LessThanBuilderRR () () ((a0 = a1) → ((a0 < b) ↔ (a1 < b))) (
        b EqualityReflexivity
        a0 a1 b b LessThanBuilder
        detach2of2
))

thm (buildLessThan () ((HA (a0 = a1)) (HB (b0 = b1))) ((a0 < b0) ↔ (a1 < b1)) (
        HA
        HB
        introduceConjunction
        a0 a1 b0 b1 LessThanBuilder
        applyModusPonens
))

thm (buildLessThanLL () ((HB (b0 = b1))) ((a < b0) ↔ (a < b1)) (
        HB
        b0 b1 a LessThanBuilderLL
        applyModusPonens
))

thm (buildLessThanRR () ((HA (a0 = a1))) ((a0 < b) ↔ (a1 < b)) (
        HA
        a0 a1 b LessThanBuilderRR
        applyModusPonens
))
</jh>

=== Transitivity ===
We start by proving that <code>a ≤ b ∧ b < c → a < c</code>.<ref>Exercise 8(b) of Tarski, Alfred, ''Introduction to Logic and to the Methodology of Deductive Sciences'', Dover, 1995, page 167</ref> This has transitivity for <code><</code> as an immediate consequence, but will occasionally be useful in its own right.

The first lemma constitutes the easy part of the proof.
<jh>
thm (LessEqualLessThanTransitivity-1 () () (((a ≤ b) ∧ (b < c)) → (a ≤ c)) (
        (b ≤ c) (b ≠ c) ConjunctionRightElimination
        (a ≤ b) conjoinLL

        a b c LessEqualTransitivity
        applySyllogism
))
</jh>

The harder part of the proof is that <code>a ≤ b ∧ b < c → a ≠ c</code>.  This is fairly easy to sketch out: suppose that <code>a ≤ b ∧ b < c</code> and that <code>a = c</code>. Applying <code>a = c</code> to the first formula gives <code>a ≤ b ∧ b ≤ a</code>, and thus <code>a = b</code> by antisymmetry. But <code>a = b</code> and <code>a = c</code> imply <code>b = c</code>, and this contradicts <code>b < c</code>.  Here is one way to formalize that argument.
<jh>
thm (LessEqualLessThanTransitivity-2 () () (((a ≤ b) ∧ (b < c)) → (a ≠ c)) (
</jh>
We start with a substitution, <code>a = c → (a ≤ b ∧ b < a ↔ a ≤ b ∧ b < c)</code>
<jh>
        a c b LessThanBuilderLL
        (a ≤ b) buildConjunctionLLInConsequent
</jh>
Taking the reverse direction of the biconditional, expanding the definition of <code>b < a</code> and assocating the conjunctions gives <code>a = c → (a ≤ b ∧ b < c → (a ≤ b ∧ b ≤ a) ∧ b ≠ a)</code>
<jh>
        eliminateBiconditionalForwardInConsequent

        (a ≤ b) (b ≤ a) (b ≠ a) ConjunctionAssociativity
        swapBiconditional
        transformImplicationImplicationConsequent
</jh>
But <code>a ≤ b ∧ b ≤ a</code> implies <code>b = a</code>,
<jh>
        a b LessEqualAntisymmetry

        a b EqualitySymmetry
        eliminateBiconditionalReverse
        applySyllogism
</jh>
so <code>(a ≤ b ∧ b ≤ a) ∧ b ≠ a</code> implies <code>⊥</code> (false).
<jh>
        (b ≠ a) conjoinRR

        (b = a) Contradiction
        eliminateBiconditionalReverse
        applySyllogism
</jh>
The next step is <code>(a ≤ b ∧ b < c → (a ≤ b ∧ b ≤ a) ∧ b ≠ a) → ¬ (a ≤ b ∧ b < c)</code>.
<jh>
        ((a ≤ b) ∧ (b < c)) addCommonAntecedent

        ((a ≤ b) ∧ (b < c)) NegationImplication
        eliminateBiconditionalForward
        applySyllogism
</jh>
Combining that with the previous result gives <code>a = c → ¬ (a ≤ b ∧ b < c)</code>.
<jh>
        applySyllogism
</jh>
And a transposition finishes the job.
<jh>
        transposeWithNegatedConsequent
))
</jh>

Combining the two lemmas gives us transitivity for <code>a ≤ b ∧ b < c</code>.
<jh>
thm (LessEqualLessThanTransitivity () () (((a ≤ b) ∧ (b < c)) → (a < c)) (
        a b c  LessEqualLessThanTransitivity-1
        a b c  LessEqualLessThanTransitivity-2
        composeConjunction
))
</jh>

Transitivity for <code><</code> is an immediate consequence.
<jh>
thm (LessThanLessEqualImplication () () ((a < b) → (a ≤ b)) (
        (a ≤ b) (a ≠ b) ConjunctionRightElimination
))

thm (LessThanTransitivity () () (((a < b) ∧ (b < c)) → (a < c)) (
        a b LessThanLessEqualImplication

        (b < c) conjoinRR

        a b c LessEqualLessThanTransitivity
        applySyllogism
))
</jh>

=== Strict order totality ===
Exactly one of <code>a < b</code>, <code>a = b</code>, or <code>a > b</code> holds. We start with the proposition that at least one of the three holds.
<jh>
thm (LessThanTotality () () (((a < b) ∨ (a = b)) ∨ (a > b)) (
</jh>
The meat of the proof is <code>(a < b ∨ a = b) ∨ (b < a ∨ b = a)</code>.
<jh>
        a b LessEqualTotality

        a b LessEqualLessThan
        b a LessEqualLessThan
        buildDisjunction

        eliminateBiconditionalReverse
        applyModusPonens
</jh>
We just need to do some rearranging to finish.
<jh>
        swap23ofDisjunction4

        b a EqualitySymmetry
        (a = b) buildDisjunctionLL

        (a = b) DisjunctionIdempotence
        swapBiconditional
        applyBiconditionalTransitivity

        transformDisjunctionRight

        swap23ofDisjunction3
))
</jh>

The following theorems imply that no more than one of <code>a < b</code>, <code>a = b</code>, or <code>a > b</code> holds.
<jh>
thm (LessThanEquality () () ((a < b) → (a ≠ b)) (
        a b LessThanLessEqual
        eliminateBiconditionalReverse

        (a ≤ b) (a ≠ b) ConjunctionLeftElimination

        applySyllogism
))

thm (LessThanGreaterThan () () ((a < b) → (¬ (a > b))) (
        a EqualityReflexivity

</jh>
We start with <code>a < b ∧ b < a → a < a</code>.
<jh>
        a b a LessThanTransitivity
</jh>
Using the previous theorem we turn this into <code>a < b ∧ b < a → a ≠ a</code>.
<jh>
        a a LessThanEquality
        applySyllogism

</jh>
Since <code>a = a</code> is a theorem, this gives us <code>¬ (a < b ∧ b < a)</code>
<jh>
        transposeWithNegatedConsequent
        applyModusPonens
</jh>
A bit of propositional logic turns this into what we need.
<jh>
        distributeNegationPCP
        convertToImplicationFromDisjunction
))

thm (EqualityLessThan () () ((a = b) → (¬ (a < b))) (
        a b LessThanEquality
        transposeWithNegatedConsequent
))
</jh>

=== Irreflexivity ===
<jh>
thm (LessThanIrreflexivity () () (¬ (a < a)) (
        a EqualityReflexivity
        a a EqualityLessThan
        applyModusPonens
))
</jh>

== Export ==
We first export an interface which contains everything we handle here, including the import from [[Interface:First-order linear order defined via nonstrict inequality]].
<jh>
export (COMPLETE Interface:First-order_linear_order (PROPOSITIONAL FIRSTORDER) ())
</jh>

It will also be helpful to export an interface which does not duplicate the declarations in [[Interface:First-order linear order defined via nonstrict inequality]], for use in a module which has already exported the latter.
<jh>
export (ADDITIONAL Interface:First-order_linear_order_from_nonstrict_inequality (PROPOSITIONAL FIRSTORDER DEFINED) ())
</jh>

{{DEFAULTSORT:{{PAGENAME}}}}
[[Category:Total order]]
