{{interfaces
| imports = [[Interface:Complex number axioms]]
| exports = [[Interface:Tarski's geometry axioms]]
}}

[[Interface:Tarski's geometry axioms|Tarki's geometry axioms]] provide a set of axioms for Euclidian geometry which are based only on the concepts of congruence and betweenness: they make no reference to numbers. Here we show how to derive those axioms from real numbers.

We import [[Interface:Classical propositional calculus]], [[Interface:First-order logic with quantifiability]],  [[Interface:Set theory]], and [[Interface:Complex number axioms]].

<jh>
import (CLASSICAL Interface:Classical_propositional_calculus () ())
import (QUANTIFY_OVER_SETS Interface:First-order_logic_with_quantifiability (CLASSICAL) set.)
import (SETS Interface:Set_theory (CLASSICAL QUANTIFY_OVER_SETS) ())
import (COMPLEX Interface:Complex_numbers (CLASSICAL QUANTIFY_OVER_SETS SETS) ())
</jh>

We also import an interface, [[Interface:Restricting all quantifiers]], which provides the mapping between quantifiers which range over sets and quantifiers which range over points. The reason for this to be a separate interface rather than just a set of definitions and theorems in this file is that when it comes time to export to [[Interface:Tarski's geometry axioms]], we'll need an interface to pass as a parameter.
<jh>
import (QUANTIFY_OVER_POINTS Interface:Restricting_all_quantifiers (CLASSICAL QUANTIFY_OVER_SETS SETS COMPLEX) ())
</jh>

The interface [[Interface:Restricting all quantifiers]] defines a kind for restricted terms called <code>object</code>, which corresponds to a point.
<jh>
kindbind (object point)
</jh>

Now we define some variables.

<jh>
var (variable x y z w)
var (object X Y Z W)
var (set.variable a b c)
var (set.object A B C D)
var (formula φ)
</jh>

The following definition should perhaps go in [[Interface:Restricting all quantifiers]] although that perhaps is a question of whether that interface assumes the axiom of quantifiability.
<jh>
def ((subst Y x φ) (set.subst (asSet Y) (asSetVariable x) φ))
</jh>

== Congruence ==
We define congruence using the usual Pythagorean theorem based definition for Cartesian two-dimensional space. The Tarski and Givant paper has a diagram.<ref>Tarski and Givant, page 201</ref> The definition is interesting if <code>A</code> is an ordered pair <code>〈1st A, 2nd A〉</code>, where <code>1st A</code> and <code>2nd A</code> are real numbers, and likewise for <code>B</code>, <code>C</code>, and <code>D</code>.
<jh>
def ((set.≡ A B C D) (
  ((((1st A) − (1st B)) · ((1st A) − (1st B))) +
    (((2nd A) − (2nd B)) · ((2nd A) − (2nd B)))) set.=
  ((((1st C) − (1st D)) · ((1st C) − (1st D))) +
    (((2nd C) − (2nd D)) · ((2nd C) − (2nd D))))
))

def ((≡ X Y Z W) (set.≡ (asSet X) (asSet Y) (asSet Z) (asSet W)))
</jh>

=== Distance from A to B is the distance from B to A ===
Here we will prove <code>X Y ≡ Y X</code>. Restating this in terms of sets, we need to prove <code>A ∈ ℝ × ℝ ∧ B ∈ ℝ × ℝ → A B set.≡ B A</code>.

{{under construction}}
<jh>
#thm (set.CongruenceABBA () () (((A ∈ ((ℝ) × (ℝ))) ∧ (B ∈ (ℝ) × (ℝ))) → (A B set.≡ B A)) (
</jh>
The left hand side of the definition of congruence expands to <code>(1st A − 1st B) · (1st A − 1st B) + (2nd A − 2nd B) · (2nd A − 2nd B)</code>, which we first transform to <code>(- (1st B − 1st A)) · (- (1st B − 1st A)) + (- (1st B − 1st A)) · (- (1st B − 1st A))<code>.
<jh>
#        (1st B) (1st A) 
#))

#thm (CongruenceABBA () () (X Y ≡ Y X) (
# This should be a relatively straightforward application of InUniverse
#))
</jh>

== Betweenness ==
Betweenness is a matter of asserting that the slopes of the line segments between pairs of points are equal, and that the signs of the differences between the coordinates of the points are correct. Again, the Tarski and Givant paper has a diagram and more explanation.<ref>Tarski and Givant, page 201</ref>
<jh>
def ((set.between A B C)
  ((((((1st A) − (1st B)) · ((2nd B) − (2nd C))) set.= (((2nd A) − (2nd B)) · ((1st B) − (1st C)))) ∧
  ((0) ≤ (((1st A) − (1st B)) · ((1st B) − (1st C))))) ∧
  ((0) ≤ (((2nd A) − (2nd B)) · ((2nd B) − (2nd C)))))
)

def ((between X Y Z) (set.between (asSet X) (asSet Y) (asSet Z)))
</jh>

Now we export to [[Interface:Tarski's geometry axioms]]. (Or, rather, we will when we are ready).
<jh>
#export (TARSKI Interface:Tarski's_geometry_axioms (CLASSICAL QUANTIFY_OVER_POINTS) ())
</jh>

== Footnotes ==
<references/>

== References ==
* Tarski, Alfred; Givant, Steven (1999), "[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.27.9012 Tarski's system of geometry]", The Bulletin of Symbolic Logic 5 (2): 175–214, [[doi:10.2307/421089]], MR1791303, ISSN 1079-8986

[[Category:Euclidean geometries (general) and generalizations]]
[[Category:Foundations of classical theories (including reverse mathematics)]]