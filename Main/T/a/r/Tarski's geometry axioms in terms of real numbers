{{interfaces
| imports = [[Interface:Complex number axioms]]
| exports = [[Interface:Tarski's geometry axioms]]
}}

[[Interface:Tarski's geometry axioms|Tarki's geometry axioms]] provide a set of axioms for Euclidian geometry which are based only on the concepts of congruence and betweenness: they make no reference to numbers. Here we show how to derive those axioms from real numbers.

We import [[Interface:Classical propositional calculus]], [[Interface:First-order logic with quantifiability]],  [[Interface:Set theory]], and [[Interface:Complex number axioms]].

<jh>
import (CLASSICAL Interface:Classical_propositional_calculus () ())
import (QUANTIFY_OVER_SETS Interface:First-order_logic_with_quantifiability (CLASSICAL) set.)
import (SETS Interface:Set_theory (CLASSICAL QUANTIFY_OVER_SETS) ())
import (COMPLEX Interface:Complex_numbers (CLASSICAL QUANTIFY_OVER_SETS SETS) ())
</jh>

We also import an interface, [[Interface:Restricting all quantifiers]], which provides the mapping between quantifiers which range over sets and quantifiers which range over points. The reason for this to be a separate interface rather than just a set of definitions and theorems in this file is that when it comes time to export to [[Interface:Tarski's geometry axioms]], we'll need an interface to pass as a parameter.
<jh>
import (UNIVERSE_OF_POINTS Interface:Universe_of_points (CLASSICAL QUANTIFY_OVER_SETS SETS COMPLEX) ())

import (QUANTIFY_OVER_POINTS Interface:Restricting_all_quantifiers
  (CLASSICAL QUANTIFY_OVER_SETS SETS COMPLEX UNIVERSE_OF_POINTS) ())
</jh>

The interface [[Interface:Restricting all quantifiers]] defines a kind for restricted terms called <code>object</code>, which corresponds to a point.
<jh>
kindbind (object point)
</jh>

Now we define some variables.

<jh>
var (variable x y z w)
var (object X Y Z W)
var (set.variable a b c)
var (set.object A B C D)
var (formula φ)
</jh>

The following definition should perhaps go in [[Interface:Restricting all quantifiers]] although that perhaps is a question of whether that interface assumes the axiom of quantifiability.
<jh>
def ((subst Y x φ) (set.subst (asSet Y) (asSetVariable x) φ))
</jh>

== Congruence ==
We define congruence using the usual Pythagorean theorem based definition for Cartesian two-dimensional space. The Tarski and Givant paper has a diagram.<ref>Tarski and Givant, page 201</ref> The definition is interesting if <code>A</code> is an ordered pair <code>〈1st A, 2nd A〉</code>, where <code>1st A</code> and <code>2nd A</code> are real numbers, and likewise for <code>B</code>, <code>C</code>, and <code>D</code>.
<jh>
def ((set.≡ A B C D) (
  ((((1st A) − (1st B)) · ((1st A) − (1st B))) +
    (((2nd A) − (2nd B)) · ((2nd A) − (2nd B)))) set.=
  ((((1st C) − (1st D)) · ((1st C) − (1st D))) +
    (((2nd C) − (2nd D)) · ((2nd C) − (2nd D))))
))

def ((≡ X Y Z W) (set.≡ (asSet X) (asSet Y) (asSet Z) (asSet W)))
</jh>

=== The coordinates of points are real ===
Given two points (as sets), the first and second coordinates are complex (in fact, they are real, but it will sometimes be convenient to say that they are complex without the extra step of saying that any real number is a complex number).
<jh>
thm (set.TwoPointsRealParts () ()
  (((A ∈ ((ℝ) × (ℝ))) ∧ (B ∈ ((ℝ) × (ℝ)))) →
    ((((1st A) ∈ (ℝ)) ∧ ((2nd A) ∈ (ℝ))) ∧
      (((1st B) ∈ (ℝ)) ∧ ((2nd B) ∈ (ℝ))))) (
        A (ℝ) (ℝ) FirstSecondCartesianProduct
        B (ℝ) (ℝ) FirstSecondCartesianProduct
        conjoin
))

thm (RealComplexMembership () () ((A ∈ (ℝ)) → (A ∈ (ℂ))) (
        RealComplex
        (ℝ) (ℂ) A SubsetMembership
        applyModusPonens
))

thm (set.TwoPointsComplexParts () ()
  (((A ∈ ((ℝ) × (ℝ))) ∧ (B ∈ ((ℝ) × (ℝ)))) →
    ((((1st A) ∈ (ℂ)) ∧ ((2nd A) ∈ (ℂ))) ∧
      (((1st B) ∈ (ℂ)) ∧ ((2nd B) ∈ (ℂ))))) (
        A B set.TwoPointsRealParts

        (1st A) RealComplexMembership
        (2nd A) RealComplexMembership
        conjoin

        (1st B) RealComplexMembership
        (2nd B) RealComplexMembership
        conjoin

        conjoin

        applySyllogism
))
</jh>

=== Distance from A to B is the distance from B to A ===
Here we will prove <code>X Y ≡ Y X</code>. Restating this in terms of sets, we need to prove <code>A ∈ ℝ × ℝ ∧ B ∈ ℝ × ℝ → A B set.≡ B A</code>.

<jh>
thm (SquareBuilder () () ((A set.= B) → ((A · A) set.= (B · B))) (
        (A set.= B) ConjunctionIdempotence
        eliminateBiconditionalReverse

        A B A B MultiplicationBuilder
        applySyllogism
))

thm (set.CongruenceABBA-1 () ()
  (((((1st A) ∈ (ℂ)) ∧ ((2nd A) ∈ (ℂ))) ∧
    (((1st B) ∈ (ℂ)) ∧ ((2nd B) ∈ (ℂ)))) →
    (A B set.≡ B A)
  ) (
</jh>
The left hand side of the definition of congruence expands to <code>(1st A − 1st B) · (1st A − 1st B) + (2nd A − 2nd B) · (2nd A − 2nd B)</code>, which we first transform to <code>(- (1st B − 1st A)) · (- (1st B − 1st A)) + (- (2nd B − 2nd A)) · (- (2nd B − 2nd A))<code>.

We start with the <code>(1st A − 1st B) · (1st A − 1st B)</code> part.
<jh>
        (((1st A) ∈ (ℂ)) ∧ ((2nd A) ∈ (ℂ)))
          (((1st B) ∈ (ℂ)) ∧ ((2nd B) ∈ (ℂ)))
          ConjunctionLeftElimination
        eliminateRightConjunctInConsequent

        (((1st A) ∈ (ℂ)) ∧ ((2nd A) ∈ (ℂ)))
          (((1st B) ∈ (ℂ)) ∧ ((2nd B) ∈ (ℂ)))
          ConjunctionRightElimination
        eliminateRightConjunctInConsequent

        composeConjunction

        (1st B) (1st A) NegativeSubtraction
        applySyllogism

        set.swapEqualityInConsequent

        ((1st A) − (1st B)) (- ((1st B) − (1st A))) SquareBuilder
        applySyllogism
</jh>
The <code>(2nd A − 2nd B) · (2nd A − 2nd B)</code> part is very similar.
<jh>
        (((1st A) ∈ (ℂ)) ∧ ((2nd A) ∈ (ℂ)))
          (((1st B) ∈ (ℂ)) ∧ ((2nd B) ∈ (ℂ)))
          ConjunctionLeftElimination
        eliminateLeftConjunctInConsequent

        (((1st A) ∈ (ℂ)) ∧ ((2nd A) ∈ (ℂ)))
          (((1st B) ∈ (ℂ)) ∧ ((2nd B) ∈ (ℂ)))
          ConjunctionRightElimination
        eliminateLeftConjunctInConsequent

        composeConjunction

        (2nd B) (2nd A) NegativeSubtraction
        applySyllogism

        set.swapEqualityInConsequent

        ((2nd A) − (2nd B)) (- ((2nd B) − (2nd A))) SquareBuilder
        applySyllogism

        composeConjunction

        (((1st A) − (1st B)) · ((1st A) − (1st B)))
          ((- ((1st B) − (1st A))) · (- ((1st B) − (1st A))))
          (((2nd A) − (2nd B)) · ((2nd A) − (2nd B)))
          ((- ((2nd B) − (2nd A))) · (- ((2nd B) − (2nd A))))
          AdditionBuilder
        applySyllogism
</jh>
We can now apply <code>MultiplicationNegativeNegative</code> to get <code>(1st B − 1st A) · (1st B − 1st A) + (2nd B − 2nd A) · (2nd B − 2nd A)</code>, which is the right hand side of the definition of congruence.
<jh>
        (((1st A) ∈ (ℂ)) ∧ ((2nd A) ∈ (ℂ)))
          (((1st B) ∈ (ℂ)) ∧ ((2nd B) ∈ (ℂ)))
          ConjunctionLeftElimination
        eliminateRightConjunctInConsequent

        (((1st A) ∈ (ℂ)) ∧ ((2nd A) ∈ (ℂ)))
          (((1st B) ∈ (ℂ)) ∧ ((2nd B) ∈ (ℂ)))
          ConjunctionRightElimination
        eliminateRightConjunctInConsequent

        composeConjunction

        (1st B) (1st A) SubtractionClosed
        applySyllogism

        (((1st B) − (1st A)) ∈  (ℂ)) ConjunctionIdempotence
        eliminateBiconditionalReverse
        applySyllogism

        ((1st B) − (1st A)) ((1st B) − (1st A)) MultiplicationNegativeNegative
        applySyllogism

        (((1st A) ∈ (ℂ)) ∧ ((2nd A) ∈ (ℂ)))
          (((1st B) ∈ (ℂ)) ∧ ((2nd B) ∈ (ℂ)))
          ConjunctionLeftElimination
        eliminateLeftConjunctInConsequent

        (((1st A) ∈ (ℂ)) ∧ ((2nd A) ∈ (ℂ)))
          (((1st B) ∈ (ℂ)) ∧ ((2nd B) ∈ (ℂ)))
          ConjunctionRightElimination
        eliminateLeftConjunctInConsequent

        composeConjunction

        (2nd B) (2nd A) SubtractionClosed
        applySyllogism

        (((2nd B) − (2nd A)) ∈  (ℂ)) ConjunctionIdempotence
        eliminateBiconditionalReverse
        applySyllogism

        ((2nd B) − (2nd A)) ((2nd B) − (2nd A)) MultiplicationNegativeNegative
        applySyllogism

        composeConjunction

        ((- ((1st B) − (1st A))) · (- ((1st B) − (1st A))))
          (((1st B) − (1st A)) · ((1st B) − (1st A)))
          ((- ((2nd B) − (2nd A))) · (- ((2nd B) − (2nd A))))
          (((2nd B) − (2nd A)) · ((2nd B) − (2nd A)))
          AdditionBuilder
        applySyllogism

        set.applyEqualityTransitivityInConsequent
))

thm (set.CongruenceABBA () () (((A ∈ ((ℝ) × (ℝ))) ∧ (B ∈ ((ℝ) × (ℝ)))) → (A B set.≡ B A)) (
        A B set.TwoPointsComplexParts
        A B set.CongruenceABBA-1
        applySyllogism
))

thm (CongruenceABBA () () (X Y ≡ Y X) (
        X InUniverse
        Y InUniverse
        introduceConjunction

        (asSet X) (asSet Y) set.CongruenceABBA
        applyModusPonens
))
</jh>

=== Congruence identity ===
An empty line segment starts and ends at the same point. That is, <code>X Y ≡ Z Z → X = Y</code> in the language of points or <code>A ∈ ℝ × ℝ ∧ B ∈ ℝ × ℝ ∧ C ∈ ℝ × ℝ → (A B set.≡ C C → A set.= B)</code> in the language of sets.

Our notation is pretty verbose here, so in informal discussion we'll adopt the following simplifications. Instead of <code>1st A</code> we'll write <code>A<sub>1</sub></code> and instead of <code>A · A</code> we'll write <code>A<sup>2</sup></code>. So <code>(1st A − 1st B) · (1st A − 1st B)</code> becomes <code>(A<sub>1</sub> − B<sub>1</sub>)<sup>2</sup></code>.

The sketch of the proof is that we'll expand <code>A B set.≡ C C</code> into <code>(A<sub>1</sub> − B<sub>1</sub>)<sup>2</sup> + (A<sub>2</sub> − B<sub>2</sub>)<sup>2</sup> set.= (C<sub>1</sub> − C<sub>1</sub>)<sup>2</sup> + (C<sub>2</sub> − C<sub>2</sub>)<sup>2</sup>. But the right side of that is zero, so then we just need to note that we are adding two nonnegative numbers to get zero, which means both of them must be zero. From there we get <code>A<sub>1</sub> set.= B<sub>1</sub></code> and <code>A<sub>2</sub> set.= B<sub>2</sub></code>, which leads to <code>A set.= B</code>.

We can start with <code>(C<sub>1</sub> − C<sub>1</sub>)<sup>2</sup> + (C<sub>2</sub> − C<sub>2</sub>)<sup>2</sup> = 0</code>, which we prove by means of a series of simpler lemmas.
<jh>
thm (set.CongruenceIdentity-d () ()
  ((D ∈ (ℝ)) →
    ((D − D) set.= (0))) (
        D RealComplexMembership
        D SubtractionItself
        applySyllogism
))

#thm (set.CongruenceIdentity-d-2 () ()
#  ((D ∈ (ℝ)) →
#    (((D − D) · (D − D)) = (0))) (
#))

#thm (set.CongruenceIdentity-c-0 () ()
#  ((((1st C) ∈ (ℝ)) ∧ ((2nd C) ∈ (ℝ))) →
#    (((((1st C) − (1st C)) · ((1st C) − (1st C))) + (((2nd C) − (2nd C)) · ((2nd C) − (2nd C)))) = (0))) (
#))
</jh>

Now we are ready to combine that result with the expansion of <code>A B set.≡ C C</code>.
<jh>
#thm (set.CongruenceIdentity-2 () ()
#  ((((((1st A) ∈ (ℝ)) ∧ ((2nd A) ∈ (ℝ))) ∧
#    (((1st B) ∈ (ℝ)) ∧ ((2nd B) ∈ (ℝ)))) ∧
#    (((1st C) ∈ (ℝ)) ∧ ((2nd C) ∈ (ℝ)))) →
#    ((A B set.≡ C C) →
#      (((((1st A) − (1st B)) · ((1st A) − (1st B))) + (((2nd A) − (2nd B)) · ((2nd A) − (2nd B)))) = (0)))) (
</jh>
Expanding <code>A B set.≡ C C</code> gives us <code>(A<sub>1</sub> − B<sub>1</sub>)<sup>2</sup> + (A<sub>2</sub> − B<sub>2</sub>)<sup>2</sup> set.= (C<sub>1</sub> − C<sub>1</sub>)<sup>2</sup> + (C<sub>2</sub> − C<sub>2</sub>)<sup>2</sup>.
<jh>
#))

#thm (set.CongruenceIdentity-5 () ()
#  ((((((1st A) ∈ (ℝ)) ∧ ((2nd A) ∈ (ℝ))) ∧
#    (((1st B) ∈ (ℝ)) ∧ ((2nd B) ∈ (ℝ)))) ∧
#    (((1st C) ∈ (ℝ)) ∧ ((2nd C) ∈ (ℝ)))) →
#    ((A B set.≡ C C) → (A set.= B))) (


#thm (set.CongruenceIdentity () () ((((A ∈ ((ℝ) × (ℝ))) ∧ (B ∈ ((ℝ) × (ℝ)))) ∧ (C ∈ ((ℝ) × (ℝ)))) →
#  (A B set.≡ C C) → (A set.= B)) (
#))

#thm (CongruenceIdentity () () ((X Y ≡ Z Z) → (X = Y)) (
#))
</jh>

== Betweenness ==
Betweenness is a matter of asserting that the slopes of the line segments between pairs of points are equal, and that the signs of the differences between the coordinates of the points are correct. Again, the Tarski and Givant paper has a diagram and more explanation.<ref>Tarski and Givant, page 201</ref>
<jh>
def ((set.between A B C)
  ((((((1st A) − (1st B)) · ((2nd B) − (2nd C))) set.= (((2nd A) − (2nd B)) · ((1st B) − (1st C)))) ∧
  ((0) ≤ (((1st A) − (1st B)) · ((1st B) − (1st C))))) ∧
  ((0) ≤ (((2nd A) − (2nd B)) · ((2nd B) − (2nd C)))))
)

def ((between X Y Z) (set.between (asSet X) (asSet Y) (asSet Z)))
</jh>

Now we export to [[Interface:Tarski's geometry axioms]]. (Or, rather, we will when we are ready).
<jh>
#export (TARSKI Interface:Tarski's_geometry_axioms (CLASSICAL QUANTIFY_OVER_POINTS) ())
</jh>

== Footnotes ==
<references/>

== References ==
* Tarski, Alfred; Givant, Steven (1999), "[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.27.9012 Tarski's system of geometry]", The Bulletin of Symbolic Logic 5 (2): 175–214, [[doi:10.2307/421089]], MR1791303, ISSN 1079-8986

[[Category:Euclidean geometries (general) and generalizations]]
[[Category:Foundations of classical theories (including reverse mathematics)]]
