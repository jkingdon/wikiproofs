{{interfaces
| imports = [[Interface:Tarski's geometry axioms]]
| exports = [[Interface:Line segment congruence]]
}}

This is part of a series of modules which prove a variety of geometrical theorems starting with Tarski's axioms for geometry. We follow the formalization of Julien Narboux<ref>The formal proofs are at [http://www.lix.polytechnique.fr/Labo/Julien.Narboux/tarski.html Formalization of Tarski's geometry in the Coq proof assistant] and are described in Julien Narboux (2007), "[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.158.8614 Mechanical Theorem Proving in Tarski’s Geometry]", F. Botana and T. Recio (Eds.): ADG 2006, LNAI 4869, pp. 139–156</ref> which itself closely follows a treatise by Schwabhäuser, Szmielew, and Tarski.<ref>W. Schwabhäuser, W Szmielew, and A. Tarski (1983), ''Metamathematische Methoden in der Geometrie'', ISBN 0387129588</ref>

We import the theorems of [[Interface:Classical propositional calculus|propositional logic]] and [[Interface:First-order logic with quantifiability|predicate logic]], and the [[Interface:Tarski's geometry axioms|geometry axioms]] and define some variables:
<jh>
import (CLASSICAL Interface:Classical_propositional_calculus () ())
import (FIRSTORDER Interface:First-order_logic_with_quantifiability (CLASSICAL) ())
import (AXIOMS Interface:Tarski's_geometry_axioms (CLASSICAL FIRSTORDER) ())

var (point x y z w u v A B C D E P Q A′ B′ C′ D′ B″ C″)
var (point x′ y′ z′ w′ u′)
var (variable a b b′ c d′ q q′ ww ww′ b″ c″)
var (formula antecedent)
</jh>

== Congruence ==
A line segment is congruent to itself.<ref>Lemma cong_reflexivity in Narboux</ref>
<jh>
thm (CongruenceReflexivity () () (x y ≡ x y) (
        y x CongruenceABBA
        y x CongruenceABBA
        introduceConjunction

        y x x y x y CongruenceTransitivityAxiom

        applyModusPonens
))
</jh>

Congruence is symmetrical.<ref>Lemma cong_symmetry in Narboux</ref> The biconditionalized version is not in Narboux, but fits our usual conventions and the nature of JHilbert.
<jh>
thm (CongruenceSymmetryImplication () () ((x y ≡ z w) → (z w ≡ x y)) (
        x y CongruenceReflexivity
        x y z w x y CongruenceTransitivityAxiom
        detach2of2
))

thm (CongruenceSymmetry () () ((x y ≡ z w) ↔ (z w ≡ x y)) (
        x y z w CongruenceSymmetryImplication
        z w x y CongruenceSymmetryImplication
        introduceBiconditionalFromImplications
))

thm (swapCongruenceInConsequent () ((H (antecedent → (x y ≡ z w))))
  (antecedent → (z w ≡ x y)) (
        H
        x y z w CongruenceSymmetryImplication
        applySyllogism
))
</jh>

Congruence is transitive.<ref>Lemma cong_transitivity in Narboux</ref>
<jh>
thm (CongruenceTransitivity () () (((x y ≡ z w) ∧ (z w ≡ u v)) → (x y ≡ u v)) (
        x y z w CongruenceSymmetry
        eliminateBiconditionalReverse
        (z w ≡ u v) conjoinRR

        z w x y u v CongruenceTransitivityAxiom

        applySyllogism
))
</jh>

We can commute the endpoints of the first line segment.<ref>Lemma cong_left_commutativity in Narboux</ref>
<jh>
thm (CongruenceLeftCommutativityImplication () () ((x y ≡ z w) → (y x ≡ z w)) (
        x y CongruenceABBA
        x y y x z w CongruenceTransitivityAxiom
        detach1of2
))

thm (CongruenceLeftCommutativity () () ((x y ≡ z w) ↔ (y x ≡ z w)) (
        x y z w CongruenceLeftCommutativityImplication
        y x z w CongruenceLeftCommutativityImplication
        introduceBiconditionalFromImplications
))

thm (commuteCongruenceLeftInConsequent () ((H (antecedent → (x y ≡ z w))))
  (antecedent → (y x ≡ z w)) (
        H
        x y z w CongruenceLeftCommutativityImplication
        applySyllogism
))
</jh>

Likewise for the second line segment.<ref>Lemma cong_right_commutativity in Narboux, biconditionalized</ref>
<jh>
thm (CongruenceRightCommutativity () () ((x y ≡ z w) ↔ (x y ≡ w z)) (
        x y z w CongruenceSymmetry

        z w x y CongruenceLeftCommutativity
        applyBiconditionalTransitivity

        w z x y CongruenceSymmetry
        applyBiconditionalTransitivity
))

thm (commuteCongruenceRightInConsequent () ((H (antecedent → (x y ≡ z w))))
  (antecedent → (x y ≡ w z)) (
        H
        x y z w CongruenceRightCommutativity
        eliminateBiconditionalReverse
        applySyllogism
))
</jh>

A line segment with the same point as both of its endpoints is congruent to another such segment. To prove this, start with the line segment x x. Extend x y beyond y to another point a such that y a ≡ x x. Then we show that a must equal y.<ref>Lemma cong_trivial_identity in Narboux</ref>
<jh>
thm (CongruenceTrivialIdentity ((a x) (a y)) () (y y ≡ x x) (
        a x y x x SegmentConstruction
</jh>
Now we have <code>∃ a (between x y a ∧ y a ≡ x x)</code>. We drop the between part.
<jh>
        (between x y (value a)) (y (value a) ≡ x x) ConjunctionLeftElimination
        a addThereExists
        applyModusPonens
</jh>
Here we combine <code>y a ≡ x x → y = a</code> with our previous result and rearrange a bit to get <code>∃ a (y = a ∧ y a ≡ x x)</code>.
<jh>
        y (value a) x CongruenceIdentity
        (y (value a) ≡ x x) ImplicationReflexivity
        composeConjunction
        a addThereExists
        applyModusPonens
</jh>
Now we just need a substitution.  The substitution is <code>y = a → (y y ≡ x x ↔ y a ≡ x x)</code>.
<jh>
        x EqualityReflexivity
        x EqualityReflexivity
        y EqualityReflexivity
        y y y (value a) x x x x CongruenceBuilder
        detach1of4
        detach2of2
        detach2of2
</jh>
Taking the reverse implication and combining with the previous result gives us <code>∃ a y y ≡ x x</code>.
<jh>
        eliminateBiconditionalForwardInConsequent
        import
        a addThereExists
        applyModusPonens
</jh>
The quantifier is no longer needed, and removing it finishes the proof.
<jh>
        removeThereExists
))
</jh>

Here is a version of <code>CongruenceIdentity</code> with left and right sides swapped.<ref>Lemma cong_reverse_identity in Narboux</ref>
<jh>
thm (CongruenceIdentityLeft () () ((x x ≡ y z) → (y = z)) (
        x x y z CongruenceSymmetry
        eliminateBiconditionalReverse

        y z x CongruenceIdentity
        applySyllogism
))
</jh>

Congruence is unaffected by exchanging the endpoints of both line segments.<ref>Lemma cong_commutativity in Narboux</ref>
<jh>
thm (CongruenceCommutativity () () ((x y ≡ z w) ↔ (y x ≡ w z)) (
        x y z w CongruenceLeftCommutativity
        y x z w CongruenceRightCommutativity
        applyBiconditionalTransitivity
))

thm (commuteCongruenceInConsequent () ((H (antecedent → (x y ≡ z w))))
  (antecedent → (y x ≡ w z)) (
        H
        x y z w CongruenceCommutativity
        eliminateBiconditionalReverse
        applySyllogism
))
</jh>

The next lemma is a convenience form of <code>CongruenceIdentity</code>.<ref>not in Narboux</ref>
<jh>
thm (CongruenceIdentityFromEquality () () ((x = y) → ((x y ≡ z w) → (z = w))) (
</jh>
This is just a substitution away from <code>CongruenceIdentityLeft</code>.  The substitution is <code>x = y → (x x ≡ z w ↔ x y ≡ z w)</code>.
<jh>
        z EqualityReflexivity
        w EqualityReflexivity
        x EqualityReflexivity
        x x x y z z w w CongruenceBuilder
        detach1of4
        detach2of2
        detach2of2

        eliminateBiconditionalForwardInConsequent

        x z w CongruenceIdentityLeft
        (x = y) introduceAntecedent
        applySyllogismInConsequent
))
</jh>

== Outer three segment ==
The next theorem, <code>between x y z ∧ between x′ y′ z′ ∧ x y ≡ x′ y′ ∧ y z ≡ y′ z′ → x z ≡ x′ z′</code>, is basically a degenerate case of the five segment axiom.<ref>Lemma l2_11 in Narboux</ref><ref>Axiom 23 in Givant and Tarski, 1999</ref> We call it ''outer'' three segment because we are given congruences for the inner line segments, and conclude a congruence for the outer segments. We will later prove an inner variant in which which the reverse is true.

There are two cases. If <code>x ≠ y</code>, then applying five segments to x y z and x yields the desired result (the additional two antecedents are fulfilled because one becomes <code>x x ≡ x′ x′</code> and the other <code>y x ≡ y′ x′</code>). If <code>x = y</code>, then <code>x z ≡ x′ z′</code> follows from <code>y z ≡ y′ z′</code> (and <code>x′ = y′</code>, which follows from <code>x y ≡ x′ y′</code>).

We first prove the <code>x = y</code> case as a lemma.
<jh>
thm (ThreeSegmentXEqualsY () () ((x = y) → (((((between x y z) ∧ (between x′ y′ z′)) ∧ (x y ≡ x′ y′)) ∧ (y z ≡ y′ z′)) → (x z ≡ x′ z′))) (
</jh>
We start with <code>x = y → (x y ≡ x′ y′ → x′ = y′)</code>
<jh>
        x y x′ y′ CongruenceIdentityFromEquality
</jh>
Using <code>x′ = y′</code> for something takes this form: <code>x = y → (x′ = y′ → (y z ≡ y′ z′ → x z ≡ x′ z′))</code>.
<jh>
        z EqualityReflexivity
        z′ EqualityReflexivity
        x y z z x′ y′ z′ z′ CongruenceBuilder
        detach2of2
        detach2of3
        eliminateBiconditionalForwardInConsequent
        export
</jh>
We combine those to get <code>x = y → (x y ≡ x′ y′ → (y z ≡ y′ z′ → x z ≡ x′ z′))</code>.
<jh>
        applySyllogismInConsequent
</jh>
Adding two more antecedents and importing several times gives us the complete <code>x = y</code> case.
<jh>
        (between x′ y′ z′) introduceAntecedentInConsequent
        (between x y z) introduceAntecedentInConsequent
        importInConsequent
        importInConsequent
        importInConsequent
))
</jh>
Now, the <code>x ≠ y</code> case.
<jh>
thm (ThreeSegmentXNotEqualY () () ((x ≠ y) → (((((between x y z) ∧ (between x′ y′ z′)) ∧ (x y ≡ x′ y′)) ∧ (y z ≡ y′ z′)) → (x z ≡ x′ z′))) (
</jh>
Applying the five segment axiom gives us <code>x ≠ y ∧ between x y z ∧ between x′ y′ z′ ∧ x y ≡ x′ y′ ∧ y z ≡ y′ z′ ∧ x x ≡ x′ x′ ∧ y x ≡ y′ x′ → z x ≡ z′ x′</code>. First we detach <code>x x ≡ x′ x′</code>
<jh>
        x x′ CongruenceTrivialIdentity
        x y z x′ y′ z′ x x′ OuterFiveSegment
        detach2of3
</jh>
Next we commute <code>z x ≡ z′ x′</code> to <code>x z ≡ x′ z′</code>.
<jh>
        z x z′ x′ CongruenceCommutativity eliminateBiconditionalReverse
        applySyllogism
</jh>
We are still facing <code>x ≠ y ∧ between x y z ∧ between x′ y′ z′ ∧ x y ≡ x′ y′ ∧ y z ≡ y′ z′ ∧ y x ≡ y′ x′ → x z ≡ x′ z′</code>. We need to remove the <code>y x ≡ y′ x′</code> (because it is redundant with <code>x y ≡ x′ y′</code>).

We get most of the way with <code>x y ≡ x′ y′ ∧ y z ≡ y′ z′ → (x y ≡ x′ y′ ∧ y z ≡ y′ z′) ∧ y x ≡ y′ x′</code>:
<jh>
        ((x y ≡ x′ y′) ∧ (y z ≡ y′ z′)) ImplicationReflexivity

        (x y ≡ x′ y′) (y z ≡ y′ z′) ConjunctionRightElimination
        commuteCongruenceInConsequent

        composeConjunction
</jh>
Now we just add the rest of the antecedents and combine to finish the <code>x ≠ y</code> case.
<jh>
        (x z ≡ x′ z′) addCommonConsequent
        exportInAntecedent
        exportInAntecedent
        exportInConsequent
        (between x′ y′ z′) addCommonAntecedent
        (between x y z) addCommonAntecedent
        (x ≠ y) addCommonAntecedent

        importInAntecedent
        importInAntecedent
        importInAntecedent
        importInAntecedent
        importInAntecedent

        applyModusPonens

        importInConsequent
        importInConsequent
        importInConsequent
))

thm (OuterThreeSegment () ()
  (((((between x y z) ∧ (between x′ y′ z′)) ∧ (x y ≡ x′ y′)) ∧ (y z ≡ y′ z′)) → (x z ≡ x′ z′)) (
        x y z x′ y′ z′ ThreeSegmentXEqualsY
        x y z x′ y′ z′ ThreeSegmentXNotEqualY
        eliminateCases
))
</jh>

== Uniqueness of segment construction ==
Here we prove that the segment constructed by the segment construction axiom is unique. We state this as <code>Q ≠ A ∧ between Q A x ∧ A x ≡ B C ∧ between Q A y ∧ A y ≡ B C → x = y</code>. The proof is first that <code>A x ≡ A y</code> (because both are congruent to <code>B C</code>), and between that and <code>Q A ≡ Q A</code> we can apply <code>OuterThreeSegment</code> to <code>Q A x</code> and <code>Q A y</code> to get <code>Q x ≡ Q y</code>. Then we will apply <code>OuterFiveSegment</code> with the lines <code>Q A x</code> and <code>Q A x</code> and the points <code>x</code> and <code>y</code>. The four congruences we need are <code>Q A ≡ Q A</code>, <code>A x ≡ A x</code>, <code>Q x ≡ Q y</code>, and <code>A x ≡ A y</code>, and then <code>OuterFiveSegment</code> gives us <code>x x ≡ x y</code>. This congruence yields <code>x = y</code> by <code>CongruenceIdentityLeft</code>.<ref>construction_unicity in Narboux</ref>

The only real difficulty in formalizing this is juggling all those conjunctions and multiple antecedents. The first lemma shows <code>A x ≡ A y</code>.
<jh>
thm (SegmentConstructionUniquenessAxAy () () ((((((Q ≠ A) ∧ (between Q A x)) ∧ (A x ≡ B C)) ∧ (between Q A y)) ∧ (A y ≡ B C)) → (A x ≡ A y)) (
</jh>
First we extract the two pieces we care about, first showing that big long antecedent implies <code>A x ≡ B C</code>,
<jh>
        ((((Q ≠ A) ∧ (between Q A x)) ∧ (A x ≡ B C)) ∧ (between Q A y)) (A y ≡ B C) ConjunctionRightElimination
        eliminateRightConjunctionInConsequent
        eliminateLeftConjunctionInConsequent
</jh>
And then that it implies <code>A y ≡ B C</code>.
<jh>
        ((((Q ≠ A) ∧ (between Q A x)) ∧ (A x ≡ B C)) ∧ (between Q A y)) (A y ≡ B C) ConjunctionLeftElimination
</jh>
We apply symmetry to turn that into <code>B C ≡ A y</code>.
<jh>
        swapCongruenceInConsequent
</jh>
We combine the two to get <code>A x ≡ B C ∧ B C ≡ A y</code>, and apply transitivity to finish.
<jh>
        composeConjunction

        A x B C A y CongruenceTransitivity
        applySyllogism
))
</jh>
The next lemma shows <code>Q x ≡ Q y</code>.
<jh>
thm (SegmentConstructionUniquenessQxQy () () ((((((Q ≠ A) ∧ (between Q A x)) ∧ (A x ≡ B C)) ∧ (between Q A y)) ∧ (A y ≡ B C)) → (Q x ≡ Q y)) (
</jh>
To apply <code>OuterThreeSegment</code> we need four things. The first is <code>between Q A x</code>.
<jh>
        ((((Q ≠ A) ∧ (between Q A x)) ∧ (A x ≡ B C)) ∧ (between Q A y)) (A y ≡ B C) ConjunctionRightElimination
        eliminateRightConjunctionInConsequent
        eliminateRightConjunctionInConsequent
        eliminateLeftConjunctionInConsequent
</jh>
The second is <code>between Q A y</code>.
<jh>
        ((((Q ≠ A) ∧ (between Q A x)) ∧ (A x ≡ B C)) ∧ (between Q A y)) (A y ≡ B C) ConjunctionRightElimination
        eliminateLeftConjunctionInConsequent

        composeConjunction
</jh>
The third is <code>Q A ≡ Q A</code>.
<jh>
        Q A CongruenceReflexivity
        (((((Q ≠ A) ∧ (between Q A x)) ∧ (A x ≡ B C)) ∧ (between Q A y)) ∧ (A y ≡ B C)) introduceAntecedent

        composeConjunction
</jh>
The fourth is <code>A x ≡ A y</code>.
<jh>
        Q A x B C y SegmentConstructionUniquenessAxAy

        composeConjunction
</jh>
Applying <code>OuterThreeSegment</code> we are done.
<jh>
        Q A x Q A y OuterThreeSegment
        applySyllogism
))
</jh>

The next lemma gets us most of the way. It shows <code>x x ≡ x y</code>.
<jh>
thm (SegmentConstructionUniquenessxxxy () () ((((((Q ≠ A) ∧ (between Q A x)) ∧ (A x ≡ B C)) ∧ (between Q A y)) ∧ (A y ≡ B C)) → (x x ≡ x y)) (
</jh>
We'll be applying <code>OuterFiveSegment</code> which has seven antecedents. The first two we can do together, <code>Q ≠ A ∧ between Q A x</code>.
<jh>
        ((((Q ≠ A) ∧ (between Q A x)) ∧ (A x ≡ B C)) ∧ (between Q A y)) (A y ≡ B C) ConjunctionRightElimination
        eliminateRightConjunctionInConsequent
        eliminateRightConjunctionInConsequent
</jh>
The next is <code>between Q A x</code>.
<jh>
        ((((Q ≠ A) ∧ (between Q A x)) ∧ (A x ≡ B C)) ∧ (between Q A y)) (A y ≡ B C) ConjunctionRightElimination
        eliminateRightConjunctionInConsequent
        eliminateRightConjunctionInConsequent
        eliminateLeftConjunctionInConsequent

        composeConjunction
</jh>
We now need four congruences. The first is <code>Q A ≡ Q A</code>.
<jh>
        Q A CongruenceReflexivity
        (((((Q ≠ A) ∧ (between Q A x)) ∧ (A x ≡ B C)) ∧ (between Q A y)) ∧ (A y ≡ B C)) introduceAntecedent

        composeConjunction
</jh>
The second congruence is <code>A x ≡ A x</code>.
<jh>
        A x CongruenceReflexivity
        (((((Q ≠ A) ∧ (between Q A x)) ∧ (A x ≡ B C)) ∧ (between Q A y)) ∧ (A y ≡ B C)) introduceAntecedent

        composeConjunction
</jh>
The third congruence is <code>Q x ≡ Q y</code>.
<jh>
        Q A x B C y SegmentConstructionUniquenessQxQy
        composeConjunction
</jh>
The fourth congruence is <code>A x ≡ A y</code>.
<jh>
        Q A x B C y SegmentConstructionUniquenessAxAy
        composeConjunction
</jh>
We are ready to apply <code>OuterFiveSegment</code>.
<jh>
        Q A x Q A x x y OuterFiveSegment
        applySyllogism
))
</jh>

The final theorem is only a small step further.
<jh>
thm (SegmentConstructionUniqueness () () ((((((Q ≠ A) ∧ (between Q A x)) ∧ (A x ≡ B C)) ∧ (between Q A y)) ∧ (A y ≡ B C)) → (x = y)) (
        Q A x B C y SegmentConstructionUniquenessxxxy
        x x y CongruenceIdentityLeft
        applySyllogism
))
</jh>

== Export ==
We now export to [[Interface:Line segment congruence]].
<jh>
export (RESULTS Interface:Line_segment_congruence (CLASSICAL FIRSTORDER) ())
</jh>

== References ==
<references/>

{{DEFAULTSORT:{{PAGENAME}}}}
[[Category:Euclidean geometries (general) and generalizations]]
[[Category:Foundations of classical theories (including reverse mathematics)]]
