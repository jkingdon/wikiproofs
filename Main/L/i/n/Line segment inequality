{{interfaces
| imports = [[Interface:Connectivity for betweenness]]
| exports = [[Interface:Line segment inequality]]
}}

This is part of a series of modules which prove a variety of geometrical theorems starting with Tarski's axioms for geometry. We follow the formalization of Julien Narboux<ref>The formal proofs are at [http://www.lix.polytechnique.fr/Labo/Julien.Narboux/tarski.html Formalization of Tarski's geometry in the Coq proof assistant] and are described in Julien Narboux (2007), "[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.158.8614 Mechanical Theorem Proving in Tarski’s Geometry]", F. Botana and T. Recio (Eds.): ADG 2006, LNAI 4869, pp. 139–156</ref> which itself closely follows a treatise by Schwabhäuser, Szmielew, and Tarski.<ref>W. Schwabhäuser, W Szmielew, and A. Tarski (1983), ''Metamathematische Methoden in der Geometrie'', ISBN 0387129588</ref>

This file contains several corollaries to outer connectivity for betweenness (which was proved in [[Connectivity for betweenness]]), a few lemmas, and results relating to line segments being shorter than others.

We import the theorems of [[Interface:Classical propositional calculus|propositional logic]] and [[Interface:First-order logic with quantifiability|predicate logic]], and the [[Interface:Connectivity for betweenness|geometry results so far]] and define some variables:
<jh>
import (CLASSICAL Interface:Classical_propositional_calculus () ())
import (FIRSTORDER Interface:First-order_logic_with_quantifiability (CLASSICAL) ())
import (START Interface:Connectivity_for_betweenness (CLASSICAL FIRSTORDER) ())

var (point A B C D E F P Q R A′ B′ C′ D′ B″ C″)
var (variable e f)
</jh>

== Corollaries of outer connectivity for betweenness ==

=== Middle connectivity ===
This one is just like outer connectivity except that the consequent is <code>between B C D ∨ between B D C</code> instead of <code>between A C D ∨ between A D C</code>.<ref>Lemma l5_2 in Narboux</ref>

<jh>
thm (BetweennessMiddleConnectivity-bcd () ()
  (((((A ≠ B) ∧ (between A B C)) ∧ (between A B D)) ∧ (between A C D)) → (between B C D)) (
        (((A ≠ B) ∧ (between A B C)) ∧ (between A B D))
          (between A C D)
          ConjunctionRightElimination
        eliminateRightConjunctInConsequent
        eliminateLeftConjunctInConsequent

        (((A ≠ B) ∧ (between A B C)) ∧ (between A B D))
          (between A C D)
          ConjunctionLeftElimination

        composeConjunction

        A B C D BetweennessInnerTransitivityFlipped
        applySyllogism
))

thm (BetweennessMiddleConnectivity-bdc () ()
  (((((A ≠ B) ∧ (between A B C)) ∧ (between A B D)) ∧ (between A D C)) →
  (between B D C)) (
        (((A ≠ B) ∧ (between A B C)) ∧ (between A B D))
          (between A D C)
          ConjunctionRightElimination
        eliminateLeftConjunctInConsequent

        (((A ≠ B) ∧ (between A B C)) ∧ (between A B D))
          (between A D C)
          ConjunctionLeftElimination

        composeConjunction

        A B D C BetweennessInnerTransitivityFlipped
        applySyllogism
))

thm (BetweennessMiddleConnectivity () () ((((A ≠ B) ∧ (between A B C)) ∧ (between A B D)) → ((between B C D) ∨ (between B D C))) (
        A B C D BetweennessOuterConnectivity

        A B C D BetweennessMiddleConnectivity-bcd

        (between B C D) (between B D C) DisjunctionRightIntroduction
        applySyllogism
        export

        A B C D BetweennessMiddleConnectivity-bdc

        (between B D C) (between B C D) DisjunctionLeftIntroduction
        applySyllogism
        export

        composeConjunction

        (between A C D)
          ((between B C D) ∨ (between B D C))
          (between A D C)
          DisjunctionComposition
        eliminateBiconditionalReverse
        applySyllogism

        applyModusPonensInConsequent
))
</jh>

=== Inner connectivity ===
In this section we prove <code>between A B D ∧ between A C D → between A B C ∨ between A C B</code>.<ref>l5_3 in Narboux</ref><ref>Axiom 17 on page 186 of Tarski and Givant (1999)</ref> The proof is in terms of outer connectivity.
<jh>
thm (BetweennessInnerConnectivity-1 ((e A) (e B) (e C) (e D)) ()
  (((between A B D) ∧ (between A C D)) → (∃ e (((between A B D) ∧ (between A C D)) ∧ ((between D A (value e)) ∧ (A ≠ (value e)))))) (
        ((between A B D) ∧ (between A C D)) ImplicationReflexivity
</jh>
We extend the line segment <code>D A</code> to a distinct point <code>e</code>.
<jh>
        e D A PointConstructionDifferent
</jh>
That gives us <code>∃ e (between D A e ∧ A ≠ e)</code>.
<jh>
        introduceRightConjunctToConsequent

        e
          ((between A B D) ∧ (between A C D))
          ((between D A (value e)) ∧ (A ≠ (value e)))
          ThereExistsConjunctionMovement
        eliminateBiconditionalForward
        applySyllogism
))

thm (BetweennessInnerConnectivity-eab () ()
  ((((between A B D) ∧ (between A C D)) ∧ ((between D A E) ∧ (A ≠ E))) → (between E A B)) (
        ((between A B D) ∧ (between A C D)) ((between D A E) ∧ (A ≠ E)) ConjunctionLeftElimination
        eliminateRightConjunctInConsequent

        D A E BetweennessSymmetry
        eliminateBiconditionalReverse
        applySyllogism

        ((between A B D) ∧ (between A C D)) ((between D A E) ∧ (A ≠ E)) ConjunctionRightElimination
        eliminateRightConjunctInConsequent

        composeConjunction

        E A D B BetweennessInnerTransitivity
        applySyllogism
))

thm (BetweennessInnerConnectivity-eac () ()
  ((((between A B D) ∧ (between A C D)) ∧ ((between D A E) ∧ (A ≠ E))) → (between E A C)) (
        ((between A B D) ∧ (between A C D)) ((between D A E) ∧ (A ≠ E)) ConjunctionLeftElimination
        eliminateRightConjunctInConsequent

        D A E BetweennessSymmetry
        eliminateBiconditionalReverse
        applySyllogism

        ((between A B D) ∧ (between A C D)) ((between D A E) ∧ (A ≠ E)) ConjunctionRightElimination
        eliminateLeftConjunctInConsequent

        composeConjunction

        E A D C BetweennessInnerTransitivity
        applySyllogism
))

thm (BetweennessInnerConnectivity-abc-acb () ()
  ((((between A B D) ∧ (between A C D)) ∧ ((between D A E) ∧ (A ≠ E))) → ((between A B C) ∨ (between A C B))) (
</jh>
To apply middle transitivity, we first need <code>E ≠ A</code>.
<jh>
        ((between A B D) ∧ (between A C D)) ((between D A E) ∧ (A ≠ E)) ConjunctionLeftElimination
        eliminateLeftConjunctInConsequent

        A E EqualitySymmetry
        addNegation
        eliminateBiconditionalReverse
        applySyllogism
</jh>
Then we need <code>between E A B</code> and <code>between E A C</code>.
<jh>
        A B D C E BetweennessInnerConnectivity-eab
        composeConjunction

        A B D C E BetweennessInnerConnectivity-eac
        composeConjunction

        E A B C BetweennessMiddleConnectivity
        applySyllogism
))

thm (BetweennessInnerConnectivity ( (e A) (e B) (e C) (e D)) ()
  (((between A B D) ∧ (between A C D)) → ((between A B C) ∨ (between A C B))) (
        A B D C e BetweennessInnerConnectivity-1

        A B D C (value e) BetweennessInnerConnectivity-abc-acb
        e addThereExists
        applySyllogism

        removeThereExistsInConsequent
))
</jh>

== Line segment inequality ==
Here we define a formula <code>A B ≤ C D</code> to mean that the line segment <code>A B</code> is shorter than or the same length as <code>C D</code>

=== Definition ===
We define <code>A B ≤ C D</code> to mean that there is a point <code>e</code> in the line segment <code>C D</code> which cuts off a portion of <code>C D</code> which is congruent to <code>A B</code>.<ref>Definition le in Narboux</ref>
<jh>
def ((≤ A B C D) (∃ e ((between C (value e) D) ∧ (A B ≡ C (value e)))))
</jh>

We define <code>≥</code> as just <code>≤</code> with the two sides interchanged.<ref>Definition ge in Narboux</ref>
<jh>
def ((≥ A B C D) (C D ≤ A B))
</jh>

=== An alternate definition ===
We could just as well define <code>A B ≤ C D</code> to mean that it is possible to extend <code>A B</code> to a point to produce a line segment which is congruent to <code>C D</code>. In this section we prove that this definition is equivalent to the one in the previous section.

We first tackle the forward implication. From the definition of <code>A B ≤ C D</code>, there is a point <code>E</code> between <code>C</code> and <code>D</code> such that <code>A B ≡ C E</code>. We then extend the line segment <code>A B</code> to a point <code>F</code> such that <code>C E D ≅ A B F</code>. By <code>BetweennessDegenerateTriangle</code>, <code>between A B F</code>.<ref>lemma l5_5_1 in Narboux</ref>
<jh>
#thm (LessEqualExtensionForward ((f A) (f B) (f C) (f D)) ()
#  ((A B ≤ C D) → (∃ f ((between A B (value f)) ∧ (A (value f) ≡ C D)))) (
#))
</jh>

== Export ==
We now export to [[Interface:Line segment inequality]].
<jh>
#export (RESULTS Interface:Line_segment_inequality (CLASSICAL FIRSTORDER) ())
</jh>

== References ==
<references/>
* Tarski, Alfred; Givant, Steven (1999), "Tarski's system of geometry", The Bulletin of Symbolic Logic 5 (2): 175–214, doi:10.2307/421089, MR1791303, ISSN 1079-8986

{{DEFAULTSORT:{{PAGENAME}}}}
[[Category:Euclidean geometries (general) and generalizations]]
[[Category:Foundations of classical theories (including reverse mathematics)]]