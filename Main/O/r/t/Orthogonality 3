{{interfaces
| imports = [[Interface:Orthogonality 2]]
| exports = none yet
}}

This is part of a series of modules which prove a variety of geometrical theorems starting with Tarski's axioms for geometry. We follow the formalization of Julien Narboux<ref>The formal proofs are at [http://www.lix.polytechnique.fr/Labo/Julien.Narboux/tarski.html Formalization of Tarski's geometry in the Coq proof assistant] and are described in Julien Narboux (2007), "[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.158.8614 Mechanical Theorem Proving in Tarski’s Geometry]", F. Botana and T. Recio (Eds.): ADG 2006, LNAI 4869, pp. 139–156</ref> which itself closely follows a treatise by Schwabhäuser, Szmielew, and Tarski.<ref>W. Schwabhäuser, W Szmielew, and A. Tarski (1983), ''Metamathematische Methoden in der Geometrie'', ISBN 0387129588</ref>

This page is one of several involving perpendicular lines. We start with some theorems about the <code>⟂</code> (is perpendicular) predicate.

We import the theorems of [[Interface:Classical propositional calculus|propositional logic]] and [[Interface:First-order logic with quantifiability|predicate logic]], and the [[Interface:Orthogonality 1|geometry results so far]] and define some variables:
<jh>
import (CLASSICAL Interface:Classical_propositional_calculus () ())
import (FIRSTORDER Interface:First-order_logic_with_quantifiability (CLASSICAL) ())
import (START Interface:Orthogonality_2 (CLASSICAL FIRSTORDER) ())

var (point A B C D E F M P Q R S U V X Y Z)
var (point U0 V0)
var (point A′ B′ C′ D′ E′ M′ P′ Q′ R′ S′ X′ Y′)
var (point C″)
var (variable a a′ b b′ c c′ c″ d d′ e e′ f p p′ q r r′ u u′ v v′ x x′ y y′ z)
var (variable u0 v0)
</jh>

== Perpendicular lines ==
Saying that lines are perpendicular at a point is the main step towards saying those lines are perpendicular. The connection is pretty simple: <code>A B ⟂ C D</code> is defined as <code>∃ x A B C D ⟂at x</code>.
<jh>
def ((⟂ A B C D) (∃ x (A B C D ⟂at (value x))))
</jh>

=== Theorem form of the definition ===
As usual, we need a theorem corresponding to the definition.
<jh>
thm (Perpendicular ((x′ x A) (x′ x B) (x′ x C) (x′ x D)) ()
  ((⟂ A B C D) ↔ (∃ x (A B C D ⟂at (value x)))) (
        A EqualityReflexivity
        B EqualityReflexivity
        C EqualityReflexivity
        D EqualityReflexivity
        A A B B C C D D (value x′) (value x) PerpendicularAtBuilder
        detach2of3
        detach2of3
        detach2of3
        detach1of2

        ChangeVariableThereExists
))
</jh>

=== No line is perpendicular to itself ===
Here we show <code>¬ A B ⟂ A B</code>. The interesting part of the proof was already done as <code>PerpendicularIrreflexivityAt</code>.<ref>l8_14_1 in Narboux</ref>
<jh>
thm (PerpendicularIrreflexivity () () (¬ (A B ⟂ A B)) (
        A B (value x) PerpendicularIrreflexivityAt
        x generalize

        x (A B A B ⟂at (value x)) NotThereExists
        eliminateBiconditionalForward
        applyModusPonens
))
</jh>

=== Being perpendicular at any point implies being perpendicular ===
That is, <code>A B C D ⟂at X → A B ⟂ C D</code>.<ref>l8_14_2_1a in Narboux</ref>
<jh>
thm (PerpendicularAtPerpendicular ( (x A) (x B) (x C) (x D) (x X)) ()
  ((A B C D ⟂at X) → (A B ⟂ C D)) (
        A EqualityReflexivity
        B EqualityReflexivity
        C EqualityReflexivity
        D EqualityReflexivity
        A A B B C C D D (value x) X PerpendicularAtBuilder
        detach2of3
        detach2of3
        detach2of3
        detach1of2

        makeSubstExplicit

        eliminateBiconditionalForward

        X x (A B C D ⟂at (value x)) ThereExistsIntroductionFromObject
        applySyllogism
))
</jh>

=== Uniqueness of intersection point ===
If two lines are perpendicular at a point, they intersect only at that point. In symbols, <code>A B C D ⟂at X ∧ collinear Y A B ∧ collinear Y C D → X = Y</code>.<ref>l8_14_2_1b in Narboux</ref>

To prove this we first show <code>is-right-angle Y X Y</code> which follows directly from the <code>∀ p ∀ q (collinear p A B ∧ collinear q C D → is-right-angle p X q)</code> part of <code>PerpendicularAt</code>.
<jh>
thm (PerpendicularAtUniqueIntersection-Y-X-Y ( (p q A) (p q B) (p q C) (p q D) (p q X) (p q Y)) ()
  ((((A B C D ⟂at X) ∧ (collinear Y A B)) ∧ (collinear Y C D)) → (is-right-angle Y X Y)) (
</jh>
Towards the end of the proof, we'll need <code>A B C D ⟂at X ∧ collinear Y A B ∧ collinear Y C D → collinear Y A B ∧ collinear Y C D</code>. So we stick this on the proof stack.
<jh>
        ((A B C D ⟂at X) ∧ (collinear Y A B)) (collinear Y C D) ConjunctionRightElimination
        eliminateLeftConjunctInConsequent

        ((A B C D ⟂at X) ∧ (collinear Y A B)) (collinear Y C D) ConjunctionLeftElimination

        composeConjunction
</jh>
Leaving that aside, we now expand <code>⟂at</code> and pick out the part we care about.
<jh>
        ((A B C D ⟂at X) ∧ (collinear Y A B)) (collinear Y C D) ConjunctionRightElimination
        eliminateRightConjunctInConsequent

        A B C D X p q PerpendicularAt
        eliminateBiconditionalReverse
        applySyllogism

        eliminateLeftConjunctInConsequent

        Y specializeToObjectInConsequent
</jh>
The consequent is now <code>[ Y / p ] ∀ q (collinear p A B ∧ collinear q C D → is-right-angle p X q)</code>, so we next perform the substitution.
<jh>
        B EqualityReflexivity
        A EqualityReflexivity
        (value p) Y A A B B CollinearityBuilder
        detach2of3
        detach2of2

        (collinear (value q) C D) buildConjunctionRRInConsequent

        (value q) EqualityReflexivity
        X EqualityReflexivity
        (value p) Y X X (value q) (value q) RightAngleBuilder
        detach2of3
        detach2of2

        buildImplicationInConsequent

        q buildForAllInConsequent

        makeSubstExplicit
        eliminateBiconditionalReverse
        applySyllogism

        Y specializeToObjectInConsequent
</jh>
The consequent is <code>[ Y / q ] (collinear Y A B ∧ collinear q C D → is-right-angle Y X q)</code>, so again we perform the substitution.
<jh>
        D EqualityReflexivity
        C EqualityReflexivity
        (value q) Y C C D D CollinearityBuilder
        detach2of3
        detach2of2

        (collinear Y A B) buildConjunctionLLInConsequent

        Y EqualityReflexivity
        X EqualityReflexivity
        Y Y X X (value q) Y RightAngleBuilder
        detach2of3
        detach1of2

        buildImplicationInConsequent

        makeSubstExplicit
        eliminateBiconditionalReverse
        applySyllogism
</jh>
Now we have <code>A B C D ⟂at X ∧ collinear Y A B ∧ collinear Y C D → (collinear Y A B ∧ collinear Y C D → is-right-angle Y X Y)</code> and we want something which is similar, but which only mentions each collinearity antecedent once.
<jh>
        applyModusPonensInConsequent
))
</jh>

From <code>is-right-angle Y X Y</code>, it is a short step to <code>X = Y</code>.
<jh>
thm (PerpendicularAtUniqueIntersection () ()
  ((((A B C D ⟂at X) ∧ (collinear Y A B)) ∧ (collinear Y C D)) → (X = Y)) (
        A B C D X Y PerpendicularAtUniqueIntersection-Y-X-Y

        Y X RightAngleLegItself
        applySyllogism

        swapEqualityInConsequent
))
</jh>

== Perpendicular lines which intersect are perpendicular at that point ==
If two lines are perpendicular and they intersect at a point, they are perpendicular at that point. In symbols, <code>A B ⟂ C D ∧ collinear X A B ∧ collinear X C D → A B C D ⟂at X</code>.<ref>l8_14_2_1b_bis in Narboux</ref>

The proof is a straightforward application of <code>PerpendicularAtUniqueIntersection<code>. We start with a lemma performing a substitution.

<jh>
thm (PerpendicularIntersectionPerpendicularAt-1 () ()
  ((((A B C D ⟂at Y) ∧ (collinear X A B)) ∧ (collinear X C D)) → (A B C D ⟂at X)) (
</jh>
We'll put <code>A B C D ⟂at Y</code> on the proof stack for later.
<jh>
        ((A B C D ⟂at Y) ∧ (collinear X A B))
          (collinear X C D)
          ConjunctionRightElimination
        eliminateRightConjunctInConsequent
</jh>
We start with <code>Y = X</code>.
<jh>
        A B C D Y X PerpendicularAtUniqueIntersection
</jh>
Then <code>Y = X → (A B C D ⟂at Y → A B C D ⟂at X)</code> by a substitution.
<jh>
        A EqualityReflexivity
        B EqualityReflexivity
        C EqualityReflexivity
        D EqualityReflexivity
        A A B B C C D D Y X PerpendicularAtBuilder
        detach2of3
        detach2of3
        detach2of3
        detach1of2
        eliminateBiconditionalReverseInConsequent

        applySyllogism
</jh>
That's all we need.
<jh>
        applyModusPonensInConsequent
))

thm (PerpendicularIntersectionPerpendicularAt
  ((y A) (y B) (y C) (y D) (y X)) ()
  ((((A B ⟂ C D) ∧ (collinear X A B)) ∧ (collinear X C D)) →
    (A B C D ⟂at X)) (
</jh>
We first expand <code>A B ⟂ C D</code> to <code>∃ y A B C D ⟂at y</code>
<jh>
        A B C D y Perpendicular
        eliminateBiconditionalReverse
        (collinear X A B) conjoinRR
        moveRightConjunctIntoThereExistsInConsequent
        (collinear X C D) conjoinRR
        moveRightConjunctIntoThereExistsInConsequent
</jh>
Our lemma then gives us <code>A B C D ⟂at X</code>
<jh>
        A B C D (value y) X PerpendicularIntersectionPerpendicularAt-1
        y addThereExists
        applySyllogism

        removeThereExistsInConsequent
))
</jh>

== References ==
<references/>
* Tarski, Alfred; Givant, Steven (1999), "Tarski's system of geometry", The Bulletin of Symbolic Logic 5 (2): 175–214, doi:10.2307/421089, MR1791303, ISSN 1079-8986

{{DEFAULTSORT:{{PAGENAME}}}}
[[Category:Euclidean geometries (general) and generalizations]]
[[Category:Foundations of classical theories (including reverse mathematics)]]
