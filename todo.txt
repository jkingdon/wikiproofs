Items which may be doable without a network connection:

* look at whether Raph's proof of ceqsex simplifies our development
  (I think it might enable omitting a bunch of strange little
  theorems).
  - the proof does need Quantifiability but nothing else we don't have.
  - ceqsex is ImplicitThereExists.
    - ImplicitSubstitutionThereExists
      - ImplicitSubstitutionForAll
        - ax9oc (see also equs4c)
          - ax6o (see also NegationNotFree, ax9o)
        - a5i
  - ceqsex also has the distinct variable constraint x s.

  * ax9o is only used by equs4.

* Set theory
  - definitions and consequences: union?,
    intersection, difference (e.g. eldifi and similar), subset
  - do both directions of A = B ↔ { A } = { B } hold? (think so)
  - indexed union or intersection? (if needed for functions)
  - prove Peano axioms from them
    - suc11
  - finite induction (e.g. peano5 in set.mm)
  - functions and relations (e.g. cxp and following in set.mm)
    - binary relations.
      - releq
      (mkrelation a A b B φ) (A, B object; a, b variable; φ formula)
        ≝ {〈a, b〉| a ∈ A ∧ b ∈ B ∧ φ }
        e.g. (mkrelation a ℕ b ℕ (∃ n ∈ ℕ a + n = b))
      - (relates s (mkrelation a A b B φ) t) ↔ [s / a][t / b]φ  (probably some distinct)
    - domain and range: dfdm3 and dfrn2 or some such (need to prove existence)
      - dmeq
      - breldm, brelrn
      - (domain (mkrelation a A b B φ)) ⊆ A
      - (range (mkrelation a A b B φ)) ⊆ B
    - functions
      - dffun2 (how to deal with the distinct variables?), funrel
      (lambda x t)
        e.g. (lambda x A 〈x, 1〉)
        ≝ {〈x, result〉| x ∈ A ∧ result = t }
      - [s / x](apply (lambda x A t) s) = t
        this reads oddly, because [/] only applies to formulas, not terms
        (metamath has underlined [/] for terms; do we want that?)
    - cross products, e.g. cxp, df-xp, elxp, opelxp1, opelxp
      xpexg regarding existence of cross products
        relies on xpsspw
        Also note dependence on defn of ordered pair.
      A × B ≝ {z ∈ 𝒫𝒫(A ∪ B) | ∃ a ∃ b z = 〈a, b〉 ∧ a ∈ A ∧ b ∈ B}
        then the interesting part is proving opelxp, elxp, or something else useful

ssun3: A ⊆ B → A ⊆ B ∪ C SubsetUnionRightIntroduction

        a substitution could turn MembershipCartesianProductLemma into:
          z = 〈a, b〉 ∧ a ∈ A ∧ b ∈ B → z ∈ 𝒫𝒫(A ∪ B)
        in case that is helpful

        ∃ a ∃ b (z = 〈a, b〉 ∧ a ∈ A ∧ b ∈ B) → z ∈ 𝒫𝒫(A ∪ B)


        (φ → z ∈ A) → (y ∈ {z ∈ A | φ} ↔ [y / z]φ)  (could be helpful but has the subst)
          then next step is y ∈ A × B ↔ [y / z](z = ∃ a ∃ b〈a, b〉 ∧ a ∈ A ∧ b ∈ B)
          then y ∈ A × B ↔ ∃ a ∃ b (y = 〈a, b〉 ∧ a ∈ A ∧ b ∈ B) (elxp)
          and/or 〈a, b〉 ∈ A × B ↔ a ∈ A ∧ b ∈ B  (opelxp)
      - (relation A) ↔ ∃ x ∃ y A ⊆ x × y
  - recursion theorem (see downloaded wikipedia page, Joedit)
    = frfnom and friends in set.mm
      - e.g. http://us.metamath.org/mpeuni/df-rdg.html

* Needed to derive geometry axioms from reals (page 201 of Givant1999)
  - cartesian products
  - subtraction
  - ≤ for reals (defined in terms of <)
  - (x - y) · (x - y) = (y - x) · (y - x) (needed to prove CongruenceABBA)
  - builders for +, ·
  - For CongruenceIdentity
    • x - x = 0
    • x - y = 0 → x = y
    • x ∈ ℝ → 0 ≤ x · x
    • 0 ≤ x ∧ 0 ≤ y ∧ x + y = 0 → x = 0 (or some such)
  - For Indivisibility
    • (x - y) · (y - x) ≤ 0
    • antisymmetry
    • (x - y) · (y - x) = 0 → x = y (follows from x · y = 0 → x = 0 or y = 0)

* Probably worth a convenience theorem for  ThereExistsConjunctionRightMovement +
 eliminateBiconditionalForward +
 applySyllogism

* Is there a metamath equivalent of Separation? In particular, I'm curious about
whether the distinct variable constraints turn out the same.
  - rabid is sort of a special case

To do with network:

* notation for congruent angles. Convention is ∠ABC ≅ ∠DEF, right?  Then maybe (A B C ∠≅ D E F) for us?

* rename IndivisibilityBidirectional to IndivisibilityBiconditional, I think.

* Continue changing CongruenceIdentityFromEquality to be the imported version.

* Throughout First-order logic with quantifiability (and probably First-order logic), add spaces (e.g. change ∃xφ to ∃ x φ).

* In the sandbox experiment about changing the universe of
quantification, why do we need separate kinds, separate subst,
etc? Can we just have ∀ and ∃ be separate?

