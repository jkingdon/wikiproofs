{{modules
| parameters = [[Interface:Classical propositional calculus|Classical propositional calculus]], [[Interface:First-order logic with quantifiability|first-order logic]]
| importedby = none yet
| exportedby = [[Relations]]
}}

This page will eventually cover as much of set theory as is generally used in the bulk of mathematics: empty set, singletons, unordered and ordered pairs, relations, functions, subset, union, intersection, etc.

We build on [[Interface:Classical propositional calculus|propositional logic]] and [[Interface:First-order logic with quantifiability|first-order logic]] (including equality):

<jh>
param (CLASSICAL Interface:Classical_propositional_calculus () ())
param (FIRSTORDER Interface:First-order_logic_with_quantifiability (CLASSICAL) ())
</jh>

== Variables (sets) and objects (classes) ==
First-order logic provides us with two kinds: <code>variable</code> is a variable, which represents a set and can be quantified over, and <code>object</code> is an expression which represents a set. For example, a variable might be <code>x</code>, <code>y</code>, or <code>z</code>, but an object could be the singleton <code>{ x }</code>, the unordered pair <code>{ x, y }</code>, the ordered pair <code>〈 x, y 〉</code>, etc. To some extent the concepts of variable and object correspond to set and class in some theories (like metamath's set.mm), but one key difference is that we have no [[w:proper class|proper classes]] thanks to the [[Interface:Axiom of quantifiability|axiom of quantifiability]].

<jh>
var (variable x y z w)
var (object A B C A0 A1 B0 B1)
</jh>

== Set membership ==
We can test whether one set is an element of another, and define an abbreviation for the negated version.
<jh>
term (formula (∈ object object))
def ((∉ A B) (¬ (A ∈ B)))
</jh>

== Empty set ==
We assert the existence of the empty set, a set with no elements.
<jh>
term (object (∅))
stmt (EmptySet () () (A ∉ (∅)))
</jh>

== Singleton ==
Given a set, we can form a set <code>{ s }</code> which has only it as an element.<ref>[http://us.metamath.org/mpeuni/elsncg.html elsncg], metamath's set.mm, accessed August 7, 2010</ref>
<jh>
term (object (singleton object))
stmt (Singleton () () ((A ∈ (singleton B)) ↔ (A = B)))
</jh>

A set is an element of its singleton: <code>A ∈ {A}</code>.<ref>[http://us.metamath.org/mpeuni/snid.html snid], metamath's set.mm, accessed August 5, 2010</ref>
<jh>
stmt (SingletonMembership () () (A ∈ (singleton A)))
</jh>

== Unordered pair ==
Given two sets, we can form a unordered pair <code>{ s, t }</code> which has only those sets as elements.
<jh>
term (object (unorderedPair object object))
stmt (UnorderedPair () () ((B ∈ (unorderedPair A0 A1)) ↔ ((B = A0) ∨ (B = A1))))
</jh>

An unordered pair contains each of its members: <code>A ∈ {A, B}</code>.
<jh>
stmt (UnorderedPairLeftMembership () () (A ∈ (unorderedPair A B)))
</jh>

Unordered pairs are unordered: <code>{A, B} = {B, A}</code>.
<jh>
stmt (UnorderedPairCommutativity () () ((unorderedPair A B) = (unorderedPair B A)))
</jh>

Unordered pair equality can imply equality of members: <code>{A, C} = {B, C} → A = B</code>,<ref>[http://us.metamath.org/mpeuni/preqr1.html preqr1], metamath's set.mm, accessed August 4, 2010</ref> and likewise if the unordered pairs are commuted.

<jh>
stmt (UnorderedPairFirstMembersEqual () () (((unorderedPair A C) = (unorderedPair B C)) → (A = B)))
stmt (UnorderedPairSecondMembersEqual () () (((unorderedPair C A) = (unorderedPair C B)) → (A = B)))
</jh>

== Ordered pair ==
An ordered pair has a first element and a second element, and two ordered pairs are equal if and only if their first elements are equal and their second elements are equal.
<jh>
term (object (orderedPair object object))
stmt (OrderedPairTheorem () () (((orderedPair A0 B0) = (orderedPair A1 B1)) ↔ ((A0 = A1) ∧ (B0 = B1))))
</jh>

== Relations ==
A relation is a set of ordered pairs. We define <code>relation A</code> as a formula meaning "A is a relation".
<jh>
term (formula (relation object))
stmt (Relation ((x y z A)) ()
  ((relation A) ↔ (∀ z (((value z) ∈ A) → (∃ x (∃ y ((value z) = (orderedPair (value x) (value y)))))))))
</jh>

== Subset ==
The subset relationship is equivalent to various statements involving membership, unions, intersections, and set differences.<ref>[http://us.metamath.org/mpeuni/df-ss.html df-ss]</ref> For now, we just provide one.
<jh>
term (formula (⊆ object object))
stmt (Subset ((x A) (x B)) ()
  ((A ⊆ B) ↔ (∀ x (((value x) ∈ A) → ((value x) ∈ B)))))
</jh>

== Builders ==
Equals can be substituted for equals, in the context of set operations.

<jh>
stmt (IsElementBuilderLL () () ((B0 = B1) → ((A ∈ B0) ↔ (A ∈ B1))))
stmt (IsElementBuilderRR () () ((A0 = A1) → ((A0 ∈ B) ↔ (A1 ∈ B))))

stmt (SingletonBuilder () () ((A = B) → ((singleton A) = (singleton B))))

stmt (UnorderedPairBuilder () () (((A0 = B0) ∧ (A1 = B1)) → ((unorderedPair A0 A1) = (unorderedPair B0 B1))))
</jh>

== Extensionality ==
Sets with the same elements are equal.
<jh>
stmt (ExtensionalityObject ((A z) (B z)) () ((∀ z (((value z) ∈ A) ↔ ((value z) ∈ B))) → (A = B)))
</jh>

[[Category:Set theory|{{PAGENAME}}]]

