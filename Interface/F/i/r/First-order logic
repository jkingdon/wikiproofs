{{header
 | title    = First-order logic
 | subtitle = 
 | left     = 
 | right    = 
 | shortcut = 
 | notes    = This interface collects important theorems from first-order logic, which builds on [[Interface:Classical propositional calculus|propositional logic]] by adding quantifiers ("for all" and "there exists") and equality. It is meant as a user-friendly reservoir for those interfaces and proof modules which merely use first-order logic, without proving anything new within it. It does not include results which rely on the [[Interface:Axiom of quantifiability]]; many modules may wish to import [[Interface:First-order logic with quantifiability]] instead of this interface.

Statements can be added if necessary, but then the exporting modules have to be updated accordingly.
}}
{{modules
| parameters = [[Interface:Classical propositional calculus]]
| importedby = [[First-order logic with quantifiability]]
| exportedby = [[First-order logic]]
}}
== Formulas, objects, and quantification ==
We build on [[Interface:Classical propositional calculus]]:
<jh>
param (CLASSICAL Interface:Classical_propositional_calculus () ())
</jh>

By convention we use φ, ψ, χ, and θ to represent formulas:
<jh>
var (formula φ ψ χ θ)
</jh>

We also define some variables which suggest which variables are likely to occur in a formula. For example, <code>φx</code> is likely to include the variable <code>x</code> (of course, it is the distinct variable constraints which really specify what variables are allowed). This is similar in intent to the notation <code>φ(x)</code> which is sometimes used in treatments of predicate logic.
<jh>
var (formula φx φy ψy)
</jh>

We use the term ''object'' to refer to something which is subject to quantification or equality. From an axiomatic point of view, what is a valid object is defined implicitly, by axioms such as those of [[w:Zermelo–Fraenkel set theory|ZFC set theory]] or [[w:Peano axioms|Peano arithmetic]].

<jh>
kind (object)
var (object s t u s0 s1 t0 t1)
</jh>

A ''variable'' is something we can quantify over.

<jh>
kind (variable)
var (variable x y z x0 x1 y0 y1)
</jh>

A variable can be used where an object is expected, although it needs to be converted via the following explicit conversion.  When we are writing informally (rather than in JHilbert proofs themselves), we may omit the conversion (it should be understood whereever we use a variable in a context where an object is expected).
<jh>
term (object (value variable))
</jh>

The reverse is not possible.  Examples of objects which are not variables might be <code>s + t</code> for Peano arithmetic, or <code>s ∪ t</code> for set theory.

We extend the available formulas with [[w:Universal quantification|universal quantification]] and [[w:Existential quantification|existential quantification]]:
<jh>
term (formula (∀ variable formula))
term (formula (∃ variable formula))
</jh>

== Relationship between universal and existential quantification ==

<jh>
stmt (NotForAll () () ((¬ (∀ x φ)) ↔ (∃ x (¬ φ))))
stmt (NotThereExists () () ((¬ (∃ x φ)) ↔ (∀ x (¬ φ))))
</jh>

== Variations and consequences of double quantification elimination ==
<jh>
stmt (ax6o () () ((∃ x (∀ x φ)) → φ))
stmt (a5i () (((∀ x φ) → ψ)) ((∀ x φ) → (∀ x ψ)))
</jh>

== Builders for quantifiers ==
As with propositional calculus, we need to build up formulas explicitly, and these rules let us do it.  We provide them for both quantifiers, for implication and the biconditional.
<jh>
stmt (addForAll () ((φ → ψ)) ((∀ x φ) → (∀ x ψ)))
stmt (addThereExists () ((φ → ψ)) ((∃ x φ) → (∃ x ψ)))

stmt (buildForAll () ((φ ↔ ψ)) ((∀ x φ) ↔ (∀ x ψ)))
stmt (buildThereExists () ((φ ↔ ψ)) ((∃ x φ) ↔ (∃ x ψ)))
</jh>

=== Additional builders ===
Some of these builders rely on theorems we haven't presented yet, but they are similar to the simple ones above in terms of general intent.
<jh>
stmt (buildThereExistsInConsequent ((x φ)) 
  ((φ → (ψ ↔ χ)))
  (φ → ((∃ x ψ) ↔ (∃ x χ))))
stmt (buildForAllInConsequent ((x φ))
  ((φ → (ψ ↔ χ)))
  (φ → ((∀ x ψ) ↔ (∀ x χ))))
</jh>

== Order ==
The order of adjacent quantifiers of the same type can be exchanged:
<jh>
stmt (ForAllCommutation () () ((∀ x (∀ y φ)) ↔ (∀ y (∀ x φ))))
stmt (ThereExistsCommutation () () ((∃ x (∃ y φ)) ↔ (∃ y (∃ x φ))))
</jh>

∃ followed by ∀ can be switched:
<jh>
stmt (ThereExistsForAllCommutation () () ((∃ x (∀ y φ)) → (∀ y (∃ x φ))))
</jh>

but the converse is only possible in special cases:
<jh>
stmt (ForAllThereExistsImplicationCommutation ((x y) (ψ x) (φ y)) ()
  ((∃ x (∀ y (φ → ψ))) ↔ (∀ y (∃ x (φ → ψ))))
)
</jh>

== Combining quantified statements ==
Quantifiers of the same variable can sometimes be combined or split:
<jh>
stmt (ForAllConjunction () () ((∀ x (φ ∧ ψ)) ↔ ((∀ x φ) ∧ (∀ x ψ))))
stmt (ThereExistsDisjunction () () ((∃ x (φ ∨ ψ)) ↔ ((∃ x φ) ∨ (∃ x ψ))))
stmt (ThereExistsImplication () () ((∃ x (φ → ψ)) ↔ ((∀ x φ) → (∃ x ψ))))
stmt (ForAllImplication () () ((∀ x (φ → ψ)) → ((∀ x φ) → (∀ x ψ))))
stmt (ThereExistsConjunction () () ((∃ x (φ ∧ ψ)) → ((∃ x φ) ∧ (∃ x ψ))))
</jh>

We also provide rules for the above theorems:
<jh>
stmt (distributeForAllConjunction () ((∀ x (φ ∧ ψ))) ((∀ x φ) ∧ (∀ x ψ)))
stmt (collectForAllConjunction () ((∀ x φ) (∀ x ψ)) (∀ x (φ ∧ ψ)))

stmt (distributeThereExistsDisjunction () ((∃ x (φ ∨ ψ)))  ((∃ x φ) ∨ (∃ x ψ)))
stmt (collectThereExistsDisjunction () (((∃ x φ) ∨ (∃ x ψ))) (∃ x (φ ∨ ψ)))

stmt (distributeThereExistsImplication () ((∃ x (φ → ψ))) ((∀ x φ) → (∃ x ψ)))
stmt (collectThereExistsImplication () (((∀ x φ) → (∃ x ψ))) (∃ x (φ → ψ)))

stmt (distributeForAllImplication () ((∀ x (φ → ψ))) ((∀ x φ) → (∀ x ψ)))
</jh>

=== Biconditional ===
<jh>
stmt (ForAllBiconditional () () ((∀ x (φ ↔ ψ)) → ((∀ x φ) ↔ (∀ x ψ))))
</jh>

=== Other kinds of splits and combinations ===
<jh>
stmt (ForAllImplicationThereExists () () ((∀ x (φ → ψ)) → ((∃ x φ) → (∃ x ψ))))
stmt (ForAllBiconditionalThereExists () () ((∀ x (φ ↔ ψ)) → ((∃ x φ) ↔ (∃ x ψ))))

stmt (ThereExistsConjunctionCombining () ()
  (((∀ x φ) ∧ (∃ x ψ)) → (∃ x (φ ∧ ψ))))
stmt (ThereExistsConjunctionRightCombining () ()
  (((∃ x φ) ∧ (∀ x ψ)) → (∃ x (φ ∧ ψ))))
</jh>

== Generalization and specialization ==
We can remove a universal quantifier:
<jh>
stmt (Specialization () () ((∀ x φ) → φ))
stmt (specialize () ((∀ x φ)) φ)
</jh>

The converse is sometimes possible, but only with some restrictions. Either the variable does not occur in the formula, or the formula is unconditionally true:
<jh>
stmt (Generalization ((x φ)) () (φ → (∀ x φ)))
stmt (generalize () (φ) (∀ x φ))
</jh>

An existential quantifier can be added unconditionally,
<jh>
stmt (ThereExistsIntroduction () () (φ → (∃ x φ)))
</jh>

and can be removed if the variable does not occur in the formula.
<jh>
stmt (NullThereExists ((x φ)) () ((∃ x φ) ↔ φ))
stmt (removeThereExists ((x φ)) ((∃ x φ)) φ)
var (formula antecedent)
stmt (removeThereExistsInConsequent ((x φ)) ((antecedent → (∃ x φ))) (antecedent → φ))
</jh>

== Equality ==
Equality is reflexive, symmetry, and transitive.
<jh>
term (formula (= object object))
stmt (EqualityReflexivity () () (s = s))

stmt (EqualitySymmetry () () ((s = t) ↔ (t = s)))
stmt (swapEquality () ((s = t)) (t = s))

stmt (EqualityTransitivity () () (((s = t) ∧ (t = u)) → (s = u)))
stmt (applyEqualityTransitivity () ((s = t) (t = u)) (s = u))
</jh>

Here are convenience theorems which are closely related to those:
<jh>
stmt (applyEqualityTransitivityInConsequent () ((φ → (s = t)) (φ → (t = u))) (φ → (s = u)))
</jh>

There is also the principle of "equals can be substituted for equals". In our system, this is done via builders, and here we provide one for equals itself. Theories which build on first-order logic will provide builders for additional expressions such as <code>∈</code> (is an element of) for set theory or <code>+</code> (addition) for Peano arithmetic.
<jh>
stmt (EqualityBuilder () () (((s0 = s1) ∧ (t0 = t1)) → ((s0 = t0) ↔ (s1 = t1))))
stmt (buildEquality () ((s0 = s1) (t0 = t1)) ((s0 = t0) ↔ (s1 = t1)))
</jh>

We also supply a variety of variant builders, for convenience:
<jh>
stmt (EqualityBuilderRR () () ((s0 = s1) → ((s0 = t) ↔ (s1 = t))))
stmt (buildEqualityRR () ((s0 = s1)) ((s0 = t) ↔ (s1 = t)))

stmt (EqualityBuilderLL () () ((s0 = s1) → ((t = s0) ↔ (t = s1))))
stmt (buildEqualityLL () ((t0 = t1)) ((s = t0) ↔ (s = t1)))

stmt (buildEqualityInConsequent ()
  ((φ → (s0 = s1))
   (φ → (t0 = t1)))
  (φ → ((s0 = t0) ↔ (s1 = t1))))
stmt (buildEqualityRRInConsequent ()
  ((φ → (s0 = s1)))
  (φ → ((s0 = t) ↔ (s1 = t))))
stmt (buildEqualityLLInConsequent ()
  ((φ → (t0 = t1)))
  (φ → ((s = t0) ↔ (s = t1))))
</jh>

We also define <code>≠</code>, which is just an abbreviation for negation and equality.

<jh>
def ((≠ s t) (¬ (s = t)))
</jh>

== Free variables ==
We provide a variety of ways to prove that a variable is not [[w:free variable|free]] in a formula, and a variety of conclusions that follow from this. These theorems do not depend on the details of how <code>is-not-free-in</code> is defined, and there is no theorem that implies the negation of <code>is-not-free-in</code> for cases not covered here. In other words, <code>is-not-free-in</code> need not correspond exactly to the conventional definition of freeness, as long as it corresponds for the cases we need.

<jh>
term (formula (is-not-free-in variable formula))
</jh>

=== Showing a variable is free ===
A variable is not free in a formula if it does not occur in the formula:
<jh>
stmt (DistinctNotFree ((x φ)) () (x is-not-free-in φ))
</jh>

A variable is not free in a formula if it is bound by a quantifier:
<jh>
stmt (BoundForAllNotFree () () (x is-not-free-in (∀ x φ)))
stmt (BoundThereExistsNotFree () () (x is-not-free-in (∃ x φ)))
</jh>

If a variable is not free in a formula it is not free in a formula which adds another quantifier (possibly to a different variable) at the start:
<jh>
stmt (addForAllNotFree () ((x is-not-free-in φ)) (x is-not-free-in (∀ y φ)))
stmt (addThereExistsNotFree () ((x is-not-free-in φ)) (x is-not-free-in (∃ y φ)))
</jh>

If a variable is not free in any of the parts of a formula it is not free in the formula which joins them with connectives:

<jh>
stmt (negateNotFree () ((x is-not-free-in φ)) (x is-not-free-in (¬ φ)))

stmt (implicationNotFree () 
  ((x is-not-free-in φ) (x is-not-free-in ψ))
  (x is-not-free-in (φ → ψ))
)

stmt (disjunctionNotFree () 
  ((x is-not-free-in φ) (x is-not-free-in ψ))
  (x is-not-free-in (φ ∨ ψ)))

stmt (conjunctionNotFree ()
  ((x is-not-free-in φ) (x is-not-free-in ψ))
  (x is-not-free-in (φ ∧ ψ)))

stmt (biconditionalNotFree ()
  ((x is-not-free-in φ) (x is-not-free-in ψ))
  (x is-not-free-in (φ ↔ ψ)))
</jh>

And we supply a builder for <code>is-not-free-in</code>:

<jh>
stmt (buildNotFree () ((φ ↔ ψ)) ((x is-not-free-in φ) ↔ (x is-not-free-in ψ)))
</jh>

=== Adding or removing quantifiers ===
If a variable is not free in a formula, it is legitimate to add or remove quantifiers from that formula:
<jh>
stmt (ForAllAddRemove () ((x is-not-free-in φ)) ((∀ x φ) ↔ φ))
stmt (ThereExistsAddRemove () ((x is-not-free-in φ)) ((∃ x φ) ↔ φ))
</jh>

=== Moving formulas in and out of quantification ===
The results in this section all have to do with being able to move around formulas relative to quantifiers, given that the quantified variable is not free in the formula being moved.

==== Implication ====
<jh>
stmt (ForAllImplicationAntecedentMovement () ((x is-not-free-in φ)) ((∀ x (φ → ψ)) ↔ (φ → (∀ x ψ))))
stmt (moveAntecedentOutOfForAll () ((∀ x (φ → ψ)) (x is-not-free-in φ)) (φ → (∀ x ψ)))
stmt (moveAntecedentIntoForAll () 
  ((φ → (∀ x ψ)) (x is-not-free-in φ)) 
  (∀ x (φ → ψ)))

stmt (ThereExistsAntecedentMovementNotFree () ((x is-not-free-in φ)) ((∃ x (φ → ψ)) ↔ (φ → (∃ x ψ))))
stmt (ForAllImplicationConsequentMovement () ((x is-not-free-in ψ)) ((∀ x (φ → ψ)) ↔ ((∃ x φ) → ψ)))
stmt (ThereExistsImplicationConsequentMovement () ((x is-not-free-in ψ)) ((∃ x (φ → ψ)) ↔ ((∀ x φ) → ψ)))

stmt (ThereExistsConjunctionMovementNotFree () ((x is-not-free-in φ)) ((∃ x (φ ∧ ψ)) ↔ (φ ∧ (∃ x ψ))))
</jh>

==== Versions with distinct variables ====
<jh>
stmt (ThereExistsConjunctionMovement ((x φ)) () ((∃ x (φ ∧ ψ)) ↔ (φ ∧ (∃ x ψ))))
stmt (ThereExistsConjunctionRightMovement ((x ψ)) () ((∃ x (φ ∧ ψ)) ↔ ((∃ x φ) ∧ ψ)))

stmt (ThereExistsDisjunctionMovement ((x φ)) () ((∃ x (φ ∨ ψ)) ↔ (φ ∨ (∃ x ψ))))
stmt (ThereExistsDisjunctionRightMovement ((x ψ)) () ((∃ x (φ ∨ ψ)) ↔ ((∃ x φ) ∨ ψ)) )

stmt (ThereExistsAntecedentMovement ((x φ)) () ((∃ x (φ → ψ)) ↔ (φ → (∃ x ψ))))
</jh>

==== Scattering and gathering ====
If we have two formulas joined by a conjunction, one quantified over one variable and the other quantified over another, we can express the quantifiers either at the beginning or with the formulas they apply to.<ref>[http://us.metamath.org/mpeuni/eeanv.html eeanv], metamath's set.mm, accessed August 8, 2010</ref> We refer to this process as gathering (that is, gathering the quantifiers together at the start of the formula) or scattering (the opposite).
<jh>
stmt (ThereExistsScattering ((φx y) (ψy x)) ()
  ((∃ x (∃ y (φx ∧ ψy))) ↔ ((∃ x φx) ∧ (∃ y ψy))))
</jh>

==== Adding quantifiers to theorems which are implications ====

These variants on moving formulas turn out to be used particularly often:
<jh>
stmt (addThereExistsToAntecedent ((x ψ))
  ((φ → ψ))
  ((∃ x φ) → ψ))
stmt (addForAllToConsequent ((x φ))
  ((φ → ψ))
  (φ → (∀ x ψ)))

stmt (addForAllToConsequentNotFree () ((x is-not-free-in φ) (φ → ψ)) (φ → (∀ x ψ)))
</jh>

=== Changing the quantified variable ===
We can transform a quantified formula by substituting each of the occurences of the variable we are quantifying over to another variable, and changing the variable in the quantifier accordingly. Here is a version with implicit substitution.
<jh>
stmt (ChangeVariableThereExistsNotFree
  ((x y))
  ((x is-not-free-in φy)
   (y is-not-free-in φx)
   (((value x) = (value y)) → (φx ↔ φy)))
  ((∃ x φx) ↔ (∃ y φy)))
stmt (ChangeVariableForAllNotFree ((x y))
  ((x is-not-free-in φy)
   (y is-not-free-in φx)
   (((value x) = (value y)) → (φx ↔ φy)))
  ((∀ x φx) ↔ (∀ y φy)))

stmt (ChangeVariableThereExists
  ((y φx) (x φy) (x y))
  ((((value x) = (value y)) → (φx ↔ φy)))
  ((∃ x φx) ↔ (∃ y φy)))
stmt (ChangeVariableForAll ((y φx) (x φy) (x y))
  ((((value x) = (value y)) → (φx ↔ φy)))
  ((∀ x φx) ↔ (∀ y φy)))
</jh>

=== Other theorems related to substitution ===
<jh>
stmt (equs3 () () 
  ((∃ x (((value x) = s) ∧ φ)) ↔ (¬ (∀ x (((value x) = s) → (¬ φ))))))
stmt (VariableSubstitution ((x y)) () 
  (((value x) = (value y)) → (φ → (∀ x (((value x) = (value y)) → φ)))) )
</jh>

== Propositional logic ==
These surely belong elsewhere, but are here for the moment.

<jh>
stmt (joinConsequents ()
  ((φ → ψ) (φ → χ))
  (φ → (¬ (ψ → (¬ χ)))))
</jh>

== References ==
<references/>

[[Category:Classical first-order logic|{{PAGENAME}}]]