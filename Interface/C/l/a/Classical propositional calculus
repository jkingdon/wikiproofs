{{header
 | title    = Classical propositional calculus
 | subtitle = 
 | left     = 
 | right    = 
 | shortcut = 
 | notes    = This interface collects all important theorems from [[w:classical propositional calculus|classical propositional calculus]]. It is meant as a user-friendly reservoir for those interfaces and proof modules which merely use propositional logic, without proving anything new within it.

[[Image:Zeichen 123.svg|50px]] Still under construction!
}}

== Well-formed formulas ==

We first introduce the kind of [[w:well-formed formulas|well-formed formulas]] and a few variables for this kind.
<jh>
kind (wff)
var (wff p q r s)
</jh>

== Logical connectives ==

There are five standard [[w:logical connective|logical connective]]s in the classical propositional calculus, [[w:negation|negation]],
<jh>
term (wff (¬ wff))
</jh>
[[w:material conditional|implication]],
<jh>
term (wff (→ wff wff))
</jh>
[[w:logical disjunction|disjunction]],
<jh>
term (wff (∨ wff wff))
</jh>
[[w:logical conjunction|conjunction]],
<jh>
term (wff (∧ wff wff))
</jh>
and, finally, the [[w:logical biconditional|biconditional]],
<jh>
term (wff (↔ wff wff))
</jh>
In addition, one can also consider the constant formulas (or [[w:nullary#Nullary|nullary]] connectives) "the true",
<jh>
term (wff (⊤))
</jh>
and "the false",
<jh>
term (wff (⊥))
</jh>

== Simple statements ==

Here are the statements which do not require any hypotheses.

=== Constant statements ===

The simplest statements are the "true" and the "not false" statement:
<jh>
stmt (True () () (⊤))
stmt (NotFalse () () (¬ (⊥)))
</jh>

=== Statements about negation ===

Double negation:
<jh>
stmt (DoubleNegation () () (p ↔ (¬ (¬ p))))
</jh>
Negation as a truth function:
<jh>
stmt (NegationFunction () () ((p ↔ q) ↔ ((¬ p) ↔ (¬ q))))
</jh>

=== Statements about implication ===

Chaining [[w:antecedent|antecedent]]s in an implication is equivalent to a conjunction of these antecedents. This is the importation/exportation principle of [[w:Giuseppe Peano|Giuseppe Peano]].
<jh>
stmt (Transportation () () ((p → (q → r)) ↔ ((p ∧ q) → r)))
</jh>
The distributive law of implication.
<jh>
stmt (ImplicationDistribution () () ((p → (q → r)) ↔ ((p → q) → (p → r))))
</jh>
Three [[w:Transposition_(logic)|transposition]] statements:
<jh>
stmt (Transposition () () ((p → q) ↔ ((¬ q) → (¬ p))))
stmt (TranspositionWithNegatedAntecedent () () (((¬ p) → q) ↔ ((¬ q) → p)))
stmt (TranspositionWithNegatedConsequent () () ((p → (¬ q)) ↔ (q → (¬ p))))
</jh>
[[w:Syllogism|Syllogism]]:
<jh>
stmt (Syllogism () () ((p → q) → ((q → r) → (p → r))))
</jh>
[[w:Modus ponens|Modus ponens]] and [[w:modus tollens|modus tollens]]:
<jh>
stmt (ModusPonens () () (p → ((p → q) → q)))
stmt (ModusTollens () () ((¬ q) → ((p → q) → (¬ p))))
</jh>
Implication as a truth function:
<jh>
stmt (ImplicationFunction () () (((p ↔ q) ∧ (r ↔ s)) → ((p → r) ↔ (q → s))))
</jh>

=== Statements abount disjunction and conjunction ===

==== Idempotence ====

<jh>
stmt (DisjunctionIdempotence () () (p ↔ (p ∨ p)))
stmt (ConjunctionIdempotence () () (p ↔ (p ∧ p)))
</jh>

==== Associativity ====

<jh>
stmt (DisjunctionAssociativity () () (((p ∨ q) ∨ r) ↔ (p ∨ (q ∨ r))))
stmt (ConjunctionAssociativity () () (((p ∧ q) ∧ r) ↔ (p ∧ (q ∧ r))))
</jh>

==== Commutativity ====

<jh>
stmt (DisjunctionCommutativity () () ((p ∨ q) ↔ (q ∨ p)))
stmt (ConjunctionCommutativity () () ((p ∧ q) ↔ (q ∧ p)))
</jh>

==== Distributive laws ====

<jh>
stmt (DisjunctionDistribution () () ((p ∨ (q ∧ r)) ↔ ((p ∨ q) ∧ (p ∨ r))))
stmt (ConjunctionDistribution () () ((p ∧ (q ∨ r)) ↔ ((p ∧ q) ∨ (p ∧ r))))
</jh>

==== De Morgan's laws ====

<jh>
stmt (DisjunctionNegation () () ((¬ (p ∨ q)) ↔ ((¬ p) ∧ (¬ q))))
stmt (ConjunctionNegation () () ((¬ (p ∧ q)) ↔ ((¬ p) ∨ (¬ q))))
</jh>

==== Disjunction and conjunction as truth functions ====

<jh>
stmt (DisjunctionFunction () () (((p ↔ q) ∧ (r ↔ s)) → ((p ∨ r) ↔ (q ∨ s))))
stmt (ConjunctionFunction () () (((p ↔ q) ∧ (r ↔ s)) → ((p ∧ r) ↔ (q ∧ s))))
</jh>

[[Category:Classical propositional logic|!]]