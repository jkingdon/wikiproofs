{{header
 | title    = Changing all quantifiers to be restricted
 | subtitle = 
 | left     = 
 | right    = 
 | shortcut = 
 | notes    = In proving theories such as [[Interface:Tarski's geometry axioms]] or [[Interface:Peano axioms]] from set theory, we need to provide a way for a quantifier of the theory to be translated into a set theory quantifier which is restricted to the universe of the theory. For example, <code>∀ x φ</code> in Peano arithmetic corresponds to <code>∀ x ∈ ℕ φ</code> in the underlying set theory.

Such a construction should prove that the axioms of first-order logic, for example [[Interface:Axioms of first-order logic]] and the [[Interface:Axiom of quantifiability]] if in use, are satisfied by the restricted quantifiers, to justify the use of this interface as a parameter in place of [[Interface:First-order logic]] (or [[Interface:First-order logic with quantifiability]]). We do not yet attempt such a task, and ensuring that such a proof would establish soundness would require some thought about how parameters and interfaces in JHilbert relate to soundness (most discussion of JHilbert soundness to date has concerned soundness within a single proof module, not how soundness relates to interfaces and parameters).
}}
{{modules
| parameters = [[Interface:Classical propositional calculus]]
| importedby = [[Tarski's geometry axioms in terms of real numbers]]
| exportedby = none yet
}}

We first take parameters for the set theory: [[Interface:Classical propositional calculus]], [[Interface:First-order logic with quantifiability]], and [[Interface:Set theory]].
<jh>
param (CLASSICAL Interface:Classical_propositional_calculus () ())
param (FIRSTORDER Interface:First-order_logic_with_quantifiability (CLASSICAL) set.)
param (SETS Interface:Set_theory (CLASSICAL FIRSTORDER) ())
</jh>

We take a parameter indicating what set to restrict to. It needs to define one 0-ary term, <code>(universe)</code>. It indicates the universe as a set (within the world of restricted quantifiers, the restricted universe is implicit). That is, it is of kind <code>set.object</code>.
<jh>
param (UNIVERSE Interface:Universe (CLASSICAL FIRSTORDER SETS) ())

var (formula φ)
</jh>

Although the title of this page is "Restricting all quantifiers", in the presence of axioms/theorems like <code>Generalization</code>, the quantifiers interact with concepts like what values a variable can take on. That is, we need to distinguish between set variables and variables within the universe we are restricting to. Set variables are of kind <code>set.variable</code> and terms (classes) which are not restricted are of kind <code>set.object</code>. The restricted counterparts are <code>variable</code> and <code>object</code>.

<jh>
kind (object)
kind (variable)

var (set.variable a b c)
var (set.object A B C)
var (variable x y z)
var (object X Y Z)
</jh>

Now that we have defined restricted variables and restricted terms, we need to relate them to sets. A restricted variable can be treated as a set (or to put it another way, the restricted universe lives within the universe of set theory).
<jh>
term (set.object (asSet object))
term (set.variable (asSetVariable variable))

stmt (InUniverse () () ((asSet X) ∈ (universe)))
# possibly additional statements to follow here
</jh>

Having defined <code>asSet</code>, equality of restricted terms can be defined in terms of equality of sets.
<jh>
def ((= X Y) ((asSet X) set.= (asSet Y)))
</jh>

Taking the value of a restricted variable yields a restricted term. It might be possible to define <code>value</code> in terms of other things like <code>asSetVariable<code>, <code>set.value</code>, and probably others, but at least for now we define it via axioms, rather than a JHilbert definition.
<jh>
term (object (value variable))
stmt (ValueValue () () ((set.value (asSetVariable x)) set.= (asSet (value x))))
# possibly more axioms to follow
</jh>

To explain how we are going to define the restricted <code>∀</code>, we start with an example. A sample statement in the restricted universe would be <code>∀ x x = x</code> (a more realistic example might be something which holds in the restricted universe but not for all sets, but such an example would require more setup, so we start with a simple case). We'll want to define <code>∀</code> so this expands to <code>set.∀ a (a ∈ universe → a set.= a)</code> where <code>a</code> corresponds to <code>asSetVariable x</code>.

<jh>
def ((∀ x φ) (set.∀ (asSetVariable x) (((asSet (value x)) ∈ (universe)) → φ)))
</jh>

The other things we need in order to be a parameter in place of [[Interface:First-order logic with quantifiability]] can be defined in terms of the ones we already have.
<jh>
def ((∃ x φ) (¬ (∀ x (¬ φ))))
def ((≠ X Y) (¬ (X = Y)))
def ((is-not-free-in x φ) (φ → (∀ x φ)))
</jh>

[[Category:Classical first-order logic|{{PAGENAME}}]]
[[Category:JHilbert]]
