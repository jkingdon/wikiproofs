{{modules
| parameters = [[Interface:Classical propositional calculus|Classical propositional calculus]], [[Interface:First-order logic with quantifiability|first-order logic]]
| importedby = [[Relations]]
| exportedby = [[Basic operations of Zermelo–Fraenkel set theory]]
}}

This page covers some of the simplest operations of set theory including the empty set, singletons, unordered pairs, power set, and unions.

== Variables, objects (classes), and membership ==

We build on [[Interface:Classical propositional calculus|propositional logic]] and [[Interface:First-order logic with quantifiability|first-order logic]] (including equality):

<jh>
param (CLASSICAL Interface:Classical_propositional_calculus () ())
param (FIRSTORDER Interface:First-order_logic_with_quantifiability (CLASSICAL) ())
</jh>

First-order logic provides us with two kinds: <code>variable</code> is a variable, which represents a set and can be quantified over, and <code>object</code> is an expression which represents a set. For example, a variable might be <code>x</code>, <code>y</code>, or <code>z</code>, but an object could be the singleton <code>{ x }</code>, the unordered pair <code>{ x, y }</code>, the ordered pair <code>〈 x, y 〉</code>, etc. To some extent the concepts of variable and object correspond to set and class in some theories (like metamath's set.mm), but one key difference is that we have no [[w:proper class|proper classes]] thanks to the [[Interface:Axiom of quantifiability|axiom of quantifiability]].

<jh>
var (variable x y z w)
var (object A B C A0 A1 B0 B1)
var (formula φ ψ φx φy antecedent)
</jh>

We can test whether one set is an element of another, and define an abbreviation for the negated version.
<jh>
term (formula (∈ object object))
def ((∉ A B) (¬ (A ∈ B)))
</jh>

Here are two ways of combining membership with a substitution:
<jh>
stmt (MembershipForAll ((x A) (x B)) ()
  ((A ∈ B) ↔ (∀ x (((value x) = A) → ((value x) ∈ B)))))
stmt (MembershipThereExists ((x A) (x B)) ()
  ((A ∈ B) ↔ (∃ x (((value x) = A) ∧ ((value x) ∈ B)))))
</jh>

== Empty set ==
We assert the existence of the empty set, a set with no elements.
<jh>
term (object (∅))
stmt (EmptySet () () (A ∉ (∅)))
</jh>

== Singleton ==
Given a set, we can form a set <code>{ s }</code> which has only it as an element.<ref>[http://us.metamath.org/mpeuni/elsncg.html elsncg], metamath's set.mm, accessed August 7, 2010</ref>
<jh>
term (object (singleton object))
stmt (Singleton () () ((A ∈ (singleton B)) ↔ (A = B)))
</jh>

A set is an element of its singleton: <code>A ∈ {A}</code>.<ref>[http://us.metamath.org/mpeuni/snid.html snid], metamath's set.mm, accessed August 5, 2010</ref>
<jh>
stmt (SingletonMembership () () (A ∈ (singleton A)))
</jh>

== Unordered pair ==
Given two sets, we can form a unordered pair <code>{ s, t }</code> which has only those sets as elements.
<jh>
term (object (unorderedPair object object))
stmt (UnorderedPair () () ((B ∈ (unorderedPair A0 A1)) ↔ ((B = A0) ∨ (B = A1))))
</jh>

An unordered pair contains each of its members: <code>A ∈ {A, B}</code>.
<jh>
stmt (UnorderedPairLeftMembership () () (A ∈ (unorderedPair A B)))
stmt (UnorderedPairRightMembership () () (B ∈ (unorderedPair A B)))
</jh>

Unordered pairs are unordered: <code>{A, B} = {B, A}</code>.
<jh>
stmt (UnorderedPairCommutativity () () ((unorderedPair A B) = (unorderedPair B A)))
</jh>

Unordered pair equality can imply equality of members: <code>{A, C} = {B, C} → A = B</code>,<ref>[http://us.metamath.org/mpeuni/preqr1.html preqr1], metamath's set.mm, accessed August 4, 2010</ref> and likewise if the unordered pairs are commuted.

<jh>
stmt (UnorderedPairFirstMembersEqual () () (((unorderedPair A C) = (unorderedPair B C)) → (A = B)))
stmt (UnorderedPairSecondMembersEqual () () (((unorderedPair C A) = (unorderedPair C B)) → (A = B)))
</jh>

A singleton is equal to an unordered pair with the same element listed twice.
<jh>
stmt (SingletonUnorderedPair () () ((singleton A) = (unorderedPair A A)))
</jh>

== Subset ==
The subset relationship is equivalent to various statements involving membership, unions, intersections, and set differences.<ref>[http://us.metamath.org/mpeuni/df-ss.html df-ss]</ref>
<jh>
term (formula (⊆ object object))
stmt (Subset ((x A) (x B)) ()
  ((A ⊆ B) ↔ (∀ x (((value x) ∈ A) → ((value x) ∈ B)))))
stmt (SubsetMembership () () ((A ⊆ B) → ((C ∈ A) → (C ∈ B))))

stmt (SingletonSubset () () ((A ∈ B) ↔ ((singleton A) ⊆ B)))
stmt (UnorderedPairSubset () ()
  (((A ∈ C) ∧ (B ∈ C)) ↔ ((unorderedPair A B) ⊆ C)))
</jh>

=== Partial order ===
The subset relationship has the three properties of a [[w:Partially ordered set|partial order]]. That is, it is reflexive, antisymmetric, and transitive.

<jh>
stmt (SubsetReflexivity () () (A ⊆ A))
stmt (SubsetAntisymmetry () () (((A ⊆ B) ∧ (B ⊆ A)) → (A = B)))
stmt (SubsetTransitivity () () (((A ⊆ B) ∧ (B ⊆ C)) → (A ⊆ C)))
</jh>

== Union ==
The union of a set has as its elements everything which is an element of some set in the given set.
<jh>
term (object (⋃ object))
stmt (Union ((x A) (x B)) () ((B ∈ (⋃ A)) ↔ (∃ x ((B ∈ (value x)) ∧ ((value x) ∈ A)))))
</jh>

The union of two sets is just a special case of the union of a set.
<jh>
def ((∪ A B) (⋃ (unorderedPair A B)))
stmt (BinaryUnion () () ((A ∈ (B ∪ C)) ↔ ((A ∈ B) ∨ (A ∈ C))))

stmt (MembershipUnionRightIntroduction () () ((A ∈ B) → (A ∈ (B ∪ C))))
stmt (MembershipUnionLeftIntroduction () () ((A ∈ C) → (A ∈ (B ∪ C))))

stmt (UnionIdempotence () () ((A ∪ A) = A))
stmt (UnionSingleton () () ((⋃ (singleton A)) = A))
</jh>

An unordered pair is the union of singletons for each of its elements.
<jh>
stmt (UnorderedPairSingleton () ()
  ((unorderedPair A B) = ((singleton A) ∪ (singleton B))))
</jh>

=== Subsets and unions ===
<jh>
stmt (SubsetUnion () () (((A ⊆ B) ∧ (B ∈ C)) → (A ⊆ (⋃ C))))
stmt (MembershipSubsetUnion () () ((A ∈ B) → (A ⊆ (⋃ B))))

stmt (SubsetUnionRightIntroduction () ()
  ((A ⊆ B) → (A ⊆ (B ∪ C))))
</jh>

== Power set ==
The power set of a set has as its elements all of the subsets of the given set.
<jh>
term (object (power object))
stmt (PowerSet () () ((B ∈ (power A)) ↔ (B ⊆ A)))
</jh>

== Separation ==
We define <code>{x ∈ A | φ}</code>, the set of all elements in <code>A</code> which also satisfy <code>φ</code>. Although we write <code>{x ∈ A | φ}</code> informally, for JHilbert it needs to be <code>(separate x A φ)</code>.
<jh>
term (object (separate variable object formula))
stmt (Separation ((x A)) ()
  ((C ∈ (separate x A φ)) ↔ ((C ∈ A) ∧ (subst C x φ))))
stmt (FormulaBound ((z A) (z B)) ((φ → ((value z) ∈ A)))
  ((B ∈ (separate z A φ)) ↔ (subst B z φ)))
</jh>

The term <code>{x ∈ A | φ}</code> is like a quantifier in the sense that it binds <code>x</code>, and we can change the variable in a similar manner.
<jh>
stmt (ChangeVariableSeparation
  ((y φx) (x φy) (x y A))
  ((((value x) = (value y)) → (φx ↔ φy)))
  ((separate x A φx) = (separate y A φy)))
</jh>

== Builders ==
Equals can be substituted for equals, in the context of set operations.

<jh>
stmt (MembershipBuilderLL () () ((B0 = B1) → ((A ∈ B0) ↔ (A ∈ B1))))
stmt (MembershipBuilderRR () () ((A0 = A1) → ((A0 ∈ B) ↔ (A1 ∈ B))))
stmt (buildMembershipLL () ((B0 = B1)) ((A ∈ B0) ↔ (A ∈ B1)))
stmt (buildMembershipRR () ((A0 = A1)) ((A0 ∈ B) ↔ (A1 ∈ B)))
stmt (buildMembershipLLInConsequent ()
  ((antecedent → (B0 = B1)))
  (antecedent → ((A ∈ B0) ↔ (A ∈ B1))))
stmt (buildMembershipRRInConsequent ()
  ((antecedent → (A0 = A1)))
  (antecedent → ((A0 ∈ B) ↔ (A1 ∈ B))))

stmt (SingletonBuilder () () ((A = B) → ((singleton A) = (singleton B))))

stmt (UnorderedPairBuilder () () (((A0 = B0) ∧ (A1 = B1)) → ((unorderedPair A0 A1) = (unorderedPair B0 B1))))

stmt (SeparationBuilder ((x A) (x B)) ()
  (((A = B) ∧ (∀ x (φ ↔ ψ))) → ((separate x A φ) = (separate x B ψ))))
stmt (buildSeparation ((x A)) ((φ ↔ ψ)) ((separate x A φ) = (separate x A ψ)))

stmt (UnionBuilder () () ((A = B) → ((⋃ A) = (⋃ B))))
stmt (buildUnion () ((A = B)) ((⋃ A) = (⋃ B)))
</jh>

== Extensionality ==
Sets with the same elements are equal.
<jh>
stmt (Extensionality ((A z) (B z)) () ((∀ z (((value z) ∈ A) ↔ ((value z) ∈ B))) → (A = B)))
stmt (applyExtensionality ((x A) (x B)) ((((value x) ∈ A) ↔ ((value x) ∈ B))) (A = B))
</jh>

Here's a variant with explicit freeness hypotheses rather than distinct variable constraints.
<jh>
stmt (ExtensionalityNotFree ((y A) (y B) (y x))
  ((x is-not-free-in ((value y) ∈ A))
   (x is-not-free-in ((value y) ∈ B))
  )
  ((A = B) ↔ (∀ x (((value x) ∈ A) ↔ ((value x) ∈ B)))))
</jh>

== References ==
<references/>

[[Category:Axiomatics of classical set theory and its fragments|{{PAGENAME}}]]
