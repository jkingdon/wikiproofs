== Legality of new RHS variables in abbreviations ==

Actually, new RHS variables in abbreviation will remain legal ''for proof modules''. Proof modules are never imported anywhere, so no dummy variables are required. The extra variables are simply dragged along silently. This is quite practical for an abbreviation of an expression appearing multiple times in one or more proofs in the same proof module (just as you would abbreviate a common subexpression with a letter or (*) in a regular paper). In interface modules, of course, such an abbreviation should generate an error.--[[User:GrafZahl|GrafZahl]]&nbsp;([[User talk:GrafZahl|talk]]) 14:25, 20 December 2011 (UTC)

:Hmm. The first question that springs to mind is what happens if I then try to export to an interface which has a <code>term</code> matching the left hand side? But aside from that, let me try to figure out what is being proposed here. In an example like [[User:GrafZahl/unsound-def.gh]], but where <code>def ((constx) x)</code> would be changed to <code>abbr ((constx) x)</code>, is the idea that <code>thm (badth () () (-> ph (A. (constx) ph))</code> would then be treated the same as <code>thm (badth () () (-> ph (A. x ph))</code> would be (and thus require a <code>ph x</code> distinct variable constraint)? There's also the question of the appeal of this feature, compared with explicitly specifing the variables in the abbreviation (as is done in <code>def ((Ï€ t) (t | (t | t)))</code> in [[Nicod's reduction of Principia Mathematica]]). There are plenty of cases where specifying variables seems natural, for example <code>is-not-free-in</code> in [[First-order_logic]] or <code>is-outside</code> in [[Out lines]]. But I guess the use case for this sort of abbreviation is something like the Nicod one, or perhaps the repetitive hypotheses in places like [[Connectivity for betweenness]] or, to pick a less intimidating example, a geometry proof like <code>InnerFiveSegment</code> in [[Triangle_congruence]]. [[User:Kingdon|Kingdon]] 04:52, 21 December 2011 (UTC)